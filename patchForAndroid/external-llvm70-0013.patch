This program is free software; you can redistribute it and/or modify
it under the terms of the LLVM Release License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
LLVM Release License for more details.

==============================================================================
LLVM Release License
==============================================================================
University of Illinois/NCSA
Open Source License


Developed by:

    LLVM Team

    University of Illinois at Urbana-Champaign

    http://llvm.org

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal with
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimers.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimers in the
      documentation and/or other materials provided with the distribution.

    * Neither the names of the LLVM Team, University of Illinois at
      Urbana-Champaign, nor the names of its contributors may be used to
      endorse or promote products derived from this Software without specific
      prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
SOFTWARE.
diff -Nurp a/Android.mk b/Android.mk
--- a/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/Android.mk	2021-04-19 02:00:13.358308931 +0000
@@ -0,0 +1,118 @@
+LOCAL_PATH := $(call my-dir)
+LLVM70_ROOT_PATH := $(LOCAL_PATH)
+
+FORCE_BUILD_LLVM70_DISABLE_NDEBUG ?= false
+# Legality check: FORCE_BUILD_LLVM70_DISABLE_NDEBUG should consist of one word -- either "true" or "false".
+ifneq "$(words $(FORCE_BUILD_LLVM70_DISABLE_NDEBUG))$(words $(filter-out true false,$(FORCE_BUILD_LLVM70_DISABLE_NDEBUG)))" "10"
+  $(error FORCE_BUILD_LLVM70_DISABLE_NDEBUG may only be true, false, or unset)
+endif
+
+FORCE_BUILD_LLVM70_DEBUG ?= false
+# Legality check: FORCE_BUILD_LLVM70_DEBUG should consist of one word -- either "true" or "false".
+ifneq "$(words $(FORCE_BUILD_LLVM70_DEBUG))$(words $(filter-out true false,$(FORCE_BUILD_LLVM70_DEBUG)))" "10"
+  $(error FORCE_BUILD_LLVM70_DEBUG may only be true, false, or unset)
+endif
+include $(CLEAR_VARS)
+
+# LLVM70 Libraries
+subdirs := \
+  lib/Analysis \
+  lib/AsmParser \
+  lib/BinaryFormat \
+  lib/Bitcode/Reader \
+  lib/Bitcode/Writer \
+  lib/Bitstream/Reader \
+  lib/Remarks \
+  lib/ExecutionEngine \
+  lib/ExecutionEngine/RuntimeDyld \
+  lib/ExecutionEngine/MCJIT \
+  lib/ExecutionEngine/Orc \
+  lib/ExecutionEngine/Interpreter \
+  lib/ExecutionEngine/JITLink \
+  lib/CodeGen \
+  lib/CodeGen/AsmPrinter \
+  lib/CodeGen/GlobalISel \
+  lib/CodeGen/MIRParser \
+  lib/CodeGen/SelectionDAG \
+  lib/DebugInfo/DWARF \
+  lib/DebugInfo/PDB \
+  lib/DebugInfo/MSF \
+  lib/DebugInfo/Symbolize \
+  lib/DebugInfo/CodeView \
+  lib/Demangle \
+  lib/IR \
+  lib/IRReader \
+  lib/Linker \
+  lib/LTO \
+  lib/MC \
+  lib/MC/MCDisassembler \
+  lib/MC/MCParser \
+  lib/Object \
+  lib/Option \
+  lib/Passes \
+  lib/ProfileData \
+  lib/ProfileData/Coverage \
+  lib/Support \
+  lib/TableGen \
+  lib/Target \
+  lib/Transforms/IPO \
+  lib/Transforms/Coroutines \
+  lib/Transforms/InstCombine \
+  lib/Transforms/Instrumentation \
+  lib/Transforms/ObjCARC \
+  lib/Transforms/Scalar \
+  lib/Transforms/Utils \
+  lib/Transforms/Vectorize \
+  lib/Transforms/AggressiveInstCombine \
+  lib/ToolDrivers/llvm-lib
+
+# ARM Code Generation Libraries
+subdirs += \
+  lib/Target/ARM \
+  lib/Target/ARM/AsmParser \
+  lib/Target/ARM/InstPrinter \
+  lib/Target/ARM/Disassembler \
+  lib/Target/ARM/MCTargetDesc \
+  lib/Target/ARM/TargetInfo \
+  lib/Target/ARM/Utils
+
+# AArch64 Code Generation Libraries
+subdirs += \
+  lib/Target/AArch64  \
+  lib/Target/AArch64/AsmParser \
+  lib/Target/AArch64/InstPrinter \
+  lib/Target/AArch64/Disassembler \
+  lib/Target/AArch64/MCTargetDesc \
+  lib/Target/AArch64/TargetInfo \
+  lib/Target/AArch64/Utils
+
+# MIPS Code Generation Libraries
+# ignore MIPS
+
+# X86 Code Generation Libraries
+subdirs += \
+  lib/Target/X86 \
+  lib/Target/X86/AsmParser \
+  lib/Target/X86/InstPrinter \
+  lib/Target/X86/Disassembler \
+  lib/Target/X86/MCTargetDesc \
+  lib/Target/X86/TargetInfo \
+  lib/Target/X86/Utils
+
+# AMDGPU Code Generation Libraries
+subdirs += \
+  lib/Target/AMDGPU \
+  lib/Target/AMDGPU/AsmParser \
+  lib/Target/AMDGPU/Disassembler \
+  lib/Target/AMDGPU/InstPrinter \
+  lib/Target/AMDGPU/MCTargetDesc \
+  lib/Target/AMDGPU/TargetInfo \
+  lib/Target/AMDGPU/Utils
+
+# LLVM70 Command Line Utilities
+subdirs += \
+  utils/TableGen
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_ROOT_PATH)/shared_llvm70.mk
+include $(addprefix $(LLVM70_ROOT_PATH)/,$(addsuffix /Android.mk, $(subdirs)))
diff -Nurp a/CleanSpec.mk b/CleanSpec.mk
--- a/CleanSpec.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/CleanSpec.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,11 @@
+# ************************************************
+# NEWER CLEAN STEPS MUST BE AT THE END OF THE LIST
+# ************************************************
+$(call add-clean-step, rm -rf $(OUT_DIR)/target/product/stingray/obj/STATIC_LIBRARIES/libLLVM70*)
+$(call add-clean-step, rm -rf $(OUT_DIR)/target/product/stingray/obj/STATIC_LIBRARIES/libLLVM70ARMCodeGen_intermediates*)
+$(call add-clean-step, rm -rf $(OUT_DIR)/host/$(HOST_PREBUILT_TAG)/obj/STATIC_LIBRARIES/libLLVM70ARM*)
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/obj/STATIC_LIBRARIES/libLLVM70ARM*)
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/obj/EXECUTABLES/app_process__asan_intermediates*)
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/obj/STATIC_LIBRARIES/libLLVM70*)
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/obj/SHARED_LIBRARIES/libLLVM70*)
+$(call add-clean-step, rm -f external/llvm70/tools/llvm-config/BuildVariables.inc)
diff -Nurp a/clear_tblgen_vars.mk b/clear_tblgen_vars.mk
--- a/clear_tblgen_vars.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/clear_tblgen_vars.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,3 @@
+TBLGEN_TABLES :=
+TBLGEN_TD_DIR :=
+TBLGEN_IN_TD :=
diff -Nurp a/device/include/llvm/Config/abi-breaking.h b/device/include/llvm/Config/abi-breaking.h
--- a/device/include/llvm/Config/abi-breaking.h	1970-01-01 00:00:00.000000000 +0000
+++ b/device/include/llvm/Config/abi-breaking.h	2021-04-19 01:45:06.662348822 +0000
@@ -0,0 +1,50 @@
+/*===------- llvm/Config/abi-breaking.h - llvm configuration -------*- C -*-===*/
+/*                                                                            */
+/*                     The LLVM Compiler Infrastructure                       */
+/*                                                                            */
+/* This file is distributed under the University of Illinois Open Source      */
+/* License. See LICENSE.TXT for details.                                      */
+/*                                                                            */
+/*===----------------------------------------------------------------------===*/
+
+/* This file controls the C++ ABI break introduced in LLVM public header. */
+
+#ifndef LLVM_ABI_BREAKING_CHECKS_H
+#define LLVM_ABI_BREAKING_CHECKS_H
+
+/* Define to enable checks that alter the LLVM C++ ABI */
+#define LLVM_ENABLE_ABI_BREAKING_CHECKS 1
+
+/* Define to enable reverse iteration of unordered llvm containers */
+#define LLVM_ENABLE_REVERSE_ITERATION 0
+
+/* Allow selectively disabling link-time mismatch checking so that header-only
+   ADT content from LLVM can be used without linking libSupport. */
+#if !LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING
+
+// ABI_BREAKING_CHECKS protection: provides link-time failure when clients build
+// mismatch with LLVM
+#if defined(_MSC_VER)
+// Use pragma with MSVC
+#define LLVM_XSTR(s) LLVM_STR(s)
+#define LLVM_STR(s) #s
+#pragma detect_mismatch("LLVM_ENABLE_ABI_BREAKING_CHECKS", LLVM_XSTR(LLVM_ENABLE_ABI_BREAKING_CHECKS))
+#undef LLVM_XSTR
+#undef LLVM_STR
+#elif defined(_WIN32) || defined(__CYGWIN__) // Win32 w/o #pragma detect_mismatch
+// FIXME: Implement checks without weak.
+#elif defined(__cplusplus)
+namespace llvm {
+#if LLVM_ENABLE_ABI_BREAKING_CHECKS
+extern int EnableABIBreakingChecks;
+__attribute__((weak, visibility ("hidden"))) int *VerifyEnableABIBreakingChecks = &EnableABIBreakingChecks;
+#else
+extern int DisableABIBreakingChecks;
+__attribute__((weak, visibility ("hidden"))) int *VerifyDisableABIBreakingChecks = &DisableABIBreakingChecks;
+#endif
+}
+#endif // _MSC_VER
+
+#endif // LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING
+
+#endif
diff -Nurp a/device/include/llvm/Config/AsmParsers.def b/device/include/llvm/Config/AsmParsers.def
--- a/device/include/llvm/Config/AsmParsers.def	1970-01-01 00:00:00.000000000 +0000
+++ b/device/include/llvm/Config/AsmParsers.def	2021-04-19 01:45:06.662348822 +0000
@@ -0,0 +1,56 @@
+//===- llvm/Config/AsmParsers.def - LLVM Assembly Parsers -------*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file enumerates all of the assembly-language parsers
+// supported by this build of LLVM. Clients of this file should define
+// the LLVM_ASM_PARSER macro to be a function-like macro with a
+// single parameter (the name of the target whose assembly can be
+// generated); including this file will then enumerate all of the
+// targets with assembly parsers.
+//
+// The set of targets supported by LLVM is generated at configuration
+// time, at which point this header is generated. Do not modify this
+// header directly.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_ASM_PARSER
+#  error Please define the macro LLVM_ASM_PARSER(TargetName)
+#endif
+
+#if defined(__arm__)
+  LLVM_ASM_PARSER(ARM)
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_ASM_PARSER(AMDGPU)
+#endif
+#elif defined(__mips__)
+  LLVM_ASM_PARSER(Mips)
+#elif defined(__i386__) || defined(__x86_64__)
+  LLVM_ASM_PARSER(X86)
+
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_ASM_PARSER(AMDGPU)
+#endif
+
+#if defined(FORCE_BUILD_ARM)
+  LLVM_ASM_PARSER(ARM)
+  LLVM_ASM_PARSER(AArch64)
+#endif
+
+#elif defined(__aarch64__)
+  LLVM_ASM_PARSER(ARM)
+  LLVM_ASM_PARSER(AArch64)
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_ASM_PARSER(AMDGPU)
+#endif
+#else
+#  error Unsupported TARGET_ARCH for LLVM_ASM_PARSER
+#endif
+
+#undef LLVM_ASM_PARSER
diff -Nurp a/device/include/llvm/Config/AsmPrinters.def b/device/include/llvm/Config/AsmPrinters.def
--- a/device/include/llvm/Config/AsmPrinters.def	1970-01-01 00:00:00.000000000 +0000
+++ b/device/include/llvm/Config/AsmPrinters.def	2021-04-19 01:45:06.662348822 +0000
@@ -0,0 +1,56 @@
+//===- llvm/Config/AsmPrinters.def - LLVM Assembly Printers -----*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file enumerates all of the assembly-language printers
+// supported by this build of LLVM. Clients of this file should define
+// the LLVM_ASM_PRINTER macro to be a function-like macro with a
+// single parameter (the name of the target whose assembly can be
+// generated); including this file will then enumerate all of the
+// targets with assembly printers.
+//
+// The set of targets supported by LLVM is generated at configuration
+// time, at which point this header is generated. Do not modify this
+// header directly.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_ASM_PRINTER
+#  error Please define the macro LLVM_ASM_PRINTER(TargetName)
+#endif
+
+#if defined(__arm__)
+  LLVM_ASM_PRINTER(ARM)
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_ASM_PRINTER(AMDGPU)
+#endif
+#elif defined(__mips__)
+  LLVM_ASM_PRINTER(Mips)
+#elif defined(__i386__) || defined(__x86_64__)
+  LLVM_ASM_PRINTER(X86)
+
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_ASM_PRINTER(AMDGPU)
+#endif
+
+#if defined(FORCE_BUILD_ARM)
+  LLVM_ASM_PRINTER(ARM)
+  LLVM_ASM_PRINTER(AArch64)
+#endif
+
+#elif defined(__aarch64__)
+  LLVM_ASM_PRINTER(ARM)
+  LLVM_ASM_PRINTER(AArch64)
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_ASM_PRINTER(AMDGPU)
+#endif
+#else
+#  error Unsupported TARGET_ARCH for LLVM_ASM_PRINTER
+#endif
+
+#undef LLVM_ASM_PRINTER
diff -Nurp a/device/include/llvm/Config/config.h b/device/include/llvm/Config/config.h
--- a/device/include/llvm/Config/config.h	1970-01-01 00:00:00.000000000 +0000
+++ b/device/include/llvm/Config/config.h	2021-04-19 02:18:21.110261074 +0000
@@ -0,0 +1,692 @@
+/* include/llvm/Config/config.h.  Generated from config.h.in by configure.  */
+/* include/llvm/Config/config.h.in.  Generated from autoconf/configure.ac by autoheader.  */
+
+#ifndef CONFIG_H
+#define CONFIG_H
+
+/* Bug report URL. */
+#define BUG_REPORT_URL "http://llvm.org/bugs/"
+
+/* Relative directory for resource files */
+#define CLANG_RESOURCE_DIR ""
+
+/* Directories clang will search for headers */
+#define C_INCLUDE_DIRS ""
+
+/* Default <path> to all compiler invocations for --sysroot=<path>. */
+#define DEFAULT_SYSROOT ""
+
+/* Define if position independent code is enabled */
+#define ENABLE_PIC 1
+
+/* Define if timestamp information (e.g., __DATE___) is allowed */
+/* #undef ENABLE_TIMESTAMPS */
+
+/* Directory where gcc is installed. */
+#define GCC_INSTALL_PREFIX ""
+
+/* Define to 1 if you have the `argz_append' function. */
+/* #undef HAVE_ARGZ_APPEND */
+
+/* Define to 1 if you have the `argz_create_sep' function. */
+/* #undef HAVE_ARGZ_CREATE_SEP */
+
+/* Define to 1 if you have the <argz.h> header file. */
+/* #undef HAVE_ARGZ_H */
+
+/* Define to 1 if you have the `argz_insert' function. */
+/* #undef HAVE_ARGZ_INSERT */
+
+/* Define to 1 if you have the `argz_next' function. */
+/* #undef HAVE_ARGZ_NEXT */
+
+/* Define to 1 if you have the `argz_stringify' function. */
+/* #undef HAVE_ARGZ_STRINGIFY */
+
+/* Define to 1 if you have the <assert.h> header file. */
+#define HAVE_ASSERT_H 1
+
+/* Define to 1 if you have the `backtrace' function. */
+#if defined(HAVE_BACKTRACE) && HAVE_BACKTRACE == 0
+/* Defined by AndroidConfig.h as 0 */
+#undef HAVE_BACKTRACE
+#endif
+
+/* Define to 1 if you have the `bcopy' function. */
+/* #undef HAVE_BCOPY */
+
+/* Define to 1 if you have the `ceilf' function. */
+#define HAVE_CEILF 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_CIRCO */
+
+/* Define to 1 if you have the `closedir' function. */
+#define HAVE_CLOSEDIR 1
+
+/* Define to 1 if you have the <CrashReporterClient.h> header file. */
+/* #undef HAVE_CRASHREPORTERCLIENT_H */
+
+/* Define if __crashreporter_info__ exists. */
+/* #undef HAVE_CRASHREPORTER_INFO */
+
+/* Define to 1 if you have the <ctype.h> header file. */
+#define HAVE_CTYPE_H 1
+
+/* Define to 1 if you have the <cxxabi.h> header file. */
+#define HAVE_CXXABI_H 0
+
+/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you
+   don't. */
+#define HAVE_DECL_STRERROR_S 0
+
+/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
+   */
+#define HAVE_DIRENT_H 1
+
+/* Define if you have the GNU dld library. */
+/* #undef HAVE_DLD */
+
+/* Define to 1 if you have the <dld.h> header file. */
+/* #undef HAVE_DLD_H */
+
+/* Define to 1 if you have the `dlerror' function. */
+#define HAVE_DLERROR 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#define HAVE_DLFCN_H 1
+
+/* Define if dlopen() is available on this platform. */
+#define HAVE_DLOPEN 1
+
+/* Define to 1 if you have the <dl.h> header file. */
+/* #undef HAVE_DL_H */
+
+/* Define if the dot program is available */
+/* #undef HAVE_DOT */
+
+/* Define if the dotty program is available */
+/* #undef HAVE_DOTTY */
+
+/* Define if you have the _dyld_func_lookup function. */
+/* #undef HAVE_DYLD */
+
+/* Define to 1 if you have the <errno.h> header file. */
+#define HAVE_ERRNO_H 1
+
+/* Define to 1 if the system has the type `error_t'. */
+#define HAVE_ERROR_T 1
+
+/* Define to 1 if you have the <execinfo.h> header file. */
+#define HAVE_EXECINFO_H 0
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#define HAVE_FCNTL_H 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_FDP */
+
+/* Define to 1 if you have the <fenv.h> header file. */
+#define HAVE_FENV_H 1
+
+/* Define if libffi is available on this platform. */
+/* #undef HAVE_FFI_CALL */
+
+/* Define to 1 if you have the <ffi/ffi.h> header file. */
+/* #undef HAVE_FFI_FFI_H */
+
+/* Define to 1 if you have the <ffi.h> header file. */
+/* #undef HAVE_FFI_H */
+
+/* Set to 1 if the finite function is found in <ieeefp.h> */
+/* #undef HAVE_FINITE_IN_IEEEFP_H */
+
+/* Define to 1 if you have the `floorf' function. */
+#define HAVE_FLOORF 1
+
+/* Define to 1 if you have the `fmodf' function. */
+#define HAVE_FMODF 1
+
+/* Define to 1 if you have the `futimens' function. */
+#define HAVE_FUTIMENS 1
+
+/* Define to 1 if you have the `getcwd' function. */
+#define HAVE_GETCWD 1
+
+/* Define to 1 if you have the `getpagesize' function. */
+#define HAVE_GETPAGESIZE 1
+
+/* Define to 1 if you have the `getrlimit' function. */
+#define HAVE_GETRLIMIT 1
+
+/* Define to 1 if you have the `getrusage' function. */
+#define HAVE_GETRUSAGE 1
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#define HAVE_GETTIMEOFDAY 1
+
+/* Define if the Graphviz program is available */
+/* #undef HAVE_GRAPHVIZ */
+
+/* Define if the gv program is available */
+/* #undef HAVE_GV */
+
+/* Define to 1 if you have the `index' function. */
+/* #undef HAVE_INDEX */
+
+/* Define to 1 if the system has the type `int64_t'. */
+#define HAVE_INT64_T 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the `isatty' function. */
+#define HAVE_ISATTY 1
+
+/* Set to 1 if the isinf function is found in <cmath> */
+#define HAVE_ISINF_IN_CMATH 1
+
+/* Set to 1 if the isinf function is found in <math.h> */
+#define HAVE_ISINF_IN_MATH_H 1
+
+/* Set to 1 if the isnan function is found in <cmath> */
+#define HAVE_ISNAN_IN_CMATH 1
+
+/* Set to 1 if the isnan function is found in <math.h> */
+#define HAVE_ISNAN_IN_MATH_H 1
+
+/* Define if you have the libdl library or equivalent. */
+#define HAVE_LIBDL 1
+
+/* Define to 1 if you have the `imagehlp' library (-limagehlp). */
+/* #undef HAVE_LIBIMAGEHLP */
+
+/* Define to 1 if you have the `m' library (-lm). */
+#define HAVE_LIBM 1
+
+/* Define to 1 if you have the `psapi' library (-lpsapi). */
+/* #undef HAVE_LIBPSAPI */
+
+/* Define to 1 if you have the `pthread' library (-lpthread). */
+#define HAVE_LIBPTHREAD 1
+
+/* Define to 1 if you have the `udis86' library (-ludis86). */
+/* #undef HAVE_LIBUDIS86 */
+
+/* Define to 1 if you have the <limits.h> header file. */
+#define HAVE_LIMITS_H 1
+
+/* Define if you can use -Wl,-export-dynamic. */
+#define HAVE_LINK_EXPORT_DYNAMIC 1
+
+/* Define to 1 if you have the <link.h> header file. */
+#define HAVE_LINK_H 1
+
+/* Define if you can use -Wl,-R. to pass -R. to the linker, in order to add
+   the current directory to the dynamic linker search path. */
+#define HAVE_LINK_R 1
+
+/* Define to 1 if you have the `longjmp' function. */
+#define HAVE_LONGJMP 1
+
+/* Define to 1 if you have the <mach/mach.h> header file. */
+/* #undef HAVE_MACH_MACH_H */
+
+/* Define to 1 if you have the <mach-o/dyld.h> header file. */
+/* #undef HAVE_MACH_O_DYLD_H */
+
+/* Define if mallinfo() is available on this platform. */
+#define HAVE_MALLINFO 1
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#define HAVE_MALLOC_H 1
+
+/* Define to 1 if you have the <malloc/malloc.h> header file. */
+/* #undef HAVE_MALLOC_MALLOC_H */
+
+/* Define to 1 if you have the `malloc_zone_statistics' function. */
+/* #undef HAVE_MALLOC_ZONE_STATISTICS */
+
+/* Define to 1 if you have the `memcpy' function. */
+#define HAVE_MEMCPY 1
+
+/* Define to 1 if you have the `memmove' function. */
+#define HAVE_MEMMOVE 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `mkdtemp' function. */
+#define HAVE_MKDTEMP 0
+
+/* Define to 1 if you have the `mkstemp' function. */
+#define HAVE_MKSTEMP 1
+
+/* Define to 1 if you have the `mktemp' function. */
+#define HAVE_MKTEMP 1
+
+/* Define to 1 if you have a working `mmap' system call. */
+#define HAVE_MMAP 1
+
+/* Define if mmap() uses MAP_ANONYMOUS to map anonymous pages, or undefine if
+   it uses MAP_ANON */
+#define HAVE_MMAP_ANONYMOUS 1
+
+/* Define if mmap() can map files into memory */
+#define HAVE_MMAP_FILE
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+/* #undef HAVE_NDIR_H */
+
+/* Define to 1 if you have the `nearbyintf' function. */
+#define HAVE_NEARBYINTF 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_NEATO */
+
+/* Define to 1 if you have the `opendir' function. */
+#define HAVE_OPENDIR 1
+
+/* Define to 1 if you have the `posix_spawn' function. */
+/* #undef HAVE_POSIX_SPAWN */
+
+/* Define to 1 if you have the `powf' function. */
+#define HAVE_POWF 1
+
+/* Define to 1 if you have the `pread' function. */
+#define HAVE_PREAD 1
+
+/* Define if libtool can extract symbol lists from object files. */
+#define HAVE_PRELOADED_SYMBOLS 1
+
+/* Define to have the %a format string */
+#define HAVE_PRINTF_A 1
+
+/* Have pthread_getspecific */
+#define HAVE_PTHREAD_GETSPECIFIC 1
+
+/* Define to 1 if you have the <pthread.h> header file. */
+#define HAVE_PTHREAD_H 1
+
+/* Have pthread_mutex_lock */
+#define HAVE_PTHREAD_MUTEX_LOCK 1
+
+/* Have pthread_rwlock_init */
+#define HAVE_PTHREAD_RWLOCK_INIT 1
+
+/* Define to 1 if srand48/lrand48/drand48 exist in <stdlib.h> */
+#define HAVE_RAND48 1
+
+/* Define to 1 if you have the `readdir' function. */
+#define HAVE_READDIR 1
+
+/* Define to 1 if you have the `realpath' function. */
+#define HAVE_REALPATH 1
+
+/* Define to 1 if you have the `rindex' function. */
+/* #undef HAVE_RINDEX */
+
+/* Define to 1 if you have the `rintf' function. */
+#define HAVE_RINTF 1
+
+/* Define to 1 if you have the `round' function. */
+#define HAVE_ROUND 1
+
+/* Define to 1 if you have the `roundf' function. */
+#define HAVE_ROUNDF 1
+
+/* Define to 1 if you have the `sbrk' function. */
+#define HAVE_SBRK 1
+
+/* Define to 1 if you have the `setenv' function. */
+#define HAVE_SETENV 1
+
+/* Define to 1 if you have the `setjmp' function. */
+#define HAVE_SETJMP 1
+
+/* Define to 1 if you have the <setjmp.h> header file. */
+#define HAVE_SETJMP_H 1
+
+/* Define to 1 if you have the `setrlimit' function. */
+#define HAVE_SETRLIMIT 1
+
+/* Define if you have the shl_load function. */
+/* #undef HAVE_SHL_LOAD */
+
+/* Define to 1 if you have the `siglongjmp' function. */
+#define HAVE_SIGLONGJMP 1
+
+/* Define to 1 if you have the <signal.h> header file. */
+#define HAVE_SIGNAL_H 1
+
+/* Define to 1 if you have the `sigsetjmp' function. */
+/* #undef HAVE_SIGSETJMP */
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdio.h> header file. */
+#define HAVE_STDIO_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Set to 1 if the std::isinf function is found in <cmath> */
+/* #undef HAVE_STD_ISINF_IN_CMATH */
+
+/* Set to 1 if the std::isnan function is found in <cmath> */
+#define HAVE_STD_ISNAN_IN_CMATH 1
+
+/* Define to 1 if you have the `strchr' function. */
+#define HAVE_STRCHR 1
+
+/* Define to 1 if you have the `strcmp' function. */
+#define HAVE_STRCMP 1
+
+/* Define to 1 if you have the `strdup' function. */
+#define HAVE_STRDUP 1
+
+/* Define to 1 if you have the `strerror' function. */
+#define HAVE_STRERROR 1
+
+/* Define to 1 if you have the `strerror_r' function. */
+#ifndef USE_MINGW
+#define HAVE_STRERROR_R 1
+#endif
+
+/* Define to 1 if you have the <strings.h> header file. */
+#define HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if you have the `strrchr' function. */
+#define HAVE_STRRCHR 1
+
+/* Define to 1 if you have the `strtof' function. */
+#define HAVE_STRTOF 1
+
+/* Define to 1 if you have the `strtoll' function. */
+#define HAVE_STRTOLL 1
+
+/* Define to 1 if you have the `strtoq' function. */
+#define HAVE_STRTOQ 1
+
+/* Define to 1 if you have the `sysconf' function. */
+#define HAVE_SYSCONF 1
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_DIR_H */
+
+/* Define to 1 if you have the <sys/dl.h> header file. */
+/* #undef HAVE_SYS_DL_H */
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#define HAVE_SYS_IOCTL_H 1
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#define HAVE_SYS_MMAN_H 1
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_NDIR_H */
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#define HAVE_SYS_PARAM_H 1
+
+/* Define to 1 if you have the <sys/resource.h> header file. */
+#define HAVE_SYS_RESOURCE_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#define HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <sys/uio.h> header file. */
+#define HAVE_SYS_UIO_H 1
+
+/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */
+#define HAVE_SYS_WAIT_H 1
+
+/* Define to 1 if you have the <termios.h> header file. */
+#define HAVE_TERMIOS_H 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_TWOPI */
+
+/* Define to 1 if the system has the type `uint64_t'. */
+#define HAVE_UINT64_T 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the <utime.h> header file. */
+#define HAVE_UTIME_H 1
+
+/* Define to 1 if the system has the type `u_int64_t'. */
+/* #undef HAVE_U_INT64_T */
+
+/* Define to 1 if you have the <valgrind/valgrind.h> header file. */
+/* #undef HAVE_VALGRIND_VALGRIND_H */
+
+/* Define to 1 if you have the <windows.h> header file. */
+/* #undef HAVE_WINDOWS_H */
+
+/* Define to 1 if you have the `writev' function. */
+#define HAVE_WRITEV 1
+
+/* Define if the xdot.py program is available */
+/* #undef HAVE_XDOT_PY */
+
+/* Have host's _alloca */
+/* #undef HAVE__ALLOCA */
+
+/* Have host's __alloca */
+/* #undef HAVE___ALLOCA */
+
+/* Have host's __ashldi3 */
+/* #undef HAVE___ASHLDI3 */
+
+/* Have host's __ashrdi3 */
+/* #undef HAVE___ASHRDI3 */
+
+/* Have host's __chkstk */
+/* #undef HAVE___CHKSTK */
+
+/* Have host's __cmpdi2 */
+/* #undef HAVE___CMPDI2 */
+
+/* Have host's __divdi3 */
+/* #undef HAVE___DIVDI3 */
+
+/* Define to 1 if you have the `__dso_handle' function. */
+#define HAVE___DSO_HANDLE 1
+
+/* Have host's __fixdfdi */
+/* #undef HAVE___FIXDFDI */
+
+/* Have host's __fixsfdi */
+/* #undef HAVE___FIXSFDI */
+
+/* Have host's __floatdidf */
+/* #undef HAVE___FLOATDIDF */
+
+/* Have host's __lshrdi3 */
+/* #undef HAVE___LSHRDI3 */
+
+/* Have host's __main */
+/* #undef HAVE___MAIN */
+
+/* Have host's __moddi3 */
+/* #undef HAVE___MODDI3 */
+
+/* Have host's __udivdi3 */
+/* #undef HAVE___UDIVDI3 */
+
+/* Have host's __umoddi3 */
+/* #undef HAVE___UMODDI3 */
+
+/* Have host's ___chkstk */
+/* #undef HAVE____CHKSTK */
+
+/* Linker version detected at compile time. */
+#define HOST_LINK_VERSION "2.20.1"
+
+/* Installation directory for binary executables */
+#define LLVM_BINDIR "/opt/llvm-android/bin"
+
+/* Time at which LLVM was configured */
+#define LLVM_CONFIGTIME "Tue May  8 14:22:45 CST 2012"
+
+/* Installation directory for data files */
+#define LLVM_DATADIR "/opt/llvm-android/share/llvm"
+
+/* Target triple LLVM will generate code for by default */
+#define LLVM_DEFAULT_TARGET_TRIPLE "i386-unknown-linux"
+
+/* Installation directory for documentation */
+#define LLVM_DOCSDIR "/opt/llvm-android/share/doc/llvm"
+
+/* Define if threads enabled */
+#define LLVM_ENABLE_THREADS 1
+
+/* Installation directory for config files */
+#define LLVM_ETCDIR "/opt/llvm-android/etc/llvm"
+
+/* Has gcc/MSVC atomic intrinsics */
+#define LLVM_HAS_ATOMICS 1
+
+/* Installation directory for include files */
+#define LLVM_INCLUDEDIR "/opt/llvm-android/include"
+
+/* Installation directory for .info files */
+#define LLVM_INFODIR "/opt/llvm-android/info"
+
+/* Installation directory for libraries */
+#define LLVM_LIBDIR "/opt/llvm-android/lib"
+
+/* Installation directory for man pages */
+#define LLVM_MANDIR "/opt/llvm-android/man"
+
+/* Define to path to circo program if found or 'echo circo' otherwise */
+/* #undef LLVM_PATH_CIRCO */
+
+/* Define to path to dot program if found or 'echo dot' otherwise */
+/* #undef LLVM_PATH_DOT */
+
+/* Define to path to dotty program if found or 'echo dotty' otherwise */
+/* #undef LLVM_PATH_DOTTY */
+
+/* Define to path to fdp program if found or 'echo fdp' otherwise */
+/* #undef LLVM_PATH_FDP */
+
+/* Define to path to Graphviz program if found or 'echo Graphviz' otherwise */
+/* #undef LLVM_PATH_GRAPHVIZ */
+
+/* Define to path to gv program if found or 'echo gv' otherwise */
+/* #undef LLVM_PATH_GV */
+
+/* Define to path to neato program if found or 'echo neato' otherwise */
+/* #undef LLVM_PATH_NEATO */
+
+/* Define to path to twopi program if found or 'echo twopi' otherwise */
+/* #undef LLVM_PATH_TWOPI */
+
+/* Define to path to xdot.py program if found or 'echo xdot.py' otherwise */
+/* #undef LLVM_PATH_XDOT_PY */
+
+/* Installation prefix directory */
+#define LLVM_PREFIX "/opt/llvm-android"
+
+/* Define if we have the Intel JIT API runtime support library */
+#define LLVM_USE_INTEL_JITEVENTS 0
+
+/* Define if we have the oprofile JIT-support library */
+#define LLVM_USE_OPROFILE 0
+
+/* Major version of the LLVM API */
+#define LLVM_VERSION_MAJOR 9
+
+/* Minor version of the LLVM API */
+#define LLVM_VERSION_MINOR 0
+
+/* Patch version of the LLVM API */
+#define LLVM_VERSION_PATCH 0
+
+/* Define if the OS needs help to load dependent libraries for dlopen(). */
+/* #undef LTDL_DLOPEN_DEPLIBS */
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#define LTDL_OBJDIR ".libs/"
+
+/* Define to the name of the environment variable that determines the dynamic
+   library search path. */
+#define LTDL_SHLIBPATH_VAR "LD_LIBRARY_PATH"
+
+/* Define to the extension used for shared libraries, say, ".so". */
+#define LTDL_SHLIB_EXT ".so"
+
+/* Define to the system default library search path. */
+#define LTDL_SYSSEARCHPATH "/lib:/usr/lib:/usr/local/lib:/lib:/usr/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib32:/usr/lib32:/usr/local/lib32:/usr/x86_64-pc-linux-gnu/lib:/usr/lib/gcc/x86_64-pc-linux-gnu/4.3.4:/usr/lib/gcc/x86_64-pc-linux-gnu/4.3.4/32:/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.2:/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.2/32"
+
+/* Define if /dev/zero should be used when mapping RWX memory, or undefine if
+   its not necessary */
+/* #undef NEED_DEV_ZERO_FOR_MMAP */
+
+/* Define if dlsym() requires a leading underscore in symbol names. */
+/* #undef NEED_USCORE */
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "http://llvm.org/bugs/"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "LLVM"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "LLVM 9.0.0"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "llvm"
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "9.0.0"
+
+/* Define as the return type of signal handlers (`int' or `void'). */
+#define RETSIGTYPE void
+
+/* Define to 1 if the `S_IS*' macros in <sys/stat.h> do not work properly. */
+/* #undef STAT_MACROS_BROKEN */
+
+/* Define to 1 if you have the ANSI C header files. */
+#define STDC_HEADERS 1
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#define TIME_WITH_SYS_TIME 1
+
+/* Define to 1 if your <sys/time.h> declares `struct tm'. */
+/* #undef TM_IN_SYS_TIME */
+
+/* Define if use udis86 library */
+#define USE_UDIS86 0
+
+/* Define to empty if `const' does not conform to ANSI C. */
+/* #undef const */
+
+/* Define to a type to use for `error_t' if it is not otherwise available. */
+/* #undef error_t */
+
+/* Define to `int' if <sys/types.h> does not define. */
+/* #undef pid_t */
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+/* #undef size_t */
+
+#include "llvm/Config/llvm-platform-config.h"
+
+#endif
diff -Nurp a/device/include/llvm/Config/Disassemblers.def b/device/include/llvm/Config/Disassemblers.def
--- a/device/include/llvm/Config/Disassemblers.def	1970-01-01 00:00:00.000000000 +0000
+++ b/device/include/llvm/Config/Disassemblers.def	2021-04-19 01:45:06.662348822 +0000
@@ -0,0 +1,46 @@
+//===- llvm/Config/Disassemblers.def - LLVM Assembly Parsers ----*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file enumerates all of the assembly-language parsers
+// supported by this build of LLVM. Clients of this file should define
+// the LLVM_ASM_PARSER macro to be a function-like macro with a
+// single parameter (the name of the target whose assembly can be
+// generated); including this file will then enumerate all of the
+// targets with assembly parsers.
+//
+// The set of targets supported by LLVM is generated at configuration
+// time, at which point this header is generated. Do not modify this
+// header directly.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_DISASSEMBLER
+#  error Please define the macro LLVM_DISASSEMBLER(TargetName)
+#endif
+
+#if defined(__arm__)
+  LLVM_DISASSEMBLER(ARM)
+#elif defined(__mips__)
+  LLVM_DISASSEMBLER(Mips)
+#elif defined(__i386__) || defined(__x86_64__)
+  LLVM_DISASSEMBLER(X86)
+
+#if defined(FORCE_BUILD_ARM)
+  LLVM_DISASSEMBLER(ARM)
+  LLVM_DISASSEMBLER(AArch64)
+#endif
+
+#elif defined(__aarch64__)
+  LLVM_DISASSEMBLER(ARM)
+  LLVM_DISASSEMBLER(AArch64)
+#else
+#  error Unsupported TARGET_ARCH for LLVM_DISASSEMBLER
+#endif
+
+#undef LLVM_DISASSEMBLER
diff -Nurp a/device/include/llvm/Config/llvm-config.h b/device/include/llvm/Config/llvm-config.h
--- a/device/include/llvm/Config/llvm-config.h	1970-01-01 00:00:00.000000000 +0000
+++ b/device/include/llvm/Config/llvm-config.h	2021-04-19 02:17:39.434262907 +0000
@@ -0,0 +1,100 @@
+/* include/llvm/Config/llvm-config.h.  Generated from llvm-config.h.in by configure.  */
+/*===-- llvm/config/llvm-config.h - llvm configure variable -------*- C -*-===*/
+/*                                                                            */
+/*                     The LLVM Compiler Infrastructure                       */
+/*                                                                            */
+/* This file is distributed under the University of Illinois Open Source      */
+/* License. See LICENSE.TXT for details.                                      */
+/*                                                                            */
+/*===----------------------------------------------------------------------===*/
+
+/* This file enumerates all of the llvm variables from configure so that
+   they can be in exported headers and won't override package specific
+   directives.  This is a C file so we can include it in the llvm-c headers.  */
+
+/* To avoid multiple inclusions of these variables when we include the exported
+   headers and config.h, conditionally include these.  */
+/* TODO: This is a bit of a hack.  */
+#ifndef CONFIG_H
+
+/* Installation directory for binary executables */
+#define LLVM_BINDIR "/opt/llvm-android/bin"
+
+/* Time at which LLVM was configured */
+#define LLVM_CONFIGTIME "Tue May  8 14:22:45 CST 2012"
+
+/* Installation directory for data files */
+#define LLVM_DATADIR "/opt/llvm-android/share/llvm"
+
+/* Target triple LLVM will generate code for by default */
+#define LLVM_DEFAULT_TARGET_TRIPLE "i386-unknown-linux"
+
+/* Installation directory for documentation */
+#define LLVM_DOCSDIR "/opt/llvm-android/share/doc/llvm"
+
+/* Define if threads enabled */
+#define LLVM_ENABLE_THREADS 1
+
+/* Installation directory for config files */
+#define LLVM_ETCDIR "/opt/llvm-android/etc/llvm"
+
+/* Has gcc/MSVC atomic intrinsics */
+#define LLVM_HAS_ATOMICS 1
+
+/* Installation directory for include files */
+#define LLVM_INCLUDEDIR "/opt/llvm-android/include"
+
+/* Installation directory for .info files */
+#define LLVM_INFODIR "/opt/llvm-android/info"
+
+/* Installation directory for libraries */
+#define LLVM_LIBDIR "/opt/llvm-android/lib"
+
+/* Installation directory for man pages */
+#define LLVM_MANDIR "/opt/llvm-android/man"
+
+/* Define to path to circo program if found or 'echo circo' otherwise */
+/* #undef LLVM_PATH_CIRCO */
+
+/* Define to path to dot program if found or 'echo dot' otherwise */
+/* #undef LLVM_PATH_DOT */
+
+/* Define to path to dotty program if found or 'echo dotty' otherwise */
+/* #undef LLVM_PATH_DOTTY */
+
+/* Define to path to fdp program if found or 'echo fdp' otherwise */
+/* #undef LLVM_PATH_FDP */
+
+/* Define to path to Graphviz program if found or 'echo Graphviz' otherwise */
+/* #undef LLVM_PATH_GRAPHVIZ */
+
+/* Define to path to gv program if found or 'echo gv' otherwise */
+/* #undef LLVM_PATH_GV */
+
+/* Define to path to neato program if found or 'echo neato' otherwise */
+/* #undef LLVM_PATH_NEATO */
+
+/* Define to path to twopi program if found or 'echo twopi' otherwise */
+/* #undef LLVM_PATH_TWOPI */
+
+/* Define to path to xdot.py program if found or 'echo xdot.py' otherwise */
+/* #undef LLVM_PATH_XDOT_PY */
+
+/* Installation prefix directory */
+#define LLVM_PREFIX "/opt/llvm-android"
+
+/* Major version of the LLVM API */
+#define LLVM_VERSION_MAJOR 9
+
+/* Minor version of the LLVM API */
+#define LLVM_VERSION_MINOR 0
+
+/* Patch version of the LLVM API */
+#define LLVM_VERSION_PATCH 0
+
+/* LLVM version string */
+#define LLVM_VERSION_STRING "9.0.0"
+
+#include "llvm/Config/llvm-platform-config.h"
+
+#endif
diff -Nurp a/device/include/llvm/Config/Targets.def b/device/include/llvm/Config/Targets.def
--- a/device/include/llvm/Config/Targets.def	1970-01-01 00:00:00.000000000 +0000
+++ b/device/include/llvm/Config/Targets.def	2021-04-19 01:45:06.662348822 +0000
@@ -0,0 +1,55 @@
+/*===- llvm/Config/Targets.def - LLVM Target Architectures ------*- C++ -*-===*\
+|*                                                                            *|
+|*                     The LLVM Compiler Infrastructure                       *|
+|*                                                                            *|
+|* This file is distributed under the University of Illinois Open Source      *|
+|* License. See LICENSE.TXT for details.                                      *|
+|*                                                                            *|
+|*===----------------------------------------------------------------------===*|
+|*                                                                            *|
+|* This file enumerates all of the target architectures supported by          *|
+|* this build of LLVM. Clients of this file should define the                 *|
+|* LLVM_TARGET macro to be a function-like macro with a single                *|
+|* parameter (the name of the target); including this file will then          *|
+|* enumerate all of the targets.                                              *|
+|*                                                                            *|
+|* The set of targets supported by LLVM is generated at configuration         *|
+|* time, at which point this header is generated. Do not modify this          *|
+|* header directly.                                                           *|
+|*                                                                            *|
+\*===----------------------------------------------------------------------===*/
+
+#ifndef LLVM_TARGET
+#  error Please define the macro LLVM_TARGET(TargetName)
+#endif
+
+#if defined(__arm__)
+  LLVM_TARGET(ARM)
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_TARGET(AMDGPU)
+#endif
+#elif defined(__mips__)
+  LLVM_TARGET(Mips)
+#elif defined(__i386__) || defined(__x86_64__)
+  LLVM_TARGET(X86)
+
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_TARGET(AMDGPU)
+#endif
+
+#if defined(FORCE_BUILD_ARM)
+  LLVM_TARGET(ARM)
+  LLVM_TARGET(AArch64)
+#endif
+
+#elif defined(__aarch64__)
+  LLVM_TARGET(ARM)
+  LLVM_TARGET(AArch64)
+#if defined(FORCE_BUILD_AMDGPU)
+  LLVM_TARGET(AMDGPU)
+#endif
+#else
+#  error Unsupported TARGET_ARCH for LLVM_TARGET
+#endif
+
+#undef LLVM_TARGET
diff -Nurp a/host/include/llvm/Config/abi-breaking.h b/host/include/llvm/Config/abi-breaking.h
--- a/host/include/llvm/Config/abi-breaking.h	1970-01-01 00:00:00.000000000 +0000
+++ b/host/include/llvm/Config/abi-breaking.h	2021-04-19 01:45:06.662348822 +0000
@@ -0,0 +1,50 @@
+/*===------- llvm/Config/abi-breaking.h - llvm configuration -------*- C -*-===*/
+/*                                                                            */
+/*                     The LLVM Compiler Infrastructure                       */
+/*                                                                            */
+/* This file is distributed under the University of Illinois Open Source      */
+/* License. See LICENSE.TXT for details.                                      */
+/*                                                                            */
+/*===----------------------------------------------------------------------===*/
+
+/* This file controls the C++ ABI break introduced in LLVM public header. */
+
+#ifndef LLVM_ABI_BREAKING_CHECKS_H
+#define LLVM_ABI_BREAKING_CHECKS_H
+
+/* Define to enable checks that alter the LLVM C++ ABI */
+#define LLVM_ENABLE_ABI_BREAKING_CHECKS 1
+
+/* Define to enable reverse iteration of unordered llvm containers */
+#define LLVM_ENABLE_REVERSE_ITERATION 0
+
+/* Allow selectively disabling link-time mismatch checking so that header-only
+   ADT content from LLVM can be used without linking libSupport. */
+#if !LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING
+
+// ABI_BREAKING_CHECKS protection: provides link-time failure when clients build
+// mismatch with LLVM
+#if defined(_MSC_VER)
+// Use pragma with MSVC
+#define LLVM_XSTR(s) LLVM_STR(s)
+#define LLVM_STR(s) #s
+#pragma detect_mismatch("LLVM_ENABLE_ABI_BREAKING_CHECKS", LLVM_XSTR(LLVM_ENABLE_ABI_BREAKING_CHECKS))
+#undef LLVM_XSTR
+#undef LLVM_STR
+#elif defined(_WIN32) || defined(__CYGWIN__) // Win32 w/o #pragma detect_mismatch
+// FIXME: Implement checks without weak.
+#elif defined(__cplusplus)
+namespace llvm {
+#if LLVM_ENABLE_ABI_BREAKING_CHECKS
+extern int EnableABIBreakingChecks;
+__attribute__((weak, visibility ("hidden"))) int *VerifyEnableABIBreakingChecks = &EnableABIBreakingChecks;
+#else
+extern int DisableABIBreakingChecks;
+__attribute__((weak, visibility ("hidden"))) int *VerifyDisableABIBreakingChecks = &DisableABIBreakingChecks;
+#endif
+}
+#endif // _MSC_VER
+
+#endif // LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING
+
+#endif
diff -Nurp a/host/include/llvm/Config/AsmParsers.def b/host/include/llvm/Config/AsmParsers.def
--- a/host/include/llvm/Config/AsmParsers.def	1970-01-01 00:00:00.000000000 +0000
+++ b/host/include/llvm/Config/AsmParsers.def	2021-04-19 01:45:06.666348822 +0000
@@ -0,0 +1,32 @@
+//===- llvm/Config/AsmParsers.def - LLVM Assembly Parsers -------*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file enumerates all of the assembly-language parsers
+// supported by this build of LLVM. Clients of this file should define
+// the LLVM_ASM_PARSER macro to be a function-like macro with a
+// single parameter (the name of the target whose assembly can be
+// generated); including this file will then enumerate all of the
+// targets with assembly parsers.
+//
+// The set of targets supported by LLVM is generated at configuration
+// time, at which point this header is generated. Do not modify this
+// header directly.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_ASM_PARSER
+#  error Please define the macro LLVM_ASM_PARSER(TargetName)
+#endif
+
+LLVM_ASM_PARSER(ARM)
+LLVM_ASM_PARSER(Mips)
+LLVM_ASM_PARSER(X86)
+LLVM_ASM_PARSER(AArch64)
+
+#undef LLVM_ASM_PARSER
diff -Nurp a/host/include/llvm/Config/AsmPrinters.def b/host/include/llvm/Config/AsmPrinters.def
--- a/host/include/llvm/Config/AsmPrinters.def	1970-01-01 00:00:00.000000000 +0000
+++ b/host/include/llvm/Config/AsmPrinters.def	2021-04-19 01:45:06.666348822 +0000
@@ -0,0 +1,32 @@
+//===- llvm/Config/AsmPrinters.def - LLVM Assembly Printers -----*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file enumerates all of the assembly-language printers
+// supported by this build of LLVM. Clients of this file should define
+// the LLVM_ASM_PRINTER macro to be a function-like macro with a
+// single parameter (the name of the target whose assembly can be
+// generated); including this file will then enumerate all of the
+// targets with assembly printers.
+//
+// The set of targets supported by LLVM is generated at configuration
+// time, at which point this header is generated. Do not modify this
+// header directly.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_ASM_PRINTER
+#  error Please define the macro LLVM_ASM_PRINTER(TargetName)
+#endif
+
+LLVM_ASM_PRINTER(ARM)
+LLVM_ASM_PRINTER(Mips)
+LLVM_ASM_PRINTER(X86)
+LLVM_ASM_PRINTER(AArch64)
+
+#undef LLVM_ASM_PRINTER
diff -Nurp a/host/include/llvm/Config/config.h b/host/include/llvm/Config/config.h
--- a/host/include/llvm/Config/config.h	1970-01-01 00:00:00.000000000 +0000
+++ b/host/include/llvm/Config/config.h	2021-04-19 02:18:19.654261138 +0000
@@ -0,0 +1,763 @@
+/* include/llvm/Config/config.h.  Generated from config.h.in by configure.  */
+/* include/llvm/Config/config.h.in.  Generated from autoconf/configure.ac by autoheader.  */
+
+#ifndef CONFIG_H
+#define CONFIG_H
+
+/* Bug report URL. */
+#define BUG_REPORT_URL "http://llvm.org/bugs/"
+
+/* Relative directory for resource files */
+#define CLANG_RESOURCE_DIR ""
+
+/* Directories clang will search for headers */
+#define C_INCLUDE_DIRS ""
+
+/* Default <path> to all compiler invocations for --sysroot=<path>. */
+#define DEFAULT_SYSROOT ""
+
+/* Define if position independent code is enabled */
+#define ENABLE_PIC 1
+
+/* Define if timestamp information (e.g., __DATE___) is allowed */
+/* #undef ENABLE_TIMESTAMPS */
+
+/* Directory where gcc is installed. */
+#define GCC_INSTALL_PREFIX ""
+
+/* Define to 1 if you have the `argz_append' function. */
+/* #undef HAVE_ARGZ_APPEND */
+
+/* Define to 1 if you have the `argz_create_sep' function. */
+/* #undef HAVE_ARGZ_CREATE_SEP */
+
+/* Define to 1 if you have the <argz.h> header file. */
+/* #undef HAVE_ARGZ_H */
+
+/* Define to 1 if you have the `argz_insert' function. */
+/* #undef HAVE_ARGZ_INSERT */
+
+/* Define to 1 if you have the `argz_next' function. */
+/* #undef HAVE_ARGZ_NEXT */
+
+/* Define to 1 if you have the `argz_stringify' function. */
+/* #undef HAVE_ARGZ_STRINGIFY */
+
+/* Define to 1 if you have the <assert.h> header file. */
+#define HAVE_ASSERT_H 1
+
+/* Define to 1 if you have the `backtrace' function. */
+/* #define HAVE_BACKTRACE 1 */ /* Defined by AndroidConfig.h */
+
+/* Define to 1 if you have the `bcopy' function. */
+/* #undef HAVE_BCOPY */
+
+/* Define to 1 if you have the `ceilf' function. */
+#define HAVE_CEILF 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_CIRCO */
+
+/* Define to 1 if you have the `closedir' function. */
+#define HAVE_CLOSEDIR 1
+
+/* Define to 1 if you have the <CrashReporterClient.h> header file. */
+/* #undef HAVE_CRASHREPORTERCLIENT_H */
+
+/* Define if __crashreporter_info__ exists. */
+#define HAVE_CRASHREPORTER_INFO 0
+
+/* Define to 1 if you have the <ctype.h> header file. */
+#define HAVE_CTYPE_H 1
+
+/* Define to 1 if you have the <cxxabi.h> header file. */
+#define HAVE_CXXABI_H 0
+
+/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you
+   don't. */
+#define HAVE_DECL_STRERROR_S 0
+
+/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
+   */
+#define HAVE_DIRENT_H 1
+
+/* Define if you have the GNU dld library. */
+/* #undef HAVE_DLD */
+
+/* Define to 1 if you have the <dld.h> header file. */
+/* #undef HAVE_DLD_H */
+
+/* Define to 1 if you have the `dlerror' function. */
+#define HAVE_DLERROR 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#define HAVE_DLFCN_H 1
+
+/* Define if dlopen() is available on this platform. */
+#define HAVE_DLOPEN 1
+
+/* Define to 1 if you have the <dl.h> header file. */
+/* #undef HAVE_DL_H */
+
+/* Define if the dot program is available */
+/* #undef HAVE_DOT */
+
+/* Define if the dotty program is available */
+/* #undef HAVE_DOTTY */
+
+/* Define if you have the _dyld_func_lookup function. */
+/* #undef HAVE_DYLD */
+
+/* Define to 1 if you have the <errno.h> header file. */
+#define HAVE_ERRNO_H 1
+
+/* Define to 1 if the system has the type `error_t'. */
+#define HAVE_ERROR_T 1
+
+/* Define to 1 if you have the <execinfo.h> header file. */
+#ifndef __BIONIC__
+#define HAVE_EXECINFO_H 1
+#endif
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#define HAVE_FCNTL_H 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_FDP */
+
+/* Define to 1 if you have the <fenv.h> header file. */
+#define HAVE_FENV_H 1
+
+/* Define if libffi is available on this platform. */
+/* #undef HAVE_FFI_CALL */
+
+/* Define to 1 if you have the <ffi/ffi.h> header file. */
+/* #undef HAVE_FFI_FFI_H */
+
+/* Define to 1 if you have the <ffi.h> header file. */
+/* #undef HAVE_FFI_H */
+
+/* Set to 1 if the finite function is found in <ieeefp.h> */
+/* #undef HAVE_FINITE_IN_IEEEFP_H */
+
+/* Define to 1 if you have the `floorf' function. */
+#define HAVE_FLOORF 1
+
+/* Define to 1 if you have the `fmodf' function. */
+#define HAVE_FMODF 1
+
+#ifdef __APPLE__
+/* Define to 1 if you have the `futimes' function. */
+#define HAVE_FUTIMES 1
+#else
+/* Define to 1 if you have the `futimens' function. */
+#define HAVE_FUTIMENS 1
+#endif  // __APPLE__
+
+/* Define to 1 if you have the `getcwd' function. */
+#define HAVE_GETCWD 1
+
+/* Define to 1 if you have the `getpagesize' function. */
+#define HAVE_GETPAGESIZE 1
+
+/* Define to 1 if you have the `getrlimit' function. */
+#define HAVE_GETRLIMIT 1
+
+/* Define to 1 if you have the `getrusage' function. */
+#define HAVE_GETRUSAGE 1
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#define HAVE_GETTIMEOFDAY 1
+
+/* Define if the Graphviz program is available */
+/* #undef HAVE_GRAPHVIZ */
+
+/* Define if the gv program is available */
+/* #undef HAVE_GV */
+
+/* Define to 1 if you have the `index' function. */
+/* #undef HAVE_INDEX */
+
+/* Define to 1 if the system has the type `int64_t'. */
+#define HAVE_INT64_T 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the `isatty' function. */
+#define HAVE_ISATTY 1
+
+/* Set to 1 if the isinf function is found in <cmath> */
+#define HAVE_ISINF_IN_CMATH 1
+
+/* Set to 1 if the isinf function is found in <math.h> */
+#define HAVE_ISINF_IN_MATH_H 1
+
+/* Set to 1 if the isnan function is found in <cmath> */
+#define HAVE_ISNAN_IN_CMATH 1
+
+/* Set to 1 if the isnan function is found in <math.h> */
+#define HAVE_ISNAN_IN_MATH_H 1
+
+/* Define if you have the libdl library or equivalent. */
+#define HAVE_LIBDL 1
+
+/* Define to 1 if you have the `imagehlp' library (-limagehlp). */
+/* #undef HAVE_LIBIMAGEHLP */
+
+/* Define to 1 if you have the `m' library (-lm). */
+#define HAVE_LIBM 1
+
+/* Define to 1 if you have the `psapi' library (-lpsapi). */
+/* #undef HAVE_LIBPSAPI */
+
+/* Define to 1 if you have the `pthread' library (-lpthread). */
+#define HAVE_LIBPTHREAD 1
+
+/* Define to 1 if you have the `shell32' library (-lshell32). */
+#define HAVE_LIBSHELL32 1
+
+/* Define to 1 if you have the `udis86' library (-ludis86). */
+/* #undef HAVE_LIBUDIS86 */
+
+/* Define to 1 if you have the <limits.h> header file. */
+#define HAVE_LIMITS_H 1
+
+/* Define if you can use -Wl,-export-dynamic. */
+#define HAVE_LINK_EXPORT_DYNAMIC 1
+
+/* Define to 1 if you have the <link.h> header file. */
+#if defined(__APPLE__)
+/* #undef HAVE_LINK_H */
+#else
+#define HAVE_LINK_H 1
+#endif
+
+/* Define if you can use -Wl,-R. to pass -R. to the linker, in order to add
+   the current directory to the dynamic linker search path. */
+#define HAVE_LINK_R 1
+
+/* Define to 1 if you have the `longjmp' function. */
+#define HAVE_LONGJMP 1
+
+/* Define to 1 if you have the <mach/mach.h> header file. */
+/* #undef HAVE_MACH_MACH_H */
+
+/* Define to 1 if you have the <mach-o/dyld.h> header file. */
+/* #undef HAVE_MACH_O_DYLD_H */
+
+/* Define if mallinfo() is available on this platform. */
+#if !defined(__APPLE__)
+#define HAVE_MALLINFO 1
+#else
+/* #undef HAVE_MALLINFO */
+#endif
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#if !defined(__APPLE__)
+#define HAVE_MALLOC_H 1
+#else
+/* #undef HAVE_MALLOC_H */
+#endif
+
+/* Define to 1 if you have the <malloc/malloc.h> header file. */
+/* #undef HAVE_MALLOC_MALLOC_H */
+
+/* Define to 1 if you have the `malloc_zone_statistics' function. */
+/* #undef HAVE_MALLOC_ZONE_STATISTICS */
+
+/* Define to 1 if you have the `memcpy' function. */
+#define HAVE_MEMCPY 1
+
+/* Define to 1 if you have the `memmove' function. */
+#define HAVE_MEMMOVE 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `mkdtemp' function. */
+#define HAVE_MKDTEMP 1
+
+/* Define to 1 if you have the `mkstemp' function. */
+#define HAVE_MKSTEMP 1
+
+/* Define to 1 if you have the `mktemp' function. */
+#define HAVE_MKTEMP 1
+
+/* Define to 1 if you have a working `mmap' system call. */
+#define HAVE_MMAP 1
+
+/* Define if mmap() uses MAP_ANONYMOUS to map anonymous pages, or undefine if
+   it uses MAP_ANON */
+#if !defined(__APPLE__)
+#define HAVE_MMAP_ANONYMOUS
+#else
+/* #undef HAVE_MMAP_ANONYMOUS */
+#endif
+
+/* Define if mmap() can map files into memory */
+#define HAVE_MMAP_FILE
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+/* #undef HAVE_NDIR_H */
+
+/* Define to 1 if you have the `nearbyintf' function. */
+#define HAVE_NEARBYINTF 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_NEATO */
+
+/* Define to 1 if you have the `opendir' function. */
+#define HAVE_OPENDIR 1
+
+/* Define to 1 if you have the `posix_spawn' function. */
+#ifndef __BIONIC__
+#define HAVE_POSIX_SPAWN 1
+#endif
+
+/* Define to 1 if you have the `powf' function. */
+#define HAVE_POWF 1
+
+/* Define to 1 if you have the `pread' function. */
+#if !defined(_WIN32) && !defined(_WIN64)
+#define HAVE_PREAD 1
+#endif
+
+/* Define if libtool can extract symbol lists from object files. */
+#define HAVE_PRELOADED_SYMBOLS 1
+
+/* Define to have the %a format string */
+#define HAVE_PRINTF_A 1
+
+#if !defined(_WIN32) && !defined(_WIN64)
+
+/* Have pthread_getspecific */
+#define HAVE_PTHREAD_GETSPECIFIC 1
+
+/* Define to 1 if you have the <pthread.h> header file. */
+#define HAVE_PTHREAD_H 1
+
+/* Have pthread_mutex_lock */
+#define HAVE_PTHREAD_MUTEX_LOCK 1
+
+/* Have pthread_rwlock_init */
+#define HAVE_PTHREAD_RWLOCK_INIT 1
+
+#endif /* !defined(_WIN32) && !defined(_WIN64) */
+
+/* Define to 1 if srand48/lrand48/drand48 exist in <stdlib.h> */
+#define HAVE_RAND48 1
+
+/* Define to 1 if you have the `readdir' function. */
+#define HAVE_READDIR 1
+
+/* Define to 1 if you have the `realpath' function. */
+#if !defined(_WIN32) && !defined(_WIN64)
+#define HAVE_REALPATH 1
+#else
+// Do not define HAVE_REALPATH
+#endif
+
+/* Define to 1 if you have the `rindex' function. */
+/* #undef HAVE_RINDEX */
+
+/* Define to 1 if you have the `rintf' function. */
+#define HAVE_RINTF 1
+
+/* Define to 1 if you have the `round' function. */
+#define HAVE_ROUND 1
+
+/* Define to 1 if you have the `roundf' function. */
+#define HAVE_ROUNDF 1
+
+/* Define to 1 if you have the `sbrk' function. */
+#define HAVE_SBRK 1
+
+/* Define to 1 if you have the `setenv' function. */
+#define HAVE_SETENV 1
+
+/* Define to 1 if you have the `setjmp' function. */
+#define HAVE_SETJMP 1
+
+/* Define to 1 if you have the <setjmp.h> header file. */
+#define HAVE_SETJMP_H 1
+
+/* Define to 1 if you have the `setrlimit' function. */
+#define HAVE_SETRLIMIT 1
+
+/* Define if you have the shl_load function. */
+/* #undef HAVE_SHL_LOAD */
+
+/* Define to 1 if you have the `siglongjmp' function. */
+#define HAVE_SIGLONGJMP 1
+
+/* Define to 1 if you have the <signal.h> header file. */
+#define HAVE_SIGNAL_H 1
+
+/* Define to 1 if you have the `sigsetjmp' function. */
+/* #undef HAVE_SIGSETJMP */
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdio.h> header file. */
+#define HAVE_STDIO_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Set to 1 if the std::isinf function is found in <cmath> */
+#define HAVE_STD_ISINF_IN_CMATH 1
+
+/* Set to 1 if the std::isnan function is found in <cmath> */
+#define HAVE_STD_ISNAN_IN_CMATH 1
+
+/* Define to 1 if you have the `strchr' function. */
+#define HAVE_STRCHR 1
+
+/* Define to 1 if you have the `strcmp' function. */
+#define HAVE_STRCMP 1
+
+/* Define to 1 if you have the `strdup' function. */
+#define HAVE_STRDUP 1
+
+/* Define to 1 if you have the `strerror' function. */
+#define HAVE_STRERROR 1
+
+/* Define to 1 if you have the `strerror_r' function. */
+#ifndef USE_MINGW
+#define HAVE_STRERROR_R 1
+#endif
+
+/* Define to 1 if you have the <strings.h> header file. */
+#define HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if you have the `strrchr' function. */
+#define HAVE_STRRCHR 1
+
+/* Define to 1 if you have the `strtof' function. */
+#define HAVE_STRTOF 1
+
+/* Define to 1 if you have the `strtoll' function. */
+#define HAVE_STRTOLL 1
+
+/* Define to 1 if you have the `strtoq' function. */
+#define HAVE_STRTOQ 1
+
+/* Define to 1 if you have the `sysconf' function. */
+#define HAVE_SYSCONF 1
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_DIR_H */
+
+/* Define to 1 if you have the <sys/dl.h> header file. */
+/* #undef HAVE_SYS_DL_H */
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#define HAVE_SYS_IOCTL_H 1
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#define HAVE_SYS_MMAN_H 1
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_NDIR_H */
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#define HAVE_SYS_PARAM_H 1
+
+/* Define to 1 if you have the <sys/resource.h> header file. */
+#define HAVE_SYS_RESOURCE_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#define HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <sys/uio.h> header file. */
+#define HAVE_SYS_UIO_H 1
+
+/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */
+#define HAVE_SYS_WAIT_H 1
+
+/* Define if the setupterm() function is supported this platform. */
+#ifndef __BIONIC__
+#define HAVE_TERMINFO 1
+#endif
+
+/* Define to 1 if you have the <termios.h> header file. */
+#define HAVE_TERMIOS_H 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_TWOPI */
+
+/* Define to 1 if the system has the type `uint64_t'. */
+#define HAVE_UINT64_T 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the <utime.h> header file. */
+#define HAVE_UTIME_H 1
+
+/* Define to 1 if the system has the type `u_int64_t'. */
+/* #undef HAVE_U_INT64_T */
+
+/* Define to 1 if you have the <valgrind/valgrind.h> header file. */
+/* #undef HAVE_VALGRIND_VALGRIND_H */
+
+#if defined(_WIN32) || defined(_WIN64)
+/* Define to 1 if you have the <windows.h> header file. */
+#define HAVE_WINDOWS_H 1
+
+/* Define to 1 if you have the `writev' function. */
+/* #undef HAVE_WRITEV */
+
+#else
+/* Define to 1 if you have the <windows.h> header file. */
+/* #undef HAVE_WINDOWS_H */
+
+/* Define to 1 if you have the `writev' function. */
+#define HAVE_WRITEV 1
+#endif
+
+/* Define if the xdot.py program is available */
+/* #undef HAVE_XDOT_PY */
+
+/* Have host's _alloca */
+/* #undef HAVE__ALLOCA */
+
+/* Have host's __alloca */
+/* #undef HAVE___ALLOCA */
+
+/* Have host's __ashldi3 */
+/* #undef HAVE___ASHLDI3 */
+
+/* Have host's __ashrdi3 */
+/* #undef HAVE___ASHRDI3 */
+
+/* Have host's __chkstk */
+/* #undef HAVE___CHKSTK */
+
+/* Have host's __cmpdi2 */
+/* #undef HAVE___CMPDI2 */
+
+/* Have host's __divdi3 */
+/* #undef HAVE___DIVDI3 */
+
+/* Define to 1 if you have the `__dso_handle' function. */
+/* #undef HAVE___DSO_HANDLE */
+
+/* Have host's __fixdfdi */
+/* #undef HAVE___FIXDFDI */
+
+/* Have host's __fixsfdi */
+/* #undef HAVE___FIXSFDI */
+
+/* Have host's __floatdidf */
+/* #undef HAVE___FLOATDIDF */
+
+/* Have host's __lshrdi3 */
+/* #undef HAVE___LSHRDI3 */
+
+/* Have host's __main */
+/* #undef HAVE___MAIN */
+
+/* Have host's __moddi3 */
+/* #undef HAVE___MODDI3 */
+
+/* Have host's __udivdi3 */
+/* #undef HAVE___UDIVDI3 */
+
+/* Have host's __umoddi3 */
+/* #undef HAVE___UMODDI3 */
+
+/* Have host's ___chkstk */
+/* #undef HAVE____CHKSTK */
+
+/* Linker version detected at compile time. */
+#define HOST_LINK_VERSION "2.20.1"
+
+/* Installation directory for binary executables */
+#define LLVM_BINDIR "/opt/llvm-android/bin"
+
+/* Time at which LLVM was configured */
+#define LLVM_CONFIGTIME "Tue May  8 14:22:45 CST 2012"
+
+/* Installation directory for data files */
+#define LLVM_DATADIR "/opt/llvm-android/share/llvm"
+
+/* Target triple LLVM will generate code for by default */
+#if defined(__APPLE__)
+#define LLVM_DEFAULT_TARGET_TRIPLE "x86_64-apple-darwin"
+#else
+#define LLVM_DEFAULT_TARGET_TRIPLE "x86_64-unknown-linux"
+#endif
+
+/* Installation directory for documentation */
+#define LLVM_DOCSDIR "/opt/llvm-android/share/doc/llvm"
+
+/* Define if threads enabled */
+#if !defined(_WIN32) && !defined(_WIN64)
+#define LLVM_ENABLE_THREADS 1
+#else
+#define LLVM_ENABLE_THREADS 0
+#endif
+
+/* Installation directory for config files */
+#define LLVM_ETCDIR "/opt/llvm-android/etc/llvm"
+
+#if !defined(_WIN32) && !defined(_WIN64)
+
+/* Has gcc/MSVC atomic intrinsics */
+#define LLVM_HAS_ATOMICS 1
+
+#else
+
+#define LLVM_HAS_ATOMICS 0
+
+#endif /* !defined(_WIN32) && !defined(_WIN64) */
+
+/* Installation directory for include files */
+#define LLVM_INCLUDEDIR "/opt/llvm-android/include"
+
+/* Installation directory for .info files */
+#define LLVM_INFODIR "/opt/llvm-android/info"
+
+/* Installation directory for libraries */
+#define LLVM_LIBDIR "/opt/llvm-android/lib"
+
+/* Installation directory for man pages */
+#define LLVM_MANDIR "/opt/llvm-android/man"
+
+/* Define to path to circo program if found or 'echo circo' otherwise */
+/* #undef LLVM_PATH_CIRCO */
+
+/* Define to path to dot program if found or 'echo dot' otherwise */
+/* #undef LLVM_PATH_DOT */
+
+/* Define to path to dotty program if found or 'echo dotty' otherwise */
+/* #undef LLVM_PATH_DOTTY */
+
+/* Define to path to fdp program if found or 'echo fdp' otherwise */
+/* #undef LLVM_PATH_FDP */
+
+/* Define to path to Graphviz program if found or 'echo Graphviz' otherwise */
+/* #undef LLVM_PATH_GRAPHVIZ */
+
+/* Define to path to gv program if found or 'echo gv' otherwise */
+/* #undef LLVM_PATH_GV */
+
+/* Define to path to neato program if found or 'echo neato' otherwise */
+/* #undef LLVM_PATH_NEATO */
+
+/* Define to path to twopi program if found or 'echo twopi' otherwise */
+/* #undef LLVM_PATH_TWOPI */
+
+/* Define to path to xdot.py program if found or 'echo xdot.py' otherwise */
+/* #undef LLVM_PATH_XDOT_PY */
+
+/* Installation prefix directory */
+#define LLVM_PREFIX "/opt/llvm-android"
+
+/* Define if we have the Intel JIT API runtime support library */
+#define LLVM_USE_INTEL_JITEVENTS 0
+
+/* Define if we have the oprofile JIT-support library */
+#define LLVM_USE_OPROFILE 0
+
+/* Major version of the LLVM API */
+#define LLVM_VERSION_MAJOR 9
+
+/* Minor version of the LLVM API */
+#define LLVM_VERSION_MINOR 0
+
+/* Patch version of the LLVM API */
+#define LLVM_VERSION_PATCH 0
+
+/* Define if the OS needs help to load dependent libraries for dlopen(). */
+/* #undef LTDL_DLOPEN_DEPLIBS */
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#define LTDL_OBJDIR ".libs/"
+
+/* Define to the name of the environment variable that determines the dynamic
+   library search path. */
+#define LTDL_SHLIBPATH_VAR "LD_LIBRARY_PATH"
+
+/* Define to the extension used for shared libraries, say, ".so". */
+#if defined(__APPLE__)
+#define LTDL_SHLIB_EXT ".dylib"
+#elif defined(_WIN32)
+#define LTDL_SHLIB_EXT ".dll"
+#else
+#define LTDL_SHLIB_EXT ".so"
+#endif  /* __APPLE__ */
+
+/* Define to the system default library search path. */
+#define LTDL_SYSSEARCHPATH "/lib:/usr/lib:/usr/local/lib:/lib:/usr/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib32:/usr/lib32:/usr/local/lib32:/usr/x86_64-pc-linux-gnu/lib:/usr/lib/gcc/x86_64-pc-linux-gnu/4.3.4:/usr/lib/gcc/x86_64-pc-linux-gnu/4.3.4/32:/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.2:/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.2/32"
+
+/* Define if /dev/zero should be used when mapping RWX memory, or undefine if
+   its not necessary */
+/* #undef NEED_DEV_ZERO_FOR_MMAP */
+
+/* Define if dlsym() requires a leading underscore in symbol names. */
+/* #undef NEED_USCORE */
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "http://llvm.org/bugs/"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "LLVM"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "LLVM 9.0.0"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "llvm"
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "9.0.0"
+
+/* Define as the return type of signal handlers (`int' or `void'). */
+#define RETSIGTYPE void
+
+/* Define to 1 if the `S_IS*' macros in <sys/stat.h> do not work properly. */
+/* #undef STAT_MACROS_BROKEN */
+
+/* Define to 1 if you have the ANSI C header files. */
+#define STDC_HEADERS 1
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#define TIME_WITH_SYS_TIME 1
+
+/* Define to 1 if your <sys/time.h> declares `struct tm'. */
+/* #undef TM_IN_SYS_TIME */
+
+/* Define if use udis86 library */
+#define USE_UDIS86 0
+
+/* Define to empty if `const' does not conform to ANSI C. */
+/* #undef const */
+
+/* Define to a type to use for `error_t' if it is not otherwise available. */
+/* #undef error_t */
+
+/* Define to `int' if <sys/types.h> does not define. */
+/* #undef pid_t */
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+/* #undef size_t */
+
+#include "llvm/Config/llvm-platform-config.h"
+
+#endif
diff -Nurp a/host/include/llvm/Config/Disassemblers.def b/host/include/llvm/Config/Disassemblers.def
--- a/host/include/llvm/Config/Disassemblers.def	1970-01-01 00:00:00.000000000 +0000
+++ b/host/include/llvm/Config/Disassemblers.def	2021-04-19 01:45:06.666348822 +0000
@@ -0,0 +1,32 @@
+//===- llvm/Config/Disassemblers.def - LLVM Assembly Parsers ----*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file enumerates all of the assembly-language parsers
+// supported by this build of LLVM. Clients of this file should define
+// the LLVM_ASM_PARSER macro to be a function-like macro with a
+// single parameter (the name of the target whose assembly can be
+// generated); including this file will then enumerate all of the
+// targets with assembly parsers.
+//
+// The set of targets supported by LLVM is generated at configuration
+// time, at which point this header is generated. Do not modify this
+// header directly.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_DISASSEMBLER
+#  error Please define the macro LLVM_DISASSEMBLER(TargetName)
+#endif
+
+LLVM_DISASSEMBLER(ARM)
+LLVM_DISASSEMBLER(Mips)
+LLVM_DISASSEMBLER(X86)
+LLVM_DISASSEMBLER(AArch64)
+
+#undef LLVM_DISASSEMBLER
diff -Nurp a/host/include/llvm/Config/llvm-config.h b/host/include/llvm/Config/llvm-config.h
--- a/host/include/llvm/Config/llvm-config.h	1970-01-01 00:00:00.000000000 +0000
+++ b/host/include/llvm/Config/llvm-config.h	2021-04-19 02:17:37.206263006 +0000
@@ -0,0 +1,116 @@
+/* include/llvm/Config/llvm-config.h.  Generated from llvm-config.h.in by configure.  */
+/*===-- llvm/config/llvm-config.h - llvm configure variable -------*- C -*-===*/
+/*                                                                            */
+/*                     The LLVM Compiler Infrastructure                       */
+/*                                                                            */
+/* This file is distributed under the University of Illinois Open Source      */
+/* License. See LICENSE.TXT for details.                                      */
+/*                                                                            */
+/*===----------------------------------------------------------------------===*/
+
+/* This file enumerates all of the llvm variables from configure so that
+   they can be in exported headers and won't override package specific
+   directives.  This is a C file so we can include it in the llvm-c headers.  */
+
+/* To avoid multiple inclusions of these variables when we include the exported
+   headers and config.h, conditionally include these.  */
+/* TODO: This is a bit of a hack.  */
+#ifndef CONFIG_H
+
+/* Installation directory for binary executables */
+#define LLVM_BINDIR "/opt/llvm-android/bin"
+
+/* Time at which LLVM was configured */
+#define LLVM_CONFIGTIME "Tue May  8 14:22:45 CST 2012"
+
+/* Installation directory for data files */
+#define LLVM_DATADIR "/opt/llvm-android/share/llvm"
+
+/* Target triple LLVM will generate code for by default */
+#if defined(__APPLE__)
+#define LLVM_DEFAULT_TARGET_TRIPLE "x86_64-apple-darwin"
+#else
+#define LLVM_DEFAULT_TARGET_TRIPLE "x86_64-unknown-linux"
+#endif
+
+/* Installation directory for documentation */
+#define LLVM_DOCSDIR "/opt/llvm-android/share/doc/llvm"
+
+/* Define if threads enabled */
+#if !defined(_WIN32) && !defined(_WIN64)
+#define LLVM_ENABLE_THREADS 1
+#else
+#define LLVM_ENABLE_THREADS 0
+#endif
+
+/* Installation directory for config files */
+#define LLVM_ETCDIR "/opt/llvm-android/etc/llvm"
+
+#if !defined(_WIN32) && !defined(_WIN64)
+
+/* Has gcc/MSVC atomic intrinsics */
+#define LLVM_HAS_ATOMICS 1
+
+#else
+
+#define LLVM_HAS_ATOMICS 0
+
+#endif /* !defined(_WIN32) && !defined(_WIN64) */
+
+/* Installation directory for include files */
+#define LLVM_INCLUDEDIR "/opt/llvm-android/include"
+
+/* Installation directory for .info files */
+#define LLVM_INFODIR "/opt/llvm-android/info"
+
+/* Installation directory for libraries */
+#define LLVM_LIBDIR "/opt/llvm-android/lib"
+
+/* Installation directory for man pages */
+#define LLVM_MANDIR "/opt/llvm-android/man"
+
+/* Define to path to circo program if found or 'echo circo' otherwise */
+/* #undef LLVM_PATH_CIRCO */
+
+/* Define to path to dot program if found or 'echo dot' otherwise */
+/* #undef LLVM_PATH_DOT */
+
+/* Define to path to dotty program if found or 'echo dotty' otherwise */
+/* #undef LLVM_PATH_DOTTY */
+
+/* Define to path to fdp program if found or 'echo fdp' otherwise */
+/* #undef LLVM_PATH_FDP */
+
+/* Define to path to Graphviz program if found or 'echo Graphviz' otherwise */
+/* #undef LLVM_PATH_GRAPHVIZ */
+
+/* Define to path to gv program if found or 'echo gv' otherwise */
+/* #undef LLVM_PATH_GV */
+
+/* Define to path to neato program if found or 'echo neato' otherwise */
+/* #undef LLVM_PATH_NEATO */
+
+/* Define to path to twopi program if found or 'echo twopi' otherwise */
+/* #undef LLVM_PATH_TWOPI */
+
+/* Define to path to xdot.py program if found or 'echo xdot.py' otherwise */
+/* #undef LLVM_PATH_XDOT_PY */
+
+/* Installation prefix directory */
+#define LLVM_PREFIX "/opt/llvm-android"
+
+/* Major version of the LLVM API */
+#define LLVM_VERSION_MAJOR 9
+
+/* Minor version of the LLVM API */
+#define LLVM_VERSION_MINOR 0
+
+/* Patch version of the LLVM API */
+#define LLVM_VERSION_PATCH 0
+
+/* LLVM version string */
+#define LLVM_VERSION_STRING "9.0.0"
+
+#include "llvm/Config/llvm-platform-config.h"
+
+#endif
diff -Nurp a/host/include/llvm/Config/Targets.def b/host/include/llvm/Config/Targets.def
--- a/host/include/llvm/Config/Targets.def	1970-01-01 00:00:00.000000000 +0000
+++ b/host/include/llvm/Config/Targets.def	2021-04-19 01:45:06.666348822 +0000
@@ -0,0 +1,31 @@
+/*===- llvm/Config/Targets.def - LLVM Target Architectures ------*- C++ -*-===*\
+|*                                                                            *|
+|*                     The LLVM Compiler Infrastructure                       *|
+|*                                                                            *|
+|* This file is distributed under the University of Illinois Open Source      *|
+|* License. See LICENSE.TXT for details.                                      *|
+|*                                                                            *|
+|*===----------------------------------------------------------------------===*|
+|*                                                                            *|
+|* This file enumerates all of the target architectures supported by          *|
+|* this build of LLVM. Clients of this file should define the                 *|
+|* LLVM_TARGET macro to be a function-like macro with a single                *|
+|* parameter (the name of the target); including this file will then          *|
+|* enumerate all of the targets.                                              *|
+|*                                                                            *|
+|* The set of targets supported by LLVM is generated at configuration         *|
+|* time, at which point this header is generated. Do not modify this          *|
+|* header directly.                                                           *|
+|*                                                                            *|
+\*===----------------------------------------------------------------------===*/
+
+#ifndef LLVM_TARGET
+#  error Please define the macro LLVM_TARGET(TargetName)
+#endif
+
+LLVM_TARGET(ARM)
+LLVM_TARGET(Mips)
+LLVM_TARGET(X86)
+LLVM_TARGET(AArch64)
+
+#undef LLVM_TARGET
diff -Nurp a/include/llvm/Config/llvm-platform-config.h b/include/llvm/Config/llvm-platform-config.h
--- a/include/llvm/Config/llvm-platform-config.h	1970-01-01 00:00:00.000000000 +0000
+++ b/include/llvm/Config/llvm-platform-config.h	2021-04-19 01:45:00.894349076 +0000
@@ -0,0 +1,160 @@
+#ifndef LLVM_NATIVE_CONFIG_H
+
+/*===-- llvm/config/llvm-native-config.h --------------------------*- C -*-===*/
+/*                                                                            */
+/*                     The LLVM Compiler Infrastructure                       */
+/*                                                                            */
+/* This file is distributed under the University of Illinois Open Source      */
+/* License. See LICENSE.TXT for details.                                      */
+/*                                                                            */
+/*===----------------------------------------------------------------------===*/
+
+#if defined(__i386__) || defined(__x86_64__)
+
+/* LLVM architecture name for the native architecture, if available */
+#define LLVM_NATIVE_ARCH X86
+
+/* Host triple LLVM will be executed on */
+#define LLVM_HOST_TRIPLE "i686-unknown-linux-gnu"
+
+/* LLVM name for the native AsmParser init function, if available */
+#define LLVM_NATIVE_ASMPARSER LLVMInitializeX86AsmParser
+
+/* LLVM name for the native AsmPrinter init function, if available */
+#define LLVM_NATIVE_ASMPRINTER LLVMInitializeX86AsmPrinter
+
+/* LLVM name for the native Disassembler init function, if available */
+#define LLVM_NATIVE_DISASSEMBLER LLVMInitializeX86Disassembler
+
+/* LLVM name for the native Target init function, if available */
+#define LLVM_NATIVE_TARGET LLVMInitializeX86Target
+
+/* LLVM name for the native TargetInfo init function, if available */
+#define LLVM_NATIVE_TARGETINFO LLVMInitializeX86TargetInfo
+
+/* LLVM name for the native target MC init function, if available */
+#define LLVM_NATIVE_TARGETMC LLVMInitializeX86TargetMC
+
+
+#elif defined(__arm__)
+
+/* LLVM architecture name for the native architecture, if available */
+#define LLVM_NATIVE_ARCH ARM
+
+/* Host triple LLVM will be executed on */
+#define LLVM_HOST_TRIPLE "arm-unknown-linux-gnu"
+
+/* LLVM name for the native AsmParser init function, if available */
+#define LLVM_NATIVE_ASMPARSER LLVMInitializeARMAsmParser
+
+/* LLVM name for the native AsmPrinter init function, if available */
+#define LLVM_NATIVE_ASMPRINTER LLVMInitializeARMAsmPrinter
+
+/* LLVM name for the native Disassembler init function, if available */
+#define LLVM_NATIVE_DISASSEMBLER LLVMInitializeARMDisassembler
+
+/* LLVM name for the native Target init function, if available */
+#define LLVM_NATIVE_TARGET LLVMInitializeARMTarget
+
+/* LLVM name for the native TargetInfo init function, if available */
+#define LLVM_NATIVE_TARGETINFO LLVMInitializeARMTargetInfo
+
+/* LLVM name for the native target MC init function, if available */
+#define LLVM_NATIVE_TARGETMC LLVMInitializeARMTargetMC
+
+
+#elif defined(__mips__)
+
+/* LLVM architecture name for the native architecture, if available */
+#define LLVM_NATIVE_ARCH Mips
+
+/* Host triple LLVM will be executed on */
+#define LLVM_HOST_TRIPLE "mipsel-unknown-linux-gnu"
+
+/* LLVM name for the native AsmParser init function, if available */
+#define LLVM_NATIVE_ASMPARSER LLVMInitializeMipsAsmParser
+
+/* LLVM name for the native AsmPrinter init function, if available */
+#define LLVM_NATIVE_ASMPRINTER LLVMInitializeMipsAsmPrinter
+
+/* LLVM name for the native Disassembler init function, if available */
+#define LLVM_NATIVE_DISASSEMBLER LLVMInitializeMipsDisassembler
+
+/* LLVM name for the native Target init function, if available */
+#define LLVM_NATIVE_TARGET LLVMInitializeMipsTarget
+
+/* LLVM name for the native TargetInfo init function, if available */
+#define LLVM_NATIVE_TARGETINFO LLVMInitializeMipsTargetInfo
+
+/* LLVM name for the native target MC init function, if available */
+#define LLVM_NATIVE_TARGETMC LLVMInitializeMipsTargetMC
+
+#elif defined(__aarch64__)
+
+/* LLVM architecture name for the native architecture, if available */
+#define LLVM_NATIVE_ARCH AArch64
+
+/* Host triple LLVM will be executed on */
+#define LLVM_HOST_TRIPLE "aarch64-none-linux-gnu"
+
+/* LLVM name for the native AsmParser init function, if available */
+#define LLVM_NATIVE_ASMPARSER LLVMInitializeAArch64AsmParser
+
+/* LLVM name for the native AsmPrinter init function, if available */
+#define LLVM_NATIVE_ASMPRINTER LLVMInitializeAArch64AsmPrinter
+
+/* LLVM name for the native Disassembler init function, if available */
+#define LLVM_NATIVE_DISASSEMBLER LLVMInitializeAArch64Disassembler
+
+/* LLVM name for the native Target init function, if available */
+#define LLVM_NATIVE_TARGET LLVMInitializeAArch64Target
+
+/* LLVM name for the native TargetInfo init function, if available */
+#define LLVM_NATIVE_TARGETINFO LLVMInitializeAArch64TargetInfo
+
+/* LLVM name for the native target MC init function, if available */
+#define LLVM_NATIVE_TARGETMC LLVMInitializeAArch64TargetMC
+
+#else
+
+#error "Unknown native architecture"
+
+#endif
+
+
+
+#if defined(_WIN32) || defined(_WIN64)
+
+/* Define if this is Unixish platform */
+/* #undef LLVM_ON_UNIX */
+
+/* Define if this is Win32ish platform */
+#define LLVM_ON_WIN32 1
+
+/* Define to 1 if you have the <windows.h> header file. */
+#define HAVE_WINDOWS_H 1
+
+/* Define to 1 if you have the `psapi' library (-lpsapi). */
+#define HAVE_LIBPSAPI 1
+
+/* Define to 1 if you have the `imagehlp' library (-limagehlp). */
+#define HAVE_LIBIMAGEHLP 1
+
+/* Type of 1st arg on ELM Callback */
+#define WIN32_ELMCB_PCSTR PCSTR
+
+
+#else /* Linux, Mac OS X, ... Unixish platform */
+
+/* Define if this is Unixish platform */
+#define LLVM_ON_UNIX 1
+
+/* Define if this is Win32ish platform */
+/* #undef LLVM_ON_WIN32 */
+
+/* Type of 1st arg on ELM Callback */
+/* #undef WIN32_ELMCB_PCSTR */
+
+#endif
+
+#endif // LLVM_NATIVE_CONFIG_H
diff -Nurp a/include/llvm/DebugInfo/CodeView/DebugSubsection.h b/include/llvm/DebugInfo/CodeView/DebugSubsection.h
--- a/include/llvm/DebugInfo/CodeView/DebugSubsection.h	2021-04-17 09:25:10.524736934 +0000
+++ b/include/llvm/DebugInfo/CodeView/DebugSubsection.h	2021-04-19 01:45:00.902349076 +0000
@@ -18,7 +18,7 @@ namespace codeview {
 
 class DebugSubsectionRef {
 public:
-  explicit DebugSubsectionRef(DebugSubsectionKind Kind) : Kind(Kind) {}
+  explicit DebugSubsectionRef(DebugSubsectionKind Kind);
   virtual ~DebugSubsectionRef();
 
   static bool classof(const DebugSubsectionRef *S) { return true; }
@@ -31,7 +31,7 @@ protected:
 
 class DebugSubsection {
 public:
-  explicit DebugSubsection(DebugSubsectionKind Kind) : Kind(Kind) {}
+  explicit DebugSubsection(DebugSubsectionKind Kind);
   virtual ~DebugSubsection();
 
   static bool classof(const DebugSubsection *S) { return true; }
diff -Nurp a/include/llvm/Support/VCSRevision.h b/include/llvm/Support/VCSRevision.h
--- a/include/llvm/Support/VCSRevision.h	1970-01-01 00:00:00.000000000 +0000
+++ b/include/llvm/Support/VCSRevision.h	2021-04-19 01:45:01.010349071 +0000
@@ -0,0 +1 @@
+#define LLVM_REVISION "7.0.0"
diff -Nurp a/lib/Analysis/Android.mk b/lib/Analysis/Android.mk
--- a/lib/Analysis/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Analysis/Android.mk	2021-04-19 01:45:41.774347278 +0000
@@ -0,0 +1,125 @@
+LOCAL_PATH:= $(call my-dir)
+
+analysis70_SRC_FILES :=              \
+  AliasAnalysis.cpp \
+  AliasAnalysisEvaluator.cpp \
+  AliasAnalysisSummary.cpp \
+  AliasSetTracker.cpp \
+  Analysis.cpp \
+  AssumptionCache.cpp \
+  BasicAliasAnalysis.cpp \
+  BlockFrequencyInfo.cpp \
+  BlockFrequencyInfoImpl.cpp \
+  BranchProbabilityInfo.cpp \
+  CallGraph.cpp \
+  CallGraphSCCPass.cpp \
+  CallPrinter.cpp \
+  CaptureTracking.cpp \
+  CFG.cpp \
+  CFGPrinter.cpp \
+  CFLAndersAliasAnalysis.cpp \
+  CFLSteensAliasAnalysis.cpp \
+  CGSCCPassManager.cpp \
+  CmpInstAnalysis.cpp \
+  CodeMetrics.cpp \
+  ConstantFolding.cpp \
+  CostModel.cpp \
+  Delinearization.cpp \
+  DemandedBits.cpp \
+  DependenceAnalysis.cpp \
+  DivergenceAnalysis.cpp \
+  DominanceFrontier.cpp \
+  DomPrinter.cpp \
+  DomTreeUpdater.cpp \
+  EHPersonalities.cpp \
+  GlobalsModRef.cpp \
+  GuardUtils.cpp \
+  IndirectCallPromotionAnalysis.cpp \
+  InlineCost.cpp \
+  InstCount.cpp \
+  InstructionPrecedenceTracking.cpp \
+  InstructionSimplify.cpp \
+  Interval.cpp \
+  IntervalPartition.cpp \
+  IVDescriptors.cpp \
+  IVUsers.cpp \
+  LazyBlockFrequencyInfo.cpp \
+  LazyBranchProbabilityInfo.cpp \
+  LazyCallGraph.cpp \
+  LazyValueInfo.cpp \
+  LegacyDivergenceAnalysis.cpp \
+  Lint.cpp \
+  Loads.cpp \
+  LoopAccessAnalysis.cpp \
+  LoopAnalysisManager.cpp \
+  LoopInfo.cpp \
+  LoopPass.cpp \
+  LoopUnrollAnalyzer.cpp \
+  MemDepPrinter.cpp \
+  MemDerefPrinter.cpp \
+  MemoryBuiltins.cpp \
+  MemoryDependenceAnalysis.cpp \
+  MemoryLocation.cpp \
+  MemorySSA.cpp \
+  MemorySSAUpdater.cpp \
+  ModuleDebugInfoPrinter.cpp \
+  ModuleSummaryAnalysis.cpp \
+  MustExecute.cpp \
+  ObjCARCAliasAnalysis.cpp \
+  ObjCARCAnalysisUtils.cpp \
+  ObjCARCInstKind.cpp \
+  OptimizationRemarkEmitter.cpp \
+  OrderedBasicBlock.cpp \
+  OrderedInstructions.cpp \
+  PHITransAddr.cpp \
+  PhiValues.cpp \
+  PostDominators.cpp \
+  ProfileSummaryInfo.cpp \
+  PtrUseVisitor.cpp \
+  RegionInfo.cpp \
+  RegionPass.cpp \
+  RegionPrinter.cpp \
+  ScalarEvolutionAliasAnalysis.cpp \
+  ScalarEvolution.cpp \
+  ScalarEvolutionExpander.cpp \
+  ScalarEvolutionNormalization.cpp \
+  ScopedNoAliasAA.cpp \
+  StackSafetyAnalysis.cpp \
+  SyncDependenceAnalysis.cpp \
+  SyntheticCountsUtils.cpp \
+  TargetLibraryInfo.cpp \
+  TargetTransformInfo.cpp \
+  Trace.cpp \
+  TypeBasedAliasAnalysis.cpp \
+  TypeMetadataUtils.cpp \
+  ValueLattice.cpp \
+  ValueLatticeUtils.cpp \
+  ValueTracking.cpp \
+  VectorUtils.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Analysis
+LOCAL_MODULE_HOST_OS := darwin linux
+LOCAL_SRC_FILES := $(analysis70_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Analysis
+LOCAL_SRC_FILES := $(analysis70_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/AsmParser/Android.mk b/lib/AsmParser/Android.mk
--- a/lib/AsmParser/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/AsmParser/Android.mk	2021-04-19 01:45:01.070349069 +0000
@@ -0,0 +1,36 @@
+LOCAL_PATH:= $(call my-dir)
+
+asm_parser_SRC_FILES := \
+  LLLexer.cpp \
+  LLParser.cpp \
+  Parser.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(asm_parser_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70AsmParser
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LOCAL_PATH)/../../llvm70-host-build.mk
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(asm_parser_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70AsmParser
+
+include $(LOCAL_PATH)/../../llvm70-device-build.mk
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/BinaryFormat/Android.mk b/lib/BinaryFormat/Android.mk
--- a/lib/BinaryFormat/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/BinaryFormat/Android.mk	2021-04-19 01:45:41.774347278 +0000
@@ -0,0 +1,35 @@
+LOCAL_PATH:= $(call my-dir)
+
+libbinaryformat_SRC_FILES := \
+  AMDGPUMetadataVerifier.cpp \
+  Dwarf.cpp \
+  Magic.cpp \
+  Minidump.cpp \
+  MsgPackDocument.cpp \
+  MsgPackDocumentYAML.cpp \
+  MsgPackReader.cpp \
+  MsgPackWriter.cpp \
+  Wasm.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70BinaryFormat
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(libbinaryformat_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70BinaryFormat
+LOCAL_SRC_FILES := $(libbinaryformat_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Bitcode/Reader/Android.mk b/lib/Bitcode/Reader/Android.mk
--- a/lib/Bitcode/Reader/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Bitcode/Reader/Android.mk	2021-04-19 01:45:41.774347278 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH:= $(call my-dir)
+
+bitcode_reader_SRC_FILES := \
+  BitcodeAnalyzer.cpp \
+  BitReader.cpp       \
+  BitcodeReader.cpp   \
+  MetadataLoader.cpp  \
+  ValueList.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(bitcode_reader_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70BitReader
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(bitcode_reader_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70BitReader
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Bitcode/Writer/Android.mk b/lib/Bitcode/Writer/Android.mk
--- a/lib/Bitcode/Writer/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Bitcode/Writer/Android.mk	2021-04-19 01:45:01.074349068 +0000
@@ -0,0 +1,37 @@
+LOCAL_PATH:= $(call my-dir)
+
+bitcode_writer_SRC_FILES := \
+  BitWriter.cpp         \
+  BitcodeWriter.cpp     \
+  BitcodeWriterPass.cpp \
+  ValueEnumerator.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(bitcode_writer_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70BitWriter
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(bitcode_writer_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70BitWriter
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Bitstream/Reader/Android.mk b/lib/Bitstream/Reader/Android.mk
--- a/lib/Bitstream/Reader/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Bitstream/Reader/Android.mk	2021-04-19 01:45:41.774347278 +0000
@@ -0,0 +1,34 @@
+LOCAL_PATH:= $(call my-dir)
+
+bitstream_reader_SRC_FILES := \
+  BitstreamReader.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(bitstream_reader_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70BitstreamReader
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(bitstream_reader_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70BitstreamReader
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/CodeGen/Android.mk b/lib/CodeGen/Android.mk
--- a/lib/CodeGen/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/CodeGen/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,196 @@
+LOCAL_PATH:= $(call my-dir)
+
+codegen_SRC_FILES :=                \
+  AggressiveAntiDepBreaker.cpp \
+  AllocationOrder.cpp \
+  Analysis.cpp \
+  AtomicExpandPass.cpp \
+  BasicTargetTransformInfo.cpp \
+  BranchFolding.cpp \
+  BranchRelaxation.cpp \
+  BreakFalseDeps.cpp \
+  BuiltinGCs.cpp \
+  CalcSpillWeights.cpp \
+  CallingConvLower.cpp \
+  CFIInstrInserter.cpp \
+  CodeGen.cpp \
+  CodeGenPrepare.cpp \
+  CriticalAntiDepBreaker.cpp \
+  DeadMachineInstructionElim.cpp \
+  DetectDeadLanes.cpp \
+  DFAPacketizer.cpp \
+  DwarfEHPrepare.cpp \
+  EarlyIfConversion.cpp \
+  EdgeBundles.cpp \
+  ExecutionDomainFix.cpp \
+  ExpandMemCmp.cpp \
+  ExpandPostRAPseudos.cpp \
+  ExpandReductions.cpp \
+  FaultMaps.cpp \
+  FEntryInserter.cpp \
+  FinalizeISel.cpp \
+  FuncletLayout.cpp \
+  GCMetadata.cpp \
+  GCMetadataPrinter.cpp \
+  GCRootLowering.cpp \
+  GCStrategy.cpp \
+  GlobalMerge.cpp \
+  HardwareLoops.cpp \
+  IfConversion.cpp \
+  ImplicitNullChecks.cpp \
+  IndirectBrExpandPass.cpp \
+  InlineSpiller.cpp \
+  InterferenceCache.cpp \
+  InterleavedAccessPass.cpp \
+  InterleavedLoadCombinePass.cpp \
+  IntrinsicLowering.cpp \
+  LatencyPriorityQueue.cpp \
+  LazyMachineBlockFrequencyInfo.cpp \
+  LexicalScopes.cpp \
+  LiveDebugValues.cpp \
+  LiveDebugVariables.cpp \
+  LiveInterval.cpp \
+  LiveIntervals.cpp \
+  LiveIntervalUnion.cpp \
+  LivePhysRegs.cpp \
+  LiveRangeCalc.cpp \
+  LiveRangeEdit.cpp \
+  LiveRangeShrink.cpp \
+  LiveRegMatrix.cpp \
+  LiveRegUnits.cpp \
+  LiveStacks.cpp \
+  LiveVariables.cpp \
+  LLVMTargetMachine.cpp \
+  LocalStackSlotAllocation.cpp \
+  LoopTraversal.cpp \
+  LowerEmuTLS.cpp \
+  LowLevelType.cpp \
+  MachineBasicBlock.cpp \
+  MachineBlockFrequencyInfo.cpp \
+  MachineBlockPlacement.cpp \
+  MachineBranchProbabilityInfo.cpp \
+  MachineCombiner.cpp \
+  MachineCopyPropagation.cpp \
+  MachineCSE.cpp \
+  MachineDominanceFrontier.cpp \
+  MachineDominators.cpp \
+  MachineFrameInfo.cpp \
+  MachineFunction.cpp \
+  MachineFunctionPass.cpp \
+  MachineFunctionPrinterPass.cpp \
+  MachineInstrBundle.cpp \
+  MachineInstr.cpp \
+  MachineLICM.cpp \
+  MachineLoopInfo.cpp \
+  MachineModuleInfo.cpp \
+  MachineModuleInfoImpls.cpp \
+  MachineOperand.cpp \
+  MachineOptimizationRemarkEmitter.cpp \
+  MachineOutliner.cpp \
+  MachinePipeliner.cpp \
+  MachinePostDominators.cpp \
+  MachineRegionInfo.cpp \
+  MachineRegisterInfo.cpp \
+  MachineScheduler.cpp \
+  MachineSink.cpp \
+  MachineSSAUpdater.cpp \
+  MachineTraceMetrics.cpp \
+  MachineVerifier.cpp \
+  MacroFusion.cpp \
+  MIRCanonicalizerPass.cpp \
+  MIRPrinter.cpp \
+  MIRPrintingPass.cpp \
+  OptimizePHIs.cpp \
+  ParallelCG.cpp \
+  PatchableFunction.cpp \
+  PeepholeOptimizer.cpp \
+  PHIElimination.cpp \
+  PHIEliminationUtils.cpp \
+  PostRAHazardRecognizer.cpp \
+  PostRASchedulerList.cpp \
+  PreISelIntrinsicLowering.cpp \
+  ProcessImplicitDefs.cpp \
+  PrologEpilogInserter.cpp \
+  PseudoSourceValue.cpp \
+  ReachingDefAnalysis.cpp \
+  RegAllocBase.cpp \
+  RegAllocBasic.cpp \
+  RegAllocFast.cpp \
+  RegAllocGreedy.cpp \
+  RegAllocPBQP.cpp \
+  RegisterClassInfo.cpp \
+  RegisterCoalescer.cpp \
+  RegisterPressure.cpp \
+  RegisterScavenging.cpp \
+  RegisterUsageInfo.cpp \
+  RegUsageInfoCollector.cpp \
+  RegUsageInfoPropagate.cpp \
+  RenameIndependentSubregs.cpp \
+  ResetMachineFunctionPass.cpp \
+  SafeStackColoring.cpp \
+  SafeStack.cpp \
+  SafeStackLayout.cpp \
+  ScalarizeMaskedMemIntrin.cpp \
+  ScheduleDAG.cpp \
+  ScheduleDAGInstrs.cpp \
+  ScheduleDAGPrinter.cpp \
+  ScoreboardHazardRecognizer.cpp \
+  ShadowStackGCLowering.cpp \
+  ShrinkWrap.cpp \
+  SjLjEHPrepare.cpp \
+  SlotIndexes.cpp \
+  SpillPlacement.cpp \
+  SplitKit.cpp \
+  StackColoring.cpp \
+  StackMapLivenessAnalysis.cpp \
+  StackMaps.cpp \
+  StackProtector.cpp \
+  StackSlotColoring.cpp \
+  SwiftErrorValueTracking.cpp \
+  SwitchLoweringUtils.cpp \
+  TailDuplication.cpp \
+  TailDuplicator.cpp \
+  TargetFrameLoweringImpl.cpp \
+  TargetInstrInfo.cpp \
+  TargetLoweringBase.cpp \
+  TargetLoweringObjectFileImpl.cpp \
+  TargetOptionsImpl.cpp \
+  TargetPassConfig.cpp \
+  TargetRegisterInfo.cpp \
+  TargetSchedule.cpp \
+  TargetSubtargetInfo.cpp \
+  TwoAddressInstructionPass.cpp \
+  UnreachableBlockElim.cpp \
+  ValueTypes.cpp \
+  VirtRegMap.cpp \
+  WasmEHPrepare.cpp \
+  WinEHPrepare.cpp \
+  XRayInstrumentation.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_SRC_FILES)
+LOCAL_MODULE:= libLLVM70CodeGen
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_SRC_FILES)
+LOCAL_MODULE:= libLLVM70CodeGen
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/CodeGen/AsmPrinter/Android.mk b/lib/CodeGen/AsmPrinter/Android.mk
--- a/lib/CodeGen/AsmPrinter/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/CodeGen/AsmPrinter/Android.mk	2021-04-19 01:45:01.130349066 +0000
@@ -0,0 +1,58 @@
+LOCAL_PATH := $(call my-dir)
+
+codegen_asmprinter_SRC_FILES := \
+  AccelTable.cpp                \
+  AddressPool.cpp               \
+  ARMException.cpp              \
+  AsmPrinter.cpp                \
+  AsmPrinterDwarf.cpp           \
+  AsmPrinterInlineAsm.cpp       \
+  DbgEntityHistoryCalculator.cpp \
+  DebugHandlerBase.cpp          \
+  DebugLocStream.cpp            \
+  DIE.cpp                       \
+  DIEHash.cpp                   \
+  DwarfCFIException.cpp         \
+  DwarfCompileUnit.cpp          \
+  DwarfDebug.cpp                \
+  DwarfExpression.cpp           \
+  DwarfFile.cpp                 \
+  DwarfStringPool.cpp           \
+  DwarfUnit.cpp                 \
+  EHStreamer.cpp                \
+  ErlangGCPrinter.cpp           \
+  OcamlGCPrinter.cpp            \
+  WinCFGuard.cpp                \
+  WinException.cpp              \
+  CodeViewDebug.cpp             \
+  WasmException.cpp
+
+
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_asmprinter_SRC_FILES)
+LOCAL_MODULE:= libLLVM70AsmPrinter
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_asmprinter_SRC_FILES)
+LOCAL_MODULE:= libLLVM70AsmPrinter
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/CodeGen/GlobalISel/Android.mk b/lib/CodeGen/GlobalISel/Android.mk
--- a/lib/CodeGen/GlobalISel/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/CodeGen/GlobalISel/Android.mk	2021-04-19 01:45:01.134349066 +0000
@@ -0,0 +1,55 @@
+LOCAL_PATH := $(call my-dir)
+
+codegen_asmprinter_SRC_FILES := \
+  CSEInfo.cpp   \
+  CSEMIRBuilder.cpp  \
+  CallLowering.cpp \
+  Combiner.cpp \
+  CombinerHelper.cpp \
+  GISelChangeObserver.cpp \
+  GlobalISel.cpp \
+  InstructionSelect.cpp \
+  InstructionSelector.cpp \
+  IRTranslator.cpp \
+  LegalityPredicates.cpp \
+  LegalizeMutations.cpp \
+  Legalizer.cpp \
+  LegalizerHelper.cpp \
+  LegalizerInfo.cpp \
+  Localizer.cpp \
+  MachineIRBuilder.cpp \
+  RegBankSelect.cpp \
+  RegisterBank.cpp \
+  RegisterBankInfo.cpp \
+  Utils.cpp
+
+
+
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_asmprinter_SRC_FILES)
+LOCAL_MODULE:= libLLVM70GlobalISel
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_asmprinter_SRC_FILES)
+LOCAL_MODULE:= libLLVM70GlobalISel
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/CodeGen/MIRParser/Android.mk b/lib/CodeGen/MIRParser/Android.mk
--- a/lib/CodeGen/MIRParser/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/CodeGen/MIRParser/Android.mk	2021-04-19 01:45:01.138349066 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH:= $(call my-dir)
+
+MIRParser_SRC_FILES := \
+  MILexer.cpp          \
+  MIParser.cpp         \
+  MIRParser.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(MIRParser_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MIRParser
+
+LOCAL_MODULE_TAGS := optional
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(MIRParser_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MIRParser
+
+LOCAL_MODULE_TAGS := optional
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/CodeGen/SelectionDAG/Android.mk b/lib/CodeGen/SelectionDAG/Android.mk
--- a/lib/CodeGen/SelectionDAG/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/CodeGen/SelectionDAG/Android.mk	2021-04-19 01:45:01.158349065 +0000
@@ -0,0 +1,58 @@
+LOCAL_PATH:= $(call my-dir)
+
+codegen_selectiondag_SRC_FILES := \
+  DAGCombiner.cpp                 \
+  FastISel.cpp                    \
+  FunctionLoweringInfo.cpp        \
+  InstrEmitter.cpp                \
+  LegalizeDAG.cpp                 \
+  LegalizeFloatTypes.cpp          \
+  LegalizeIntegerTypes.cpp        \
+  LegalizeTypes.cpp               \
+  LegalizeTypesGeneric.cpp        \
+  LegalizeVectorOps.cpp           \
+  LegalizeVectorTypes.cpp         \
+  ResourcePriorityQueue.cpp       \
+  ScheduleDAGFast.cpp             \
+  ScheduleDAGRRList.cpp           \
+  ScheduleDAGSDNodes.cpp          \
+  ScheduleDAGVLIW.cpp             \
+  SelectionDAGBuilder.cpp         \
+  SelectionDAG.cpp                \
+  SelectionDAGAddressAnalysis.cpp \
+  SelectionDAGDumper.cpp          \
+  SelectionDAGISel.cpp            \
+  SelectionDAGPrinter.cpp         \
+  SelectionDAGTargetInfo.cpp      \
+  StatepointLowering.cpp          \
+  TargetLowering.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_selectiondag_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70SelectionDAG
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(codegen_selectiondag_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70SelectionDAG
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/DebugInfo/CodeView/Android.mk b/lib/DebugInfo/CodeView/Android.mk
--- a/lib/DebugInfo/CodeView/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/DebugInfo/CodeView/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,69 @@
+LOCAL_PATH:= $(call my-dir)
+
+debuginfo_codeview_SRC_FILES :=   \
+  AppendingTypeTableBuilder.cpp \
+  CodeViewError.cpp \
+  CodeViewRecordIO.cpp \
+  ContinuationRecordBuilder.cpp \
+  CVSymbolVisitor.cpp \
+  CVTypeVisitor.cpp \
+  DebugChecksumsSubsection.cpp \
+  DebugCrossExSubsection.cpp \
+  DebugCrossImpSubsection.cpp \
+  DebugFrameDataSubsection.cpp \
+  DebugInlineeLinesSubsection.cpp \
+  DebugLinesSubsection.cpp \
+  DebugStringTableSubsection.cpp \
+  DebugSubsection.cpp \
+  DebugSubsectionRecord.cpp \
+  DebugSubsectionVisitor.cpp \
+  DebugSymbolRVASubsection.cpp \
+  DebugSymbolsSubsection.cpp \
+  EnumTables.cpp \
+  Formatters.cpp \
+  GlobalTypeTableBuilder.cpp \
+  LazyRandomTypeCollection.cpp \
+  Line.cpp \
+  MergingTypeTableBuilder.cpp \
+  RecordName.cpp \
+  RecordSerialization.cpp \
+  SimpleTypeSerializer.cpp \
+  StringsAndChecksums.cpp \
+  SymbolDumper.cpp \
+  SymbolRecordHelpers.cpp \
+  SymbolRecordMapping.cpp \
+  SymbolSerializer.cpp \
+  TypeDumpVisitor.cpp \
+  TypeHashing.cpp \
+  TypeIndex.cpp \
+  TypeIndexDiscovery.cpp \
+  TypeRecordHelpers.cpp \
+  TypeRecordMapping.cpp \
+  TypeStreamMerger.cpp \
+  TypeTableCollection.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(debuginfo_codeview_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoCodeView
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(debuginfo_codeview_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoCodeView
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/DebugInfo/CodeView/DebugSubsection.cpp b/lib/DebugInfo/CodeView/DebugSubsection.cpp
--- a/lib/DebugInfo/CodeView/DebugSubsection.cpp	2021-04-17 09:25:10.524736934 +0000
+++ b/lib/DebugInfo/CodeView/DebugSubsection.cpp	2021-04-19 01:45:01.162349064 +0000
@@ -10,6 +10,8 @@
 
 using namespace llvm::codeview;
 
+DebugSubsectionRef::DebugSubsectionRef(DebugSubsectionKind Kind) : Kind(Kind) {}
 DebugSubsectionRef::~DebugSubsectionRef() {}
 
+DebugSubsection::DebugSubsection(DebugSubsectionKind Kind) : Kind(Kind) {}
 DebugSubsection::~DebugSubsection() {}
diff -Nurp a/lib/DebugInfo/DWARF/Android.mk b/lib/DebugInfo/DWARF/Android.mk
--- a/lib/DebugInfo/DWARF/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/DebugInfo/DWARF/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,62 @@
+LOCAL_PATH:= $(call my-dir)
+
+debuginfo_dwarf_SRC_FILES :=       \
+  DWARFAbbreviationDeclaration.cpp \
+  DWARFAcceleratorTable.cpp \
+  DWARFAddressRange.cpp \
+  DWARFCompileUnit.cpp \
+  DWARFContext.cpp \
+  DWARFDataExtractor.cpp \
+  DWARFDebugAbbrev.cpp \
+  DWARFDebugAddr.cpp \
+  DWARFDebugAranges.cpp \
+  DWARFDebugArangeSet.cpp \
+  DWARFDebugFrame.cpp \
+  DWARFDebugInfoEntry.cpp \
+  DWARFDebugLine.cpp \
+  DWARFDebugLoc.cpp \
+  DWARFDebugMacro.cpp \
+  DWARFDebugPubTable.cpp \
+  DWARFDebugRangeList.cpp \
+  DWARFDebugRnglists.cpp \
+  DWARFDie.cpp \
+  DWARFExpression.cpp \
+  DWARFFormValue.cpp \
+  DWARFGdbIndex.cpp \
+  DWARFListTable.cpp \
+  DWARFTypeUnit.cpp \
+  DWARFUnit.cpp \
+  DWARFUnitIndex.cpp \
+  DWARFVerifier.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(debuginfo_dwarf_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoDWARF
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(debuginfo_dwarf_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoDWARF
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/DebugInfo/MSF/Android.mk b/lib/DebugInfo/MSF/Android.mk
--- a/lib/DebugInfo/MSF/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/DebugInfo/MSF/Android.mk	2021-04-19 01:45:01.170349064 +0000
@@ -0,0 +1,40 @@
+LOCAL_PATH:= $(call my-dir)
+
+# No dia support
+debuginfo_msf_SRC_FILES := \
+  MappedBlockStream.cpp \
+  MSFBuilder.cpp        \
+  MSFCommon.cpp         \
+  MSFError.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(debuginfo_msf_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoMSF
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(debuginfo_msf_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoMSF
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/DebugInfo/PDB/Android.mk b/lib/DebugInfo/PDB/Android.mk
--- a/lib/DebugInfo/PDB/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/DebugInfo/PDB/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,119 @@
+LOCAL_PATH:= $(call my-dir)
+
+# No dia support
+debuginfo_pdb_SRC_FILES :=      \
+  GenericError.cpp \
+  IPDBSourceFile.cpp \
+  PDBContext.cpp \
+  PDB.cpp \
+  PDBExtras.cpp \
+  PDBInterfaceAnchors.cpp \
+  PDBSymbolAnnotation.cpp \
+  PDBSymbolBlock.cpp \
+  PDBSymbolCompiland.cpp \
+  PDBSymbolCompilandDetails.cpp \
+  PDBSymbolCompilandEnv.cpp \
+  PDBSymbol.cpp \
+  PDBSymbolCustom.cpp \
+  PDBSymbolData.cpp \
+  PDBSymbolExe.cpp \
+  PDBSymbolFunc.cpp \
+  PDBSymbolFuncDebugEnd.cpp \
+  PDBSymbolFuncDebugStart.cpp \
+  PDBSymbolLabel.cpp \
+  PDBSymbolPublicSymbol.cpp \
+  PDBSymbolThunk.cpp \
+  PDBSymbolTypeArray.cpp \
+  PDBSymbolTypeBaseClass.cpp \
+  PDBSymbolTypeBuiltin.cpp \
+  PDBSymbolTypeCustom.cpp \
+  PDBSymbolTypeDimension.cpp \
+  PDBSymbolTypeEnum.cpp \
+  PDBSymbolTypeFriend.cpp \
+  PDBSymbolTypeFunctionArg.cpp \
+  PDBSymbolTypeFunctionSig.cpp \
+  PDBSymbolTypeManaged.cpp \
+  PDBSymbolTypePointer.cpp \
+  PDBSymbolTypeTypedef.cpp \
+  PDBSymbolTypeUDT.cpp \
+  PDBSymbolTypeVTable.cpp \
+  PDBSymbolTypeVTableShape.cpp \
+  PDBSymbolUnknown.cpp \
+  PDBSymbolUsingNamespace.cpp \
+  PDBSymDumper.cpp \
+  UDTLayout.cpp \
+  Native/DbiModuleDescriptorBuilder.cpp \
+  Native/DbiModuleDescriptor.cpp        \
+  Native/DbiModuleList.cpp              \
+  Native/DbiStreamBuilder.cpp           \
+  Native/DbiStream.cpp                  \
+  Native/EnumTables.cpp                 \
+  Native/GlobalsStream.cpp              \
+  Native/GSIStreamBuilder.cpp           \
+  Native/Hash.cpp                       \
+  Native/HashTable.cpp                  \
+  Native/InfoStreamBuilder.cpp          \
+  Native/InfoStream.cpp                 \
+  Native/InjectedSourceStream.cpp       \
+  Native/ModuleDebugStream.cpp          \
+  Native/NamedStreamMap.cpp             \
+  Native/NativeEnumGlobals.cpp          \
+  Native/NativeEnumInjectedSources.cpp  \
+  Native/NativeSymbolEnumerator.cpp     \
+  Native/NativeTypeArray.cpp            \
+  Native/NativeTypeBuiltin.cpp          \
+  Native/NativeTypeEnum.cpp             \
+  Native/NativeTypeFunctionSig.cpp      \
+  Native/NativeTypePointer.cpp          \
+  Native/NativeTypeTypedef.cpp          \
+  Native/NativeTypeUDT.cpp              \
+  Native/NativeTypeVTShape.cpp          \
+  Native/NativeCompilandSymbol.cpp      \
+  Native/NativeEnumModules.cpp          \
+  Native/NativeEnumTypes.cpp            \
+  Native/NativeExeSymbol.cpp            \
+  Native/NativeRawSymbol.cpp            \
+  Native/NativeSession.cpp              \
+  Native/PDBFileBuilder.cpp             \
+  Native/PDBFile.cpp                    \
+  Native/PDBStringTableBuilder.cpp      \
+  Native/PDBStringTable.cpp             \
+  Native/PublicsStream.cpp              \
+  Native/SymbolCache.cpp                \
+  Native/RawError.cpp                   \
+  Native/SymbolStream.cpp               \
+  Native/TpiHashing.cpp                 \
+  Native/TpiStreamBuilder.cpp           \
+  Native/TpiStream.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 0
+
+LOCAL_SRC_FILES := $(debuginfo_pdb_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoPDB
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 0
+
+LOCAL_SRC_FILES := $(debuginfo_pdb_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70DebugInfoPDB
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/DebugInfo/Symbolize/Android.mk b/lib/DebugInfo/Symbolize/Android.mk
--- a/lib/DebugInfo/Symbolize/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/DebugInfo/Symbolize/Android.mk	2021-04-19 01:45:01.186349063 +0000
@@ -0,0 +1,34 @@
+LOCAL_PATH:= $(call my-dir)
+
+debuginfo_symbolize_SRC_FILES := \
+  DIPrinter.cpp \
+  SymbolizableObjectFile.cpp \
+  Symbolize.cpp \
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(debuginfo_symbolize_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Symbolize
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(debuginfo_symbolize_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Symbolize
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Demangle/Android.mk b/lib/Demangle/Android.mk
--- a/lib/Demangle/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Demangle/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,30 @@
+LOCAL_PATH:= $(call my-dir)
+
+demangle70_SRC_FILES := \
+  Demangle.cpp          \
+  ItaniumDemangle.cpp   \
+  MicrosoftDemangle.cpp \
+  MicrosoftDemangleNodes.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Demangle
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(demangle70_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Demangle
+LOCAL_SRC_FILES := $(demangle70_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ExecutionEngine/Android.mk b/lib/ExecutionEngine/Android.mk
--- a/lib/ExecutionEngine/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ExecutionEngine/Android.mk	2021-04-19 01:45:01.186349063 +0000
@@ -0,0 +1,33 @@
+LOCAL_PATH:= $(call my-dir)
+
+executionengine_SRC_FILES := \
+	ExecutionEngineBindings.cpp \
+	ExecutionEngine.cpp \
+	GDBRegistrationListener.cpp \
+	SectionMemoryManager.cpp \
+	TargetSelect.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70ExecutionEngine
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(executionengine_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70ExecutionEngine
+LOCAL_SRC_FILES := $(executionengine_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ExecutionEngine/Interpreter/Android.mk b/lib/ExecutionEngine/Interpreter/Android.mk
--- a/lib/ExecutionEngine/Interpreter/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ExecutionEngine/Interpreter/Android.mk	2021-04-19 01:45:01.190349063 +0000
@@ -0,0 +1,34 @@
+LOCAL_PATH:= $(call my-dir)
+
+interpreter_SRC_FILES := \
+  Execution.cpp         \
+  ExternalFunctions.cpp \
+  Interpreter.cpp       \
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(interpreter_SRC_FILES)
+LOCAL_MODULE := libLLVM70Interpreter
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(interpreter_SRC_FILES)
+LOCAL_MODULE := libLLVM70Interpreter
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ExecutionEngine/JITLink/Android.mk b/lib/ExecutionEngine/JITLink/Android.mk
--- a/lib/ExecutionEngine/JITLink/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ExecutionEngine/JITLink/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,40 @@
+LOCAL_PATH:= $(call my-dir)
+
+ExecutionEngine_JITLink_SRC_FILES := \
+  JITLink.cpp \
+  JITLinkGeneric.cpp \
+  JITLinkMemoryManager.cpp \
+  EHFrameSupport.cpp \
+  MachO.cpp \
+  MachO_x86_64.cpp \
+  MachOAtomGraphBuilder.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(ExecutionEngine_JITLink_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70JITLink
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(ExecutionEngine_JITLink_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70JITLink
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ExecutionEngine/MCJIT/Android.mk b/lib/ExecutionEngine/MCJIT/Android.mk
--- a/lib/ExecutionEngine/MCJIT/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ExecutionEngine/MCJIT/Android.mk	2021-04-19 01:45:01.194349063 +0000
@@ -0,0 +1,30 @@
+LOCAL_PATH:= $(call my-dir)
+
+mcjit_SRC_FILES := \
+  MCJIT.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(mcjit_SRC_FILES)
+LOCAL_MODULE := libLLVM70MCJIT
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(mcjit_SRC_FILES)
+LOCAL_MODULE := libLLVM70MCJIT
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ExecutionEngine/Orc/Android.mk b/lib/ExecutionEngine/Orc/Android.mk
--- a/lib/ExecutionEngine/Orc/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ExecutionEngine/Orc/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,53 @@
+LOCAL_PATH:= $(call my-dir)
+
+orcjit_SRC_FILES :=            \
+  CompileOnDemandLayer.cpp \
+  CompileUtils.cpp \
+  Core.cpp \
+  ExecutionUtils.cpp \
+  IndirectionUtils.cpp \
+  IRCompileLayer.cpp \
+  IRTransformLayer.cpp \
+  JITTargetMachineBuilder.cpp \
+  Layer.cpp \
+  LazyReexports.cpp \
+  Legacy.cpp \
+  LLJIT.cpp \
+  NullResolver.cpp \
+  ObjectLinkingLayer.cpp \
+  ObjectTransformLayer.cpp \
+  OrcABISupport.cpp \
+  OrcCBindings.cpp \
+  OrcError.cpp \
+  OrcMCJITReplacement.cpp \
+  RPCUtils.cpp \
+  RTDyldObjectLinkingLayer.cpp \
+  ThreadSafeModule.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(orcjit_SRC_FILES)
+LOCAL_MODULE := libLLVM70OrcJIT
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(orcjit_SRC_FILES)
+LOCAL_MODULE := libLLVM70OrcJIT
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ExecutionEngine/RuntimeDyld/Android.mk b/lib/ExecutionEngine/RuntimeDyld/Android.mk
--- a/lib/ExecutionEngine/RuntimeDyld/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ExecutionEngine/RuntimeDyld/Android.mk	2021-04-19 01:45:01.202349063 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH:= $(call my-dir)
+
+runtimedyld_SRC_FILES :=  \
+  JITSymbol.cpp           \
+  RTDyldMemoryManager.cpp \
+  RuntimeDyldChecker.cpp  \
+  RuntimeDyldCOFF.cpp     \
+  RuntimeDyld.cpp         \
+  RuntimeDyldELF.cpp      \
+  RuntimeDyldMachO.cpp    \
+  Targets/RuntimeDyldELFMips.cpp
+
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(runtimedyld_SRC_FILES)
+LOCAL_MODULE := libLLVM70RuntimeDyld
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(runtimedyld_SRC_FILES)
+LOCAL_MODULE := libLLVM70RuntimeDyld
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/IR/Android.mk b/lib/IR/Android.mk
--- a/lib/IR/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/IR/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,106 @@
+LOCAL_PATH:= $(call my-dir)
+
+vmcore_codegen_TBLGEN_TABLES := \
+  AttributesCompatFunc.inc
+
+vmcore_SRC_FILES :=       \
+  AbstractCallSite.cpp \
+  AsmWriter.cpp \
+  Attributes.cpp \
+  AutoUpgrade.cpp \
+  BasicBlock.cpp \
+  Comdat.cpp \
+  ConstantFold.cpp \
+  ConstantRange.cpp \
+  Constants.cpp \
+  Core.cpp \
+  DataLayout.cpp \
+  DebugInfo.cpp \
+  DebugInfoMetadata.cpp \
+  DebugLoc.cpp \
+  DiagnosticHandler.cpp \
+  DiagnosticInfo.cpp \
+  DiagnosticPrinter.cpp \
+  DIBuilder.cpp \
+  Dominators.cpp \
+  Function.cpp \
+  Globals.cpp \
+  GVMaterializer.cpp \
+  InlineAsm.cpp \
+  Instruction.cpp \
+  Instructions.cpp \
+  IntrinsicInst.cpp \
+  IRBuilder.cpp \
+  IRPrintingPasses.cpp \
+  LegacyPassManager.cpp \
+  LLVMContext.cpp \
+  LLVMContextImpl.cpp \
+  Mangler.cpp \
+  MDBuilder.cpp \
+  Metadata.cpp \
+  Module.cpp \
+  ModuleSummaryIndex.cpp \
+  Operator.cpp \
+  OptBisect.cpp \
+  Pass.cpp \
+  PassInstrumentation.cpp \
+  PassManager.cpp \
+  PassRegistry.cpp \
+  PassTimingInfo.cpp \
+  ProfileSummary.cpp \
+  RemarkStreamer.cpp \
+  SafepointIRVerifier.cpp \
+  Statepoint.cpp \
+  Type.cpp \
+  TypeFinder.cpp \
+  Use.cpp \
+  User.cpp \
+  Value.cpp \
+  ValueSymbolTable.cpp \
+  Verifier.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(vmcore_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Core
+
+LOCAL_MODULE_HOST_OS := linux
+
+TBLGEN_TABLES := $(vmcore_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := AttributesCompatFunc.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(vmcore_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Core
+LOCAL_MODULE_CLASS := STATIC_LIBRARIES
+LOCAL_EXPORT_C_INCLUDE_DIRS := $(call local-generated-sources-dir)
+
+TBLGEN_TABLES := $(vmcore_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := AttributesCompatFunc.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/IRReader/Android.mk b/lib/IRReader/Android.mk
--- a/lib/IRReader/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/IRReader/Android.mk	2021-04-19 01:45:01.218349062 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH:= $(call my-dir)
+
+irreader_SRC_FILES := \
+  IRReader.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(irreader_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70IRReader
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(irreader_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70IRReader
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Linker/Android.mk b/lib/Linker/Android.mk
--- a/lib/Linker/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Linker/Android.mk	2021-04-19 01:45:01.222349062 +0000
@@ -0,0 +1,34 @@
+LOCAL_PATH:= $(call my-dir)
+
+linker_SRC_FILES := \
+  IRMover.cpp       \
+  LinkModules.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(linker_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Linker
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(linker_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Linker
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/LTO/Android.mk b/lib/LTO/Android.mk
--- a/lib/LTO/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/LTO/Android.mk	2021-04-19 01:45:01.222349062 +0000
@@ -0,0 +1,44 @@
+LOCAL_PATH:= $(call my-dir)
+
+lto_SRC_FILES :=           \
+  Caching.cpp              \
+  LTOBackend.cpp           \
+  LTOCodeGenerator.cpp     \
+  SummaryBasedOptimizations.cpp \
+  LTO.cpp                  \
+  LTOModule.cpp            \
+  ThinLTOCodeGenerator.cpp \
+  UpdateCompilerUsed.cpp
+
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(lto_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70LTO
+
+LOCAL_MODULE_TAGS := optional
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(lto_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70LTO
+
+LOCAL_MODULE_TAGS := optional
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/MC/Android.mk b/lib/MC/Android.mk
--- a/lib/MC/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/MC/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,90 @@
+LOCAL_PATH:= $(call my-dir)
+
+mc_SRC_FILES :=                \
+  ConstantPools.cpp \
+  ELFObjectWriter.cpp \
+  MachObjectWriter.cpp \
+  MCAsmBackend.cpp \
+  MCAsmInfoCOFF.cpp \
+  MCAsmInfo.cpp \
+  MCAsmInfoDarwin.cpp \
+  MCAsmInfoELF.cpp \
+  MCAsmInfoWasm.cpp \
+  MCAsmInfoXCOFF.cpp \
+  MCAsmMacro.cpp \
+  MCAsmStreamer.cpp \
+  MCAssembler.cpp \
+  MCCodeEmitter.cpp \
+  MCCodePadder.cpp \
+  MCCodeView.cpp \
+  MCContext.cpp \
+  MCDwarf.cpp \
+  MCELFObjectTargetWriter.cpp \
+  MCELFStreamer.cpp \
+  MCExpr.cpp \
+  MCFragment.cpp \
+  MCInst.cpp \
+  MCInstPrinter.cpp \
+  MCInstrAnalysis.cpp \
+  MCInstrDesc.cpp \
+  MCLabel.cpp \
+  MCLinkerOptimizationHint.cpp \
+  MCMachObjectTargetWriter.cpp \
+  MCMachOStreamer.cpp \
+  MCNullStreamer.cpp \
+  MCObjectFileInfo.cpp \
+  MCObjectStreamer.cpp \
+  MCObjectWriter.cpp \
+  MCRegisterInfo.cpp \
+  MCSchedule.cpp \
+  MCSectionCOFF.cpp \
+  MCSection.cpp \
+  MCSectionELF.cpp \
+  MCSectionMachO.cpp \
+  MCSectionWasm.cpp \
+  MCSectionXCOFF.cpp \
+  MCStreamer.cpp \
+  MCSubtargetInfo.cpp \
+  MCSymbol.cpp \
+  MCSymbolELF.cpp \
+  MCTargetOptions.cpp \
+  MCValue.cpp \
+  MCWasmObjectTargetWriter.cpp \
+  MCWasmStreamer.cpp \
+  MCWin64EH.cpp \
+  MCWinCOFFStreamer.cpp \
+  MCWinEH.cpp \
+  MCXCOFFObjectTargetWriter.cpp \
+  MCXCOFFStreamer.cpp \
+  StringTableBuilder.cpp \
+  SubtargetFeature.cpp \
+  WasmObjectWriter.cpp \
+  WinCOFFObjectWriter.cpp \
+  XCOFFObjectWriter.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(mc_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MC
+
+LOCAL_MODULE_HOST_OS := linux
+
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(mc_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MC
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/MC/MCDisassembler/Android.mk b/lib/MC/MCDisassembler/Android.mk
--- a/lib/MC/MCDisassembler/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/MC/MCDisassembler/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,37 @@
+LOCAL_PATH:= $(call my-dir)
+
+mc_disassembler_SRC_FILES := \
+  Disassembler.cpp \
+  MCDisassembler.cpp \
+  MCExternalSymbolizer.cpp \
+  MCRelocationInfo.cpp \
+  MCSymbolizer.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(mc_disassembler_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MCDisassembler
+
+LOCAL_MODULE_HOST_OS := linux
+
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(mc_disassembler_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MCDisassembler
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/MC/MCParser/Android.mk b/lib/MC/MCParser/Android.mk
--- a/lib/MC/MCParser/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/MC/MCParser/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,39 @@
+LOCAL_PATH:= $(call my-dir)
+
+mc_parser_SRC_FILES :=     \
+  AsmLexer.cpp \
+  AsmParser.cpp \
+  COFFAsmParser.cpp \
+  DarwinAsmParser.cpp \
+  ELFAsmParser.cpp \
+  MCAsmLexer.cpp \
+  MCAsmParser.cpp \
+  MCAsmParserExtension.cpp \
+  MCTargetAsmParser.cpp \
+  WasmAsmParser.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(mc_parser_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MCParser
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(mc_parser_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70MCParser
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Object/Android.mk b/lib/Object/Android.mk
--- a/lib/Object/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Object/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,58 @@
+LOCAL_PATH := $(call my-dir)
+
+object_SRC_FILES :=        \
+  Archive.cpp \
+  ArchiveWriter.cpp \
+  Binary.cpp \
+  COFFImportFile.cpp \
+  COFFModuleDefinition.cpp \
+  COFFObjectFile.cpp \
+  Decompressor.cpp \
+  ELF.cpp \
+  ELFObjectFile.cpp \
+  Error.cpp \
+  IRObjectFile.cpp \
+  IRSymtab.cpp \
+  MachOObjectFile.cpp \
+  MachOUniversal.cpp \
+  Minidump.cpp \
+  ModuleSymbolTable.cpp \
+  Object.cpp \
+  ObjectFile.cpp \
+  RecordStreamer.cpp \
+  RelocationResolver.cpp \
+  SymbolicFile.cpp \
+  SymbolSize.cpp \
+  WasmObjectFile.cpp \
+  WindowsMachineFlag.cpp \
+  WindowsResource.cpp \
+  XCOFFObjectFile.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Object
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(object_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Object
+
+LOCAL_SRC_FILES := $(object_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Option/Android.mk b/lib/Option/Android.mk
--- a/lib/Option/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Option/Android.mk	2021-04-19 01:45:01.250349061 +0000
@@ -0,0 +1,40 @@
+LOCAL_PATH:= $(call my-dir)
+
+option_SRC_FILES := \
+    Arg.cpp \
+    ArgList.cpp \
+    Option.cpp \
+    OptTable.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+# FIXME: This only requires RTTI because tblgen uses it.  Fix that.
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(option_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Option
+
+LOCAL_CFLAGS := -D__android__
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(option_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Option
+
+LOCAL_CFLAGS := -D__android__
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Passes/Android.mk b/lib/Passes/Android.mk
--- a/lib/Passes/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Passes/Android.mk	2021-04-19 01:45:01.250349061 +0000
@@ -0,0 +1,32 @@
+LOCAL_PATH:= $(call my-dir)
+
+passes_SRC_FILES := \
+  PassBuilder.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Passes
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := $(passes_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Passes
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := $(passes_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ProfileData/Android.mk b/lib/ProfileData/Android.mk
--- a/lib/ProfileData/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ProfileData/Android.mk	2021-04-19 01:45:01.254349060 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH:= $(call my-dir)
+
+profiledata_SRC_FILES :=    \
+  GCOV.cpp                  \
+  InstrProf.cpp             \
+  InstrProfReader.cpp       \
+  InstrProfWriter.cpp       \
+  ProfileSummaryBuilder.cpp \
+  SampleProf.cpp            \
+  SampleProfReader.cpp      \
+  SampleProfWriter.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ProfileData
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(profiledata_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ProfileData
+LOCAL_SRC_FILES := $(profiledata_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/ProfileData/Coverage/Android.mk b/lib/ProfileData/Coverage/Android.mk
--- a/lib/ProfileData/Coverage/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ProfileData/Coverage/Android.mk	2021-04-19 01:45:01.254349060 +0000
@@ -0,0 +1,33 @@
+LOCAL_PATH:= $(call my-dir)
+
+profiledata_coverage_SRC_FILES := \
+  CoverageMapping.cpp             \
+  CoverageMappingReader.cpp       \
+  CoverageMappingWriter.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ProfileDataCoverage
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(profiledata_coverage_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ProfileDataCoverage
+LOCAL_SRC_FILES := $(profiledata_coverage_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Remarks/Android.mk b/lib/Remarks/Android.mk
--- a/lib/Remarks/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Remarks/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,39 @@
+LOCAL_PATH:= $(call my-dir)
+
+Remarks_SRC_FILES := \
+  Remark.cpp  \
+  RemarkFormat.cpp  \
+  RemarkParser.cpp  \
+  RemarkStringTable.cpp  \
+  YAMLRemarkParser.cpp   \
+  YAMLRemarkSerializer.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(Remarks_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Remarks
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(Remarks_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Remarks
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Support/Android.mk b/lib/Support/Android.mk
--- a/lib/Support/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Support/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,164 @@
+LOCAL_PATH:= $(call my-dir)
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+
+support_SRC_FILES :=         \
+  AArch64TargetParser.cpp \
+  Allocator.cpp \
+  AMDGPUMetadata.cpp \
+  APFloat.cpp \
+  APInt.cpp \
+  APSInt.cpp \
+  ARMAttributeParser.cpp \
+  ARMBuildAttrs.cpp \
+  ARMTargetParser.cpp \
+  ARMWinEH.cpp \
+  Atomic.cpp \
+  BinaryStreamError.cpp \
+  BinaryStreamReader.cpp \
+  BinaryStreamRef.cpp \
+  BinaryStreamWriter.cpp \
+  BlockFrequency.cpp \
+  BranchProbability.cpp \
+  BuryPointer.cpp \
+  CachePruning.cpp \
+  Chrono.cpp \
+  circular_raw_ostream.cpp \
+  CodeGenCoverage.cpp \
+  COM.cpp \
+  CommandLine.cpp \
+  Compression.cpp \
+  ConvertUTF.cpp \
+  ConvertUTFWrapper.cpp \
+  CrashRecoveryContext.cpp \
+  CRC.cpp \
+  DAGDeltaAlgorithm.cpp \
+  DataExtractor.cpp \
+  DebugCounter.cpp \
+  Debug.cpp \
+  DeltaAlgorithm.cpp \
+  DJB.cpp \
+  DynamicLibrary.cpp \
+  Errno.cpp \
+  Error.cpp \
+  ErrorHandling.cpp \
+  FileCheck.cpp \
+  FileOutputBuffer.cpp \
+  FileUtilities.cpp \
+  FoldingSet.cpp \
+  FormattedStream.cpp \
+  FormatVariadic.cpp \
+  GlobPattern.cpp \
+  GraphWriter.cpp \
+  Hashing.cpp \
+  Host.cpp \
+  InitLLVM.cpp \
+  IntEqClasses.cpp \
+  IntervalMap.cpp \
+  ItaniumManglingCanonicalizer.cpp \
+  JamCRC.cpp \
+  JSON.cpp \
+  KnownBits.cpp \
+  LEB128.cpp \
+  LineIterator.cpp \
+  Locale.cpp \
+  LockFileManager.cpp \
+  LowLevelType.cpp \
+  ManagedStatic.cpp \
+  MathExtras.cpp \
+  MD5.cpp \
+  MemoryBuffer.cpp \
+  Memory.cpp \
+  Mutex.cpp \
+  NativeFormatting.cpp \
+  Optional.cpp \
+  Options.cpp \
+  Parallel.cpp \
+  Path.cpp \
+  PluginLoader.cpp \
+  PrettyStackTrace.cpp \
+  Process.cpp \
+  Program.cpp \
+  RandomNumberGenerator.cpp \
+  raw_os_ostream.cpp \
+  raw_ostream.cpp \
+  Regex.cpp \
+  RWMutex.cpp \
+  ScaledNumber.cpp \
+  ScopedPrinter.cpp \
+  SHA1.cpp \
+  Signals.cpp \
+  Signposts.cpp \
+  SmallPtrSet.cpp \
+  SmallVector.cpp \
+  SourceMgr.cpp \
+  SpecialCaseList.cpp \
+  Statistic.cpp \
+  StringExtras.cpp \
+  StringMap.cpp \
+  StringPool.cpp \
+  StringRef.cpp \
+  StringSaver.cpp \
+  SymbolRemappingReader.cpp \
+  SystemUtils.cpp \
+  TargetParser.cpp \
+  TargetRegistry.cpp \
+  TarWriter.cpp \
+  Threading.cpp \
+  ThreadLocal.cpp \
+  ThreadPool.cpp \
+  TimeProfiler.cpp \
+  Timer.cpp \
+  ToolOutputFile.cpp \
+  TrigramIndex.cpp \
+  Triple.cpp \
+  Twine.cpp \
+  UnicodeCaseFold.cpp \
+  Unicode.cpp \
+  Valgrind.cpp \
+  VersionTuple.cpp \
+  VirtualFileSystem.cpp \
+  Watchdog.cpp \
+  WithColor.cpp \
+  xxhash.cpp \
+  YAMLParser.cpp \
+  YAMLTraits.cpp \
+  Z3Solver.cpp \
+  regcomp.c  \
+  regerror.c  \
+  regexec.c  \
+  regfree.c  \
+  regstrlcpy.c
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+# FIXME: This only requires RTTI because tblgen uses it.  Fix that.
+REQUIRES_RTTI := 1
+
+LOCAL_SRC_FILES := $(support_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Support
+
+LOCAL_CFLAGS := -D__android__
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(support_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Support
+
+LOCAL_CFLAGS := -D__android__
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Support/Process.cpp b/lib/Support/Process.cpp
--- a/lib/Support/Process.cpp	2021-04-17 09:25:10.532736933 +0000
+++ b/lib/Support/Process.cpp	2021-04-19 01:45:01.278349059 +0000
@@ -84,7 +84,7 @@ static const char colorcodes[2][2][8][10
 
 // A CMake option controls wheter we emit core dumps by default. An application
 // may disable core dumps by calling Process::PreventCoreFiles().
-static bool coreFilesPrevented = !LLVM_ENABLE_CRASH_DUMPS;
+static bool coreFilesPrevented = false;
 
 bool Process::AreCoreFilesPrevented() { return coreFilesPrevented; }
 
diff -Nurp a/lib/TableGen/Android.mk b/lib/TableGen/Android.mk
--- a/lib/TableGen/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/TableGen/Android.mk	2021-04-19 01:45:01.286349059 +0000
@@ -0,0 +1,31 @@
+LOCAL_PATH:= $(call my-dir)
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+
+libtablegen_SRC_FILES := \
+  Error.cpp           \
+  JSONBackend.cpp     \
+  Main.cpp            \
+  Record.cpp          \
+  SetTheory.cpp       \
+  StringMatcher.cpp   \
+  TableGenBackend.cpp \
+  TGLexer.cpp         \
+  TGParser.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
+
+LOCAL_SRC_FILES := $(libtablegen_SRC_FILES)
+LOCAL_MODULE:= libLLVM70TableGen
+
+LOCAL_MODULE_TAGS := optional
+
+REQUIRES_EH := 1
+REQUIRES_RTTI := 1
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
diff -Nurp a/lib/Target/AArch64/Android.mk b/lib/Target/AArch64/Android.mk
--- a/lib/Target/AArch64/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AArch64/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1,106 @@
+LOCAL_PATH := $(call my-dir)
+
+aarch64_codegen_TBLGEN_TABLES :=   \
+  AArch64GenRegisterInfo.inc       \
+  AArch64GenInstrInfo.inc          \
+  AArch64GenAsmWriter.inc          \
+  AArch64GenAsmWriter1.inc         \
+  AArch64GenDAGISel.inc            \
+  AArch64GenCallingConv.inc        \
+  AArch64GenAsmMatcher.inc         \
+  AArch64GenSubtargetInfo.inc      \
+  AArch64GenMCCodeEmitter.inc      \
+  AArch64GenFastISel.inc           \
+  AArch64GenDisassemblerTables.inc \
+  AArch64GenMCPseudoLowering.inc   \
+  AArch64GenSystemOperands.inc     \
+  AArch64GenRegisterBank.inc       \
+  AArch64GenGlobalISel.inc         \
+  AArch64GenExegesis.inc
+
+aarch64_codegen_SRC_FILES :=             \
+  AArch64A53Fix835769.cpp \
+  AArch64A57FPLoadBalancing.cpp \
+  AArch64AdvSIMDScalarPass.cpp \
+  AArch64AsmPrinter.cpp \
+  AArch64BranchTargets.cpp \
+  AArch64CallingConvention.cpp \
+  AArch64CallLowering.cpp \
+  AArch64CleanupLocalDynamicTLSPass.cpp \
+  AArch64CollectLOH.cpp \
+  AArch64CompressJumpTables.cpp \
+  AArch64CondBrTuning.cpp \
+  AArch64ConditionalCompares.cpp \
+  AArch64ConditionOptimizer.cpp \
+  AArch64DeadRegisterDefinitionsPass.cpp \
+  AArch64ExpandImm.cpp \
+  AArch64ExpandPseudoInsts.cpp \
+  AArch64FalkorHWPFFix.cpp \
+  AArch64FastISel.cpp \
+  AArch64FrameLowering.cpp \
+  AArch64InstrInfo.cpp \
+  AArch64InstructionSelector.cpp \
+  AArch64ISelDAGToDAG.cpp \
+  AArch64ISelLowering.cpp \
+  AArch64LegalizerInfo.cpp \
+  AArch64LoadStoreOptimizer.cpp \
+  AArch64MacroFusion.cpp \
+  AArch64MCInstLower.cpp \
+  AArch64PBQPRegAlloc.cpp \
+  AArch64PreLegalizerCombiner.cpp \
+  AArch64PromoteConstant.cpp \
+  AArch64RedundantCopyElimination.cpp \
+  AArch64RegisterBankInfo.cpp \
+  AArch64RegisterInfo.cpp \
+  AArch64SelectionDAGInfo.cpp \
+  AArch64SIMDInstrOpt.cpp \
+  AArch64SpeculationHardening.cpp \
+  AArch64StackTagging.cpp \
+  AArch64StorePairSuppress.cpp \
+  AArch64Subtarget.cpp \
+  AArch64TargetMachine.cpp \
+  AArch64TargetObjectFile.cpp \
+  AArch64TargetTransformInfo.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70AArch64CodeGen
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(aarch64_codegen_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/MCTargetDesc
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+TBLGEN_TABLES := $(aarch64_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70AArch64CodeGen
+
+LOCAL_SRC_FILES := $(aarch64_codegen_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/MCTargetDesc
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+TBLGEN_TABLES := $(aarch64_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AArch64/AsmParser/Android.mk b/lib/Target/AArch64/AsmParser/Android.mk
--- a/lib/Target/AArch64/AsmParser/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AArch64/AsmParser/Android.mk	2021-04-19 01:45:01.314349058 +0000
@@ -0,0 +1,60 @@
+LOCAL_PATH := $(call my-dir)
+
+#===---------------------------------------------------------------===
+# libARMAsmParser (common)
+#===---------------------------------------------------------------===
+aarch64_asm_parser_TBLGEN_TABLES := \
+  AArch64GenInstrInfo.inc           \
+  AArch64GenRegisterInfo.inc        \
+  AArch64GenAsmMatcher.inc          \
+  AArch64GenSubtargetInfo.inc       \
+  AArch64GenSystemOperands.inc
+
+aarch64_asm_parser_SRC_FILES := \
+  AArch64AsmParser.cpp
+
+#===---------------------------------------------------------------===
+# libAArch64AsmParser (host)
+#===---------------------------------------------------------------===
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70AArch64AsmParser
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(aarch64_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/..
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_asm_parser_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+
+#===---------------------------------------------------------------===
+# libAArch64AsmParser (target)
+#===---------------------------------------------------------------===
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70AArch64AsmParser
+
+LOCAL_SRC_FILES := $(aarch64_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/..
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_asm_parser_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AArch64/Disassembler/Android.mk b/lib/Target/AArch64/Disassembler/Android.mk
--- a/lib/Target/AArch64/Disassembler/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AArch64/Disassembler/Android.mk	2021-04-19 01:45:01.314349058 +0000
@@ -0,0 +1,59 @@
+LOCAL_PATH := $(call my-dir)
+
+aarch64_disassembler_TBLGEN_TABLES := \
+  AArch64GenAsmWriter.inc             \
+  AArch64GenAsmWriter1.inc            \
+  AArch64GenRegisterInfo.inc          \
+  AArch64GenSubtargetInfo.inc         \
+  AArch64GenInstrInfo.inc             \
+  AArch64GenSystemOperands.inc        \
+  AArch64GenDisassemblerTables.inc
+
+aarch64_disassembler_SRC_FILES := \
+  AArch64Disassembler.cpp         \
+  AArch64ExternalSymbolizer.cpp
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(aarch64_disassembler_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70AArch64Disassembler
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_disassembler_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(aarch64_disassembler_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70AArch64Disassembler
+
+LOCAL_MODULE_HOST_OS := linux
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_disassembler_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
diff -Nurp a/lib/Target/AArch64/InstPrinter/Android.mk b/lib/Target/AArch64/InstPrinter/Android.mk
--- a/lib/Target/AArch64/InstPrinter/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AArch64/InstPrinter/Android.mk	2021-04-19 01:45:41.786347277 +0000
@@ -0,0 +1 @@
+LOCAL_PATH := $(call my-dir)
diff -Nurp a/lib/Target/AArch64/MCTargetDesc/Android.mk b/lib/Target/AArch64/MCTargetDesc/Android.mk
--- a/lib/Target/AArch64/MCTargetDesc/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AArch64/MCTargetDesc/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,67 @@
+LOCAL_PATH := $(call my-dir)
+
+aarch64_mc_desc_TBLGEN_TABLES := \
+  AArch64GenRegisterInfo.inc     \
+  AArch64GenInstrInfo.inc        \
+  AArch64GenMCCodeEmitter.inc    \
+  AArch64GenSubtargetInfo.inc    \
+  AArch64GenSystemOperands.inc   \
+  AArch64GenAsmWriter.inc        \
+  AArch64GenAsmWriter1.inc
+
+aarch64_mc_desc_SRC_FILES :=     \
+  AArch64AsmBackend.cpp \
+  AArch64ELFObjectWriter.cpp \
+  AArch64ELFStreamer.cpp \
+  AArch64InstPrinter.cpp \
+  AArch64MachObjectWriter.cpp \
+  AArch64MCAsmInfo.cpp \
+  AArch64MCCodeEmitter.cpp \
+  AArch64MCExpr.cpp \
+  AArch64MCTargetDesc.cpp \
+  AArch64TargetStreamer.cpp \
+  AArch64WinCOFFObjectWriter.cpp \
+  AArch64WinCOFFStreamer.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70AArch64Desc
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(aarch64_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/..
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_mc_desc_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70AArch64Desc
+
+LOCAL_SRC_FILES := $(aarch64_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/..
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_mc_desc_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AArch64/TargetInfo/Android.mk b/lib/Target/AArch64/TargetInfo/Android.mk
--- a/lib/Target/AArch64/TargetInfo/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AArch64/TargetInfo/Android.mk	2021-04-19 01:45:01.318349058 +0000
@@ -0,0 +1,48 @@
+LOCAL_PATH := $(call my-dir)
+
+aarch64_target_info_TBLGEN_TABLES := \
+  AArch64GenSubtargetInfo.inc        \
+  AArch64GenRegisterInfo.inc         \
+  AArch64GenInstrInfo.inc
+
+aarch64_target_info_SRC_FILES := \
+  AArch64TargetInfo.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+TBLGEN_TABLES := $(aarch64_target_info_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := AArch64.td
+
+LOCAL_SRC_FILES := $(aarch64_target_info_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70AArch64Info
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+TBLGEN_TABLES := $(aarch64_target_info_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := AArch64.td
+
+LOCAL_SRC_FILES := $(aarch64_target_info_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70AArch64Info
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AArch64/Utils/Android.mk b/lib/Target/AArch64/Utils/Android.mk
--- a/lib/Target/AArch64/Utils/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AArch64/Utils/Android.mk	2021-04-19 01:45:01.322349057 +0000
@@ -0,0 +1,56 @@
+LOCAL_PATH := $(call my-dir)
+
+aarch64_utils_TBLGEN_TABLES :=       \
+  AArch64GenAsmWriter.inc            \
+  AArch64GenAsmWriter1.inc           \
+  AArch64GenRegisterInfo.inc         \
+  AArch64GenSubtargetInfo.inc        \
+  AArch64GenInstrInfo.inc            \
+  AArch64GenSystemOperands.inc
+
+aarch64_utils_SRC_FILES := \
+  AArch64BaseInfo.cpp
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(aarch64_utils_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70AArch64Utils
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_utils_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(aarch64_utils_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70AArch64Utils
+
+LOCAL_MODULE_HOST_OS := linux
+
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_TABLES := $(aarch64_utils_TBLGEN_TABLES)
+TBLGEN_IN_TD := AArch64.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
diff -Nurp a/lib/Target/AMDGPU/Android.mk b/lib/Target/AMDGPU/Android.mk
--- a/lib/Target/AMDGPU/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AMDGPU/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,188 @@
+LOCAL_PATH := $(call my-dir)
+
+amdgpu_codegen_TBLGEN_TABLES :=   \
+  AMDGPUGenAsmMatcher.inc         \
+  AMDGPUGenAsmWriter.inc          \
+  AMDGPUGenCallingConv.inc        \
+  AMDGPUGenDAGISel.inc            \
+  AMDGPUGenDisassemblerTables.inc \
+  AMDGPUGenInstrInfo.inc          \
+  AMDGPUGenIntrinsicEnums.inc     \
+  AMDGPUGenIntrinsicImpl.inc      \
+  AMDGPUGenMCCodeEmitter.inc      \
+  AMDGPUGenMCPseudoLowering.inc   \
+  AMDGPUGenRegisterBank.inc       \
+  AMDGPUGenRegisterInfo.inc       \
+  AMDGPUGenSearchableTables.inc   \
+  AMDGPUGenSubtargetInfo.inc
+
+amdgpu_codegen_1_TBLGEN_TABLES :=   \
+  AMDGPUGenGlobalISel.inc
+
+amdgpu_codegen_2_TBLGEN_TABLES :=   \
+  R600GenAsmWriter.inc     \
+  R600GenCallingConv.inc   \
+  R600GenDAGISel.inc       \
+  R600GenDFAPacketizer.inc \
+  R600GenInstrInfo.inc     \
+  R600GenMCCodeEmitter.inc \
+  R600GenRegisterInfo.inc  \
+  R600GenSubtargetInfo.inc
+
+amdgpu_codegen_SRC_FILES :=              \
+  AMDGPUAliasAnalysis.cpp             \
+  AMDGPUAlwaysInlinePass.cpp          \
+  AMDGPUAnnotateKernelFeatures.cpp    \
+  AMDGPUAnnotateUniformValues.cpp     \
+  AMDGPUArgumentUsageInfo.cpp         \
+  AMDGPUAsmPrinter.cpp                \
+  AMDGPUAtomicOptimizer.cpp           \
+  AMDGPUCallLowering.cpp              \
+  AMDGPUCodeGenPrepare.cpp            \
+  AMDGPUFixFunctionBitcasts.cpp       \
+  AMDGPUFrameLowering.cpp             \
+  AMDGPUHSAMetadataStreamer.cpp       \
+  AMDGPUInline.cpp                    \
+  AMDGPUInstrInfo.cpp                 \
+  AMDGPUInstructionSelector.cpp       \
+  AMDGPUISelDAGToDAG.cpp              \
+  AMDGPUISelLowering.cpp              \
+  AMDGPULegalizerInfo.cpp             \
+  AMDGPULibCalls.cpp                  \
+  AMDGPULibFunc.cpp                   \
+  AMDGPULowerIntrinsics.cpp           \
+  AMDGPULowerKernelArguments.cpp      \
+  AMDGPULowerKernelAttributes.cpp     \
+  AMDGPUMachineCFGStructurizer.cpp    \
+  AMDGPUMachineFunction.cpp           \
+  AMDGPUMachineModuleInfo.cpp         \
+  AMDGPUMacroFusion.cpp               \
+  AMDGPUMCInstLower.cpp               \
+  AMDGPUOpenCLEnqueuedBlockLowering.cpp \
+  AMDGPUPerfHintAnalysis.cpp            \
+  AMDGPUPromoteAlloca.cpp               \
+  AMDGPUPropagateAttributes.cpp         \
+  AMDGPURegisterBankInfo.cpp            \
+  AMDGPURegisterInfo.cpp                \
+  AMDGPURewriteOutArguments.cpp         \
+  AMDGPUSubtarget.cpp                   \
+  AMDGPUTargetMachine.cpp               \
+  AMDGPUTargetObjectFile.cpp            \
+  AMDGPUTargetTransformInfo.cpp        \
+  AMDGPUUnifyDivergentExitNodes.cpp   \
+  AMDGPUUnifyMetadata.cpp   \
+  AMDILCFGStructurizer.cpp   \
+  GCNDPPCombine.cpp   \
+  GCNHazardRecognizer.cpp   \
+  GCNILPSched.cpp   \
+  GCNIterativeScheduler.cpp   \
+  GCNMinRegStrategy.cpp   \
+  GCNNSAReassign.cpp   \
+  GCNRegBankReassign.cpp   \
+  GCNRegPressure.cpp   \
+  GCNSchedStrategy.cpp   \
+  R600AsmPrinter.cpp   \
+  R600ClauseMergePass.cpp   \
+  R600ControlFlowFinalizer.cpp   \
+  R600EmitClauseMarkers.cpp   \
+  R600ExpandSpecialInstrs.cpp   \
+  R600FrameLowering.cpp   \
+  R600InstrInfo.cpp   \
+  R600ISelLowering.cpp   \
+  R600MachineFunctionInfo.cpp   \
+  R600MachineScheduler.cpp   \
+  R600OpenCLImageTypeLoweringPass.cpp   \
+  R600OptimizeVectorRegisters.cpp   \
+  R600Packetizer.cpp   \
+  R600RegisterInfo.cpp   \
+  SIAddIMGInit.cpp   \
+  SIAnnotateControlFlow.cpp   \
+  SIFixSGPRCopies.cpp   \
+  SIFixupVectorISel.cpp   \
+  SIFixVGPRCopies.cpp   \
+  SIFoldOperands.cpp   \
+  SIFormMemoryClauses.cpp   \
+  SIFrameLowering.cpp   \
+  SIInsertSkips.cpp   \
+  SIInsertWaitcnts.cpp   \
+  SIInstrInfo.cpp   \
+  SIISelLowering.cpp   \
+  SILoadStoreOptimizer.cpp   \
+  SILowerControlFlow.cpp   \
+  SILowerI1Copies.cpp   \
+  SILowerSGPRSpills.cpp   \
+  SIMachineFunctionInfo.cpp   \
+  SIMachineScheduler.cpp   \
+  SIMemoryLegalizer.cpp   \
+  SIModeRegister.cpp   \
+  SIOptimizeExecMasking.cpp   \
+  SIOptimizeExecMaskingPreRA.cpp   \
+  SIPeepholeSDWA.cpp   \
+  SIPreAllocateWWMRegs.cpp   \
+  SIRegisterInfo.cpp   \
+  SIShrinkInstructions.cpp   \
+  SIWholeQuadMode.cpp
+
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUCodeGen
+LOCAL_SRC_FILES := $(amdgpu_codegen_SRC_FILES)
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+
+include $(CLEAR_TBLGEN_VARS)
+TBLGEN_TABLES := $(amdgpu_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := AMDGPU.td
+include $(LLVM70_TBLGEN_RULES_MK)
+
+include $(CLEAR_TBLGEN_VARS)
+TBLGEN_TABLES := $(amdgpu_codegen_1_TBLGEN_TABLES)
+TBLGEN_IN_TD := AMDGPUGISel.td
+include $(LLVM70_TBLGEN_RULES_MK)
+
+include $(CLEAR_TBLGEN_VARS)
+TBLGEN_TABLES := $(amdgpu_codegen_2_TBLGEN_TABLES)
+TBLGEN_IN_TD := R600.td
+include $(LLVM70_TBLGEN_RULES_MK)
+
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(amdgpu_codegen_SRC_FILES)
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+LOCAL_MODULE := libLLVM70AMDGPUCodeGen
+
+include $(LLVM70_DEVICE_BUILD_MK)
+
+include $(CLEAR_TBLGEN_VARS)
+TBLGEN_TABLES := $(amdgpu_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := AMDGPU.td
+include $(LLVM70_TBLGEN_RULES_MK)
+
+include $(CLEAR_TBLGEN_VARS)
+TBLGEN_TABLES := $(amdgpu_codegen_1_TBLGEN_TABLES)
+TBLGEN_IN_TD := AMDGPUGISel.td
+include $(LLVM70_TBLGEN_RULES_MK)
+
+include $(CLEAR_TBLGEN_VARS)
+TBLGEN_TABLES := $(amdgpu_codegen_2_TBLGEN_TABLES)
+TBLGEN_IN_TD := R600.td
+include $(LLVM70_TBLGEN_RULES_MK)
+
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AMDGPU/AsmParser/Android.mk b/lib/Target/AMDGPU/AsmParser/Android.mk
--- a/lib/Target/AMDGPU/AsmParser/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AMDGPU/AsmParser/Android.mk	2021-04-19 01:45:01.354349056 +0000
@@ -0,0 +1,34 @@
+LOCAL_PATH := $(call my-dir)
+
+amdgpu_asm_parser_SRC_FILES := \
+  AMDGPUAsmParser.cpp
+
+#===---------------------------------------------------------------===
+# libAMDGPUAsmParser (host)
+#===---------------------------------------------------------------===
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUAsmParser
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(amdgpu_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+
+#===---------------------------------------------------------------===
+# libAMDGPUAsmParser (target)
+#===---------------------------------------------------------------===
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUAsmParser
+LOCAL_SRC_FILES := $(amdgpu_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AMDGPU/CMakeLists.txt b/lib/Target/AMDGPU/CMakeLists.txt
--- a/lib/Target/AMDGPU/CMakeLists.txt	2021-04-17 09:25:10.532736933 +0000
+++ b/lib/Target/AMDGPU/CMakeLists.txt	2021-04-19 01:45:01.354349056 +0000
@@ -1,5 +1,4 @@
 set(LLVM_TARGET_DEFINITIONS AMDGPU.td)
-
 tablegen(LLVM AMDGPUGenAsmMatcher.inc -gen-asm-matcher)
 tablegen(LLVM AMDGPUGenAsmWriter.inc -gen-asm-writer)
 tablegen(LLVM AMDGPUGenCallingConv.inc -gen-callingconv)
@@ -12,7 +11,6 @@ tablegen(LLVM AMDGPUGenRegisterBank.inc
 tablegen(LLVM AMDGPUGenRegisterInfo.inc -gen-register-info)
 tablegen(LLVM AMDGPUGenSearchableTables.inc -gen-searchable-tables)
 tablegen(LLVM AMDGPUGenSubtargetInfo.inc -gen-subtarget)
-
 set(LLVM_TARGET_DEFINITIONS AMDGPUGISel.td)
 tablegen(LLVM AMDGPUGenGlobalISel.inc -gen-global-isel)
 
diff -Nurp a/lib/Target/AMDGPU/Disassembler/Android.mk b/lib/Target/AMDGPU/Disassembler/Android.mk
--- a/lib/Target/AMDGPU/Disassembler/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AMDGPU/Disassembler/Android.mk	2021-04-19 01:45:01.354349056 +0000
@@ -0,0 +1,34 @@
+LOCAL_PATH := $(call my-dir)
+
+amdgpu_asm_disassembler_SRC_FILES := \
+  AMDGPUDisassembler.cpp
+
+#===---------------------------------------------------------------===
+# libAMDGPUAsmParser (host)
+#===---------------------------------------------------------------===
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUDisassembler
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(amdgpu_asm_disassembler_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+
+#===---------------------------------------------------------------===
+# libAMDGPUAsmParser (target)
+#===---------------------------------------------------------------===
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUDisassembler
+LOCAL_SRC_FILES := $(amdgpu_asm_disassembler_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AMDGPU/InstPrinter/Android.mk b/lib/Target/AMDGPU/InstPrinter/Android.mk
--- a/lib/Target/AMDGPU/InstPrinter/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AMDGPU/InstPrinter/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1 @@
+LOCAL_PATH := $(call my-dir)
diff -Nurp a/lib/Target/AMDGPU/MCTargetDesc/Android.mk b/lib/Target/AMDGPU/MCTargetDesc/Android.mk
--- a/lib/Target/AMDGPU/MCTargetDesc/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AMDGPU/MCTargetDesc/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,43 @@
+LOCAL_PATH := $(call my-dir)
+
+amdgpu_mc_desc_SRC_FILES := \
+  AMDGPUAsmBackend.cpp \
+  AMDGPUELFObjectWriter.cpp \
+  AMDGPUELFStreamer.cpp \
+  AMDGPUInstPrinter.cpp \
+  AMDGPUMCAsmInfo.cpp \
+  AMDGPUMCCodeEmitter.cpp \
+  AMDGPUMCTargetDesc.cpp \
+  AMDGPUTargetStreamer.cpp \
+  R600MCCodeEmitter.cpp \
+  R600MCTargetDesc.cpp \
+  SIMCCodeEmitter.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUDesc
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(amdgpu_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUDesc
+
+LOCAL_SRC_FILES := $(amdgpu_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AMDGPU/TargetInfo/Android.mk b/lib/Target/AMDGPU/TargetInfo/Android.mk
--- a/lib/Target/AMDGPU/TargetInfo/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AMDGPU/TargetInfo/Android.mk	2021-04-19 01:45:01.358349056 +0000
@@ -0,0 +1,33 @@
+LOCAL_PATH := $(call my-dir)
+
+amdgpu_target_info_SRC_FILES := \
+  AMDGPUTargetInfo.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUInfo
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(amdgpu_target_info_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libLLVM70AMDGPUInfo
+
+LOCAL_SRC_FILES := $(amdgpu_target_info_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/AMDGPU/Utils/Android.mk b/lib/Target/AMDGPU/Utils/Android.mk
--- a/lib/Target/AMDGPU/Utils/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/AMDGPU/Utils/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH := $(call my-dir)
+
+amdgpu_utils_SRC_FILES := \
+  AMDGPUAsmUtils.cpp \
+  AMDGPUBaseInfo.cpp \
+  AMDGPUPALMetadata.cpp \
+  AMDKernelCodeTUtils.cpp
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(amdgpu_utils_SRC_FILES)
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+LOCAL_MODULE := libLLVM70AMDGPUUtils
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(amdgpu_utils_SRC_FILES)
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70AMDGPUCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70AMDGPUCodeGen
+LOCAL_MODULE := libLLVM70AMDGPUUtils
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/Android.mk b/lib/Target/Android.mk
--- a/lib/Target/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/Android.mk	2021-04-19 01:45:01.286349059 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH:= $(call my-dir)
+
+target_SRC_FILES :=            \
+  Target.cpp                   \
+  TargetIntrinsicInfo.cpp      \
+  TargetLoweringObjectFile.cpp \
+  TargetMachine.cpp            \
+  TargetMachineC.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(target_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Target
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(target_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Target
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/ARM/Android.mk b/lib/Target/ARM/Android.mk
--- a/lib/Target/ARM/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/ARM/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,101 @@
+LOCAL_PATH := $(call my-dir)
+
+arm_codegen_TBLGEN_TABLES :=   \
+  ARMGenAsmMatcher.inc         \
+  ARMGenAsmWriter.inc          \
+  ARMGenCallingConv.inc        \
+  ARMGenDAGISel.inc            \
+  ARMGenDisassemblerTables.inc \
+  ARMGenFastISel.inc           \
+  ARMGenGlobalISel.inc         \
+  ARMGenInstrInfo.inc          \
+  ARMGenMCCodeEmitter.inc      \
+  ARMGenMCPseudoLowering.inc   \
+  ARMGenRegisterBank.inc       \
+  ARMGenRegisterInfo.inc       \
+  ARMGenSubtargetInfo.inc      \
+  ARMGenSystemRegister.inc
+
+arm_codegen_SRC_FILES :=      \
+  A15SDOptimizer.cpp \
+  ARMAsmPrinter.cpp \
+  ARMBaseInstrInfo.cpp \
+  ARMBaseRegisterInfo.cpp \
+  ARMBasicBlockInfo.cpp \
+  ARMCallingConv.cpp \
+  ARMCallLowering.cpp \
+  ARMCodeGenPrepare.cpp \
+  ARMConstantIslandPass.cpp \
+  ARMConstantPoolValue.cpp \
+  ARMExpandPseudoInsts.cpp \
+  ARMFastISel.cpp \
+  ARMFrameLowering.cpp \
+  ARMHazardRecognizer.cpp \
+  ARMInstrInfo.cpp \
+  ARMInstructionSelector.cpp \
+  ARMISelDAGToDAG.cpp \
+  ARMISelLowering.cpp \
+  ARMLegalizerInfo.cpp \
+  ARMLoadStoreOptimizer.cpp \
+  ARMLowOverheadLoops.cpp \
+  ARMMachineFunctionInfo.cpp \
+  ARMMacroFusion.cpp \
+  ARMMCInstLower.cpp \
+  ARMOptimizeBarriersPass.cpp \
+  ARMParallelDSP.cpp \
+  ARMRegisterBankInfo.cpp \
+  ARMRegisterInfo.cpp \
+  ARMSelectionDAGInfo.cpp \
+  ARMSubtarget.cpp \
+  ARMTargetMachine.cpp \
+  ARMTargetObjectFile.cpp \
+  ARMTargetTransformInfo.cpp \
+  MLxExpansionPass.cpp \
+  Thumb1FrameLowering.cpp \
+  Thumb1InstrInfo.cpp \
+  Thumb2InstrInfo.cpp \
+  Thumb2ITBlockPass.cpp \
+  Thumb2SizeReduction.cpp \
+  ThumbRegisterInfo.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMCodeGen
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(arm_codegen_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/MCTargetDesc
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+TBLGEN_TABLES := $(arm_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := ARM.td
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMCodeGen
+
+LOCAL_SRC_FILES := $(arm_codegen_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/MCTargetDesc
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+TBLGEN_TABLES := $(arm_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := ARM.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/ARM/AsmParser/Android.mk b/lib/Target/ARM/AsmParser/Android.mk
--- a/lib/Target/ARM/AsmParser/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/ARM/AsmParser/Android.mk	2021-04-19 01:45:01.398349054 +0000
@@ -0,0 +1,40 @@
+LOCAL_PATH := $(call my-dir)
+
+#===---------------------------------------------------------------===
+# libARMAsmParser (common)
+#===---------------------------------------------------------------===
+
+arm_asm_parser_SRC_FILES := \
+  ARMAsmParser.cpp
+
+#===---------------------------------------------------------------===
+# libARMAsmParser (host)
+#===---------------------------------------------------------------===
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMAsmParser
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(arm_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+
+#===---------------------------------------------------------------===
+# libARMAsmParser (target)
+#===---------------------------------------------------------------===
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMAsmParser
+LOCAL_SRC_FILES := $(arm_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/ARM/Disassembler/Android.mk b/lib/Target/ARM/Disassembler/Android.mk
--- a/lib/Target/ARM/Disassembler/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/ARM/Disassembler/Android.mk	2021-04-19 01:45:01.398349054 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH := $(call my-dir)
+
+arm_disassembler_SRC_FILES := \
+  ARMDisassembler.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(arm_disassembler_SRC_FILES)
+
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+LOCAL_MODULE:= libLLVM70ARMDisassembler
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(arm_disassembler_SRC_FILES)
+
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+LOCAL_MODULE:= libLLVM70ARMDisassembler
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/ARM/InstPrinter/Android.mk b/lib/Target/ARM/InstPrinter/Android.mk
--- a/lib/Target/ARM/InstPrinter/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/ARM/InstPrinter/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1 @@
+LOCAL_PATH := $(call my-dir)
diff -Nurp a/lib/Target/ARM/MCTargetDesc/Android.mk b/lib/Target/ARM/MCTargetDesc/Android.mk
--- a/lib/Target/ARM/MCTargetDesc/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/ARM/MCTargetDesc/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,49 @@
+LOCAL_PATH := $(call my-dir)
+
+arm_mc_desc_SRC_FILES :=     \
+  ARMAsmBackend.cpp \
+  ARMELFObjectWriter.cpp \
+  ARMELFStreamer.cpp \
+  ARMInstPrinter.cpp \
+  ARMMachObjectWriter.cpp \
+  ARMMachORelocationInfo.cpp \
+  ARMMCAsmInfo.cpp \
+  ARMMCCodeEmitter.cpp \
+  ARMMCExpr.cpp \
+  ARMMCTargetDesc.cpp \
+  ARMTargetStreamer.cpp \
+  ARMUnwindOpAsm.cpp \
+  ARMWinCOFFObjectWriter.cpp \
+  ARMWinCOFFStreamer.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMDesc
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(arm_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMDesc
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(arm_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/ARM/TargetInfo/Android.mk b/lib/Target/ARM/TargetInfo/Android.mk
--- a/lib/Target/ARM/TargetInfo/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/ARM/TargetInfo/Android.mk	2021-04-19 01:45:01.406349054 +0000
@@ -0,0 +1,38 @@
+LOCAL_PATH := $(call my-dir)
+
+arm_target_info_SRC_FILES := \
+  ARMTargetInfo.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(arm_target_info_SRC_FILES)
+
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+LOCAL_MODULE:= libLLVM70ARMInfo
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(arm_target_info_SRC_FILES)
+
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+
+LOCAL_MODULE:= libLLVM70ARMInfo
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/ARM/Utils/Android.mk b/lib/Target/ARM/Utils/Android.mk
--- a/lib/Target/ARM/Utils/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/ARM/Utils/Android.mk	2021-04-19 01:45:01.406349054 +0000
@@ -0,0 +1,36 @@
+LOCAL_PATH:= $(call my-dir)
+
+arm_utils_SRC_FILES := \
+  ARMBaseInfo.cpp
+
+
+arm_utils_C_INCLUDES := $(LOCAL_PATH)/..
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMUtils
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := $(arm_utils_SRC_FILES)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,true,)
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70ARMUtils
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := $(arm_utils_SRC_FILES)
+LOCAL_STATIC_LIBRARIES += libLLVM70ARMCodeGen
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70ARMCodeGen,,)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/X86/Android.mk b/lib/Target/X86/Android.mk
--- a/lib/Target/X86/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/X86/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,105 @@
+LOCAL_PATH := $(call my-dir)
+
+x86_codegen_TBLGEN_TABLES :=   \
+  X86GenAsmMatcher.inc         \
+  X86GenAsmWriter.inc          \
+  X86GenAsmWriter1.inc         \
+  X86GenCallingConv.inc        \
+  X86GenDAGISel.inc            \
+  X86GenDisassemblerTables.inc \
+  X86GenEVEX2VEXTables.inc     \
+  X86GenFastISel.inc           \
+  X86GenGlobalISel.inc         \
+  X86GenInstrInfo.inc          \
+  X86GenRegisterBank.inc       \
+  X86GenRegisterInfo.inc       \
+  X86GenSubtargetInfo.inc
+
+x86_codegen_SRC_FILES :=            \
+  X86AsmPrinter.cpp \
+  X86AvoidStoreForwardingBlocks.cpp \
+  X86CallFrameOptimization.cpp \
+  X86CallingConv.cpp \
+  X86CallLowering.cpp \
+  X86CmovConversion.cpp \
+  X86CondBrFolding.cpp \
+  X86DiscriminateMemOps.cpp \
+  X86DomainReassignment.cpp \
+  X86EvexToVex.cpp \
+  X86ExpandPseudo.cpp \
+  X86FastISel.cpp \
+  X86FixupBWInsts.cpp \
+  X86FixupLEAs.cpp \
+  X86FixupSetCC.cpp \
+  X86FlagsCopyLowering.cpp \
+  X86FloatingPoint.cpp \
+  X86FrameLowering.cpp \
+  X86IndirectBranchTracking.cpp \
+  X86InsertPrefetch.cpp \
+  X86InstrFMA3Info.cpp \
+  X86InstrFoldTables.cpp \
+  X86InstrInfo.cpp \
+  X86InstructionSelector.cpp \
+  X86InterleavedAccess.cpp \
+  X86ISelDAGToDAG.cpp \
+  X86ISelLowering.cpp \
+  X86LegalizerInfo.cpp \
+  X86MachineFunctionInfo.cpp \
+  X86MacroFusion.cpp \
+  X86MCInstLower.cpp \
+  X86OptimizeLEAs.cpp \
+  X86PadShortFunction.cpp \
+  X86RegisterBankInfo.cpp \
+  X86RegisterInfo.cpp \
+  X86RetpolineThunks.cpp \
+  X86SelectionDAGInfo.cpp \
+  X86ShuffleDecodeConstantPool.cpp \
+  X86SpeculativeLoadHardening.cpp \
+  X86Subtarget.cpp \
+  X86TargetMachine.cpp \
+  X86TargetObjectFile.cpp \
+  X86TargetTransformInfo.cpp \
+  X86VZeroUpper.cpp \
+  X86WinAllocaExpander.cpp \
+  X86WinEHState.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+TBLGEN_TABLES := $(x86_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := X86.td
+
+LOCAL_SRC_FILES := $(x86_codegen_SRC_FILES)
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+LOCAL_MODULE:= libLLVM70X86CodeGen
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+TBLGEN_TABLES := $(x86_codegen_TBLGEN_TABLES)
+TBLGEN_IN_TD := X86.td
+
+LOCAL_SRC_FILES := $(x86_codegen_SRC_FILES)
+LOCAL_EXPORT_C_INCLUDE_DIRS := .
+
+LOCAL_MODULE:= libLLVM70X86CodeGen
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/X86/AsmParser/Android.mk b/lib/Target/X86/AsmParser/Android.mk
--- a/lib/Target/X86/AsmParser/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/X86/AsmParser/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,58 @@
+LOCAL_PATH := $(call my-dir)
+
+# For the device only
+# =====================================================
+include $(CLEAR_VARS)
+
+x86_asm_parser_TBLGEN_TABLES := \
+  X86GenAsmMatcher.inc          \
+  X86GenInstrInfo.inc           \
+  X86GenRegisterInfo.inc        \
+  X86GenSubtargetInfo.inc
+
+x86_asm_parser_SRC_FILES := \
+  X86AsmParser.cpp
+
+#===---------------------------------------------------------------===
+# libX86AsmParser (host)
+#===---------------------------------------------------------------===
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70X86AsmParser
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(x86_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+TBLGEN_TABLES := $(x86_asm_parser_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+
+#===---------------------------------------------------------------===
+# libX86AsmParser (target)
+#===---------------------------------------------------------------===
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70X86AsmParser
+LOCAL_SRC_FILES := $(x86_asm_parser_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+TBLGEN_TABLES := $(x86_asm_parser_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/X86/Disassembler/Android.mk b/lib/Target/X86/Disassembler/Android.mk
--- a/lib/Target/X86/Disassembler/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/X86/Disassembler/Android.mk	2021-04-19 01:45:01.642349043 +0000
@@ -0,0 +1,56 @@
+LOCAL_PATH := $(call my-dir)
+
+x86_disassembler_TBLGEN_TABLES := \
+  X86GenDisassemblerTables.inc    \
+  X86GenInstrInfo.inc             \
+  X86GenRegisterInfo.inc          \
+  X86GenSubtargetInfo.inc
+
+x86_disassembler_SRC_FILES := \
+  X86Disassembler.cpp         \
+  X86DisassemblerDecoder.cpp
+
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(x86_disassembler_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70X86Disassembler
+
+TBLGEN_TABLES := $(x86_disassembler_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(x86_disassembler_SRC_FILES)
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+
+LOCAL_MODULE:= libLLVM70X86Disassembler
+
+LOCAL_MODULE_HOST_OS := linux
+
+TBLGEN_TABLES := $(x86_disassembler_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
diff -Nurp a/lib/Target/X86/InstPrinter/Android.mk b/lib/Target/X86/InstPrinter/Android.mk
--- a/lib/Target/X86/InstPrinter/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/X86/InstPrinter/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1 @@
+LOCAL_PATH := $(call my-dir)
\ No newline at end of file
diff -Nurp a/lib/Target/X86/MCTargetDesc/Android.mk b/lib/Target/X86/MCTargetDesc/Android.mk
--- a/lib/Target/X86/MCTargetDesc/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/X86/MCTargetDesc/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,66 @@
+LOCAL_PATH := $(call my-dir)
+
+x86_mc_desc_TBLGEN_TABLES := \
+  X86GenRegisterInfo.inc     \
+  X86GenInstrInfo.inc        \
+  X86GenSubtargetInfo.inc    \
+  X86GenAsmWriter.inc        \
+  X86GenAsmWriter1.inc
+
+x86_mc_desc_SRC_FILES :=       \
+  X86AsmBackend.cpp \
+  X86ATTInstPrinter.cpp \
+  X86ELFObjectWriter.cpp \
+  X86InstComments.cpp \
+  X86InstPrinterCommon.cpp \
+  X86IntelInstPrinter.cpp \
+  X86MachObjectWriter.cpp \
+  X86MCAsmInfo.cpp \
+  X86MCCodeEmitter.cpp \
+  X86MCTargetDesc.cpp \
+  X86WinCOFFObjectWriter.cpp \
+  X86WinCOFFStreamer.cpp \
+  X86WinCOFFTargetStreamer.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70X86Desc
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_SRC_FILES := $(x86_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/..
+
+TBLGEN_TABLES := $(x86_mc_desc_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device only
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70X86Desc
+
+LOCAL_SRC_FILES := $(x86_mc_desc_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/..
+
+TBLGEN_TABLES := $(x86_mc_desc_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/X86/TargetInfo/Android.mk b/lib/Target/X86/TargetInfo/Android.mk
--- a/lib/Target/X86/TargetInfo/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/X86/TargetInfo/Android.mk	2021-04-19 01:45:01.646349043 +0000
@@ -0,0 +1,53 @@
+LOCAL_PATH := $(call my-dir)
+
+x86_target_info_TBLGEN_TABLES := \
+  X86GenRegisterInfo.inc         \
+  X86GenInstrInfo.inc            \
+  X86GenSubtargetInfo.inc
+
+x86_target_info_SRC_FILES := \
+  X86TargetInfo.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+TBLGEN_TABLES := $(x86_target_info_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+LOCAL_SRC_FILES := $(x86_target_info_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/../
+
+LOCAL_MODULE:= libLLVM70X86Info
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+TBLGEN_TABLES := $(x86_target_info_TBLGEN_TABLES)
+TBLGEN_TD_DIR := $(LOCAL_PATH)/..
+TBLGEN_IN_TD := X86.td
+
+LOCAL_SRC_FILES := $(x86_target_info_SRC_FILES)
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/../
+
+LOCAL_MODULE:= libLLVM70X86Info
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Target/X86/Utils/Android.mk b/lib/Target/X86/Utils/Android.mk
--- a/lib/Target/X86/Utils/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Target/X86/Utils/Android.mk	2021-04-19 01:45:01.646349043 +0000
@@ -0,0 +1,36 @@
+LOCAL_PATH := $(call my-dir)
+
+x86_utils_SRC_FILES := \
+  X86ShuffleDecode.cpp
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(x86_utils_SRC_FILES)
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70X86CodeGen,true,)
+LOCAL_STATIC_LIBRARIES += libLLVM70X86CodeGen
+LOCAL_MODULE:= libLLVM70X86Utils
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(x86_utils_SRC_FILES)
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/.. \
+  $(call generated-sources-dir-for,STATIC_LIBRARIES,libLLVM70X86CodeGen,,)
+LOCAL_STATIC_LIBRARIES += libLLVM70X86CodeGen
+LOCAL_MODULE:= libLLVM70X86Utils
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
diff -Nurp a/lib/ToolDrivers/llvm-lib/Android.mk b/lib/ToolDrivers/llvm-lib/Android.mk
--- a/lib/ToolDrivers/llvm-lib/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/ToolDrivers/llvm-lib/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,44 @@
+LOCAL_PATH:= $(call my-dir)
+
+libdriver_TBLGEN_TABLES := \
+  Options.inc
+
+libdriver_SRC_FILES := \
+  LibDriver.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70LibDriver
+LOCAL_MODULE_HOST_OS := darwin linux
+
+LOCAL_SRC_FILES := $(libdriver_SRC_FILES)
+TBLGEN_TABLES := $(libdriver_TBLGEN_TABLES)
+TBLGEN_IN_TD := Options.td
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_MODULE:= libLLVM70LibDriver
+LOCAL_SRC_FILES := $(libdriver_SRC_FILES)
+
+TBLGEN_TABLES := $(libdriver_TBLGEN_TABLES)
+TBLGEN_IN_TD := Options.td
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/AggressiveInstCombine/Android.mk b/lib/Transforms/AggressiveInstCombine/Android.mk
--- a/lib/Transforms/AggressiveInstCombine/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/AggressiveInstCombine/Android.mk	2021-04-19 01:45:01.658349043 +0000
@@ -0,0 +1,33 @@
+LOCAL_PATH:= $(call my-dir)
+
+transforms_aggressive_SRC_FILES := \
+  AggressiveInstCombine.cpp        \
+  TruncInstCombine.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_aggressive_SRC_FILES)
+LOCAL_MODULE:= libLLVM70AggressiveInstCombine
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_aggressive_SRC_FILES)
+LOCAL_MODULE:= libLLVM70AggressiveInstCombine
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/Coroutines/Android.mk b/lib/Transforms/Coroutines/Android.mk
--- a/lib/Transforms/Coroutines/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/Coroutines/Android.mk	2021-04-19 01:54:36.034323772 +0000
@@ -0,0 +1,39 @@
+LOCAL_PATH:= $(call my-dir)
+
+Transforms_Coroutines_SRC_FILES := \
+  CoroCleanup.cpp \
+  CoroEarly.cpp \
+  CoroElide.cpp \
+  CoroFrame.cpp \
+  CoroSplit.cpp \
+  Coroutines.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(Transforms_Coroutines_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Coroutines
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+include $(CLEAR_VARS)
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+
+LOCAL_SRC_FILES := $(Transforms_Coroutines_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70Coroutines
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/Hello/Android.mk b/lib/Transforms/Hello/Android.mk
--- a/lib/Transforms/Hello/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/Hello/Android.mk	2021-04-19 01:45:01.662349042 +0000
@@ -0,0 +1,21 @@
+LOCAL_PATH:= $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../../..
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+
+transforms_hello_SRC_FILES := \
+  Hello.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_hello_SRC_FILES)
+LOCAL_MODULE_CLASS := SHARED_LIBRARIES
+LOCAL_MODULE:= LLVM70Hello
+
+LOCAL_LDFLAGS_darwin := -Wl,-undefined -Wl,dynamic_lookup
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_HOST_SHARED_LIBRARY)
diff -Nurp a/lib/Transforms/InstCombine/Android.mk b/lib/Transforms/InstCombine/Android.mk
--- a/lib/Transforms/InstCombine/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/InstCombine/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,60 @@
+LOCAL_PATH:= $(call my-dir)
+
+transforms_inst_combine_TBLGEN_TABLES := \
+  InstCombineTables.inc
+
+transforms_inst_combine_SRC_FILES := \
+  InstCombineAddSub.cpp \
+  InstCombineAndOrXor.cpp \
+  InstCombineAtomicRMW.cpp \
+  InstCombineCalls.cpp \
+  InstCombineCasts.cpp \
+  InstCombineCompares.cpp \
+  InstCombineLoadStoreAlloca.cpp \
+  InstCombineMulDivRem.cpp \
+  InstCombinePHI.cpp \
+  InstCombineSelect.cpp \
+  InstCombineShifts.cpp \
+  InstCombineSimplifyDemanded.cpp \
+  InstCombineVectorOps.cpp \
+  InstructionCombining.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(transforms_inst_combine_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70InstCombine
+
+TBLGEN_TABLES := $(transforms_inst_combine_TBLGEN_TABLES)
+TBLGEN_IN_TD := InstCombineTables.td
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+include $(CLEAR_TBLGEN_VARS)
+
+LOCAL_SRC_FILES := $(transforms_inst_combine_SRC_FILES)
+
+TBLGEN_TABLES := $(transforms_inst_combine_TBLGEN_TABLES)
+TBLGEN_IN_TD := InstCombineTables.td
+
+LOCAL_MODULE:= libLLVM70InstCombine
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_TBLGEN_RULES_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/Instrumentation/Android.mk b/lib/Transforms/Instrumentation/Android.mk
--- a/lib/Transforms/Instrumentation/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/Instrumentation/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,48 @@
+LOCAL_PATH:= $(call my-dir)
+
+instrumentation_SRC_FILES := \
+  AddressSanitizer.cpp \
+  BoundsChecking.cpp \
+  CGProfile.cpp \
+  ControlHeightReduction.cpp \
+  DataFlowSanitizer.cpp \
+  GCOVProfiling.cpp \
+  HWAddressSanitizer.cpp \
+  IndirectCallPromotion.cpp \
+  InstrOrderFile.cpp \
+  InstrProfiling.cpp \
+  Instrumentation.cpp \
+  MemorySanitizer.cpp \
+  PGOInstrumentation.cpp \
+  PGOMemOPSizeOpt.cpp \
+  PoisonChecking.cpp \
+  SanitizerCoverage.cpp \
+  ThreadSanitizer.cpp
+
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Instrumentation
+LOCAL_MODULE_HOST_OS := linux
+LOCAL_SRC_FILES := $(instrumentation_SRC_FILES)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the target
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70Instrumentation
+LOCAL_SRC_FILES := $(instrumentation_SRC_FILES)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/IPO/Android.mk b/lib/Transforms/IPO/Android.mk
--- a/lib/Transforms/IPO/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/IPO/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,68 @@
+LOCAL_PATH:= $(call my-dir)
+
+transforms_ipo_SRC_FILES :=      \
+  AlwaysInliner.cpp \
+  ArgumentPromotion.cpp \
+  Attributor.cpp \
+  BarrierNoopPass.cpp \
+  BlockExtractor.cpp \
+  CalledValuePropagation.cpp \
+  ConstantMerge.cpp \
+  CrossDSOCFI.cpp \
+  DeadArgumentElimination.cpp \
+  ElimAvailExtern.cpp \
+  ExtractGV.cpp \
+  ForceFunctionAttrs.cpp \
+  FunctionAttrs.cpp \
+  FunctionImport.cpp \
+  GlobalDCE.cpp \
+  GlobalOpt.cpp \
+  GlobalSplit.cpp \
+  HotColdSplitting.cpp \
+  InferFunctionAttrs.cpp \
+  Inliner.cpp \
+  InlineSimple.cpp \
+  Internalize.cpp \
+  IPConstantPropagation.cpp \
+  IPO.cpp \
+  LoopExtractor.cpp \
+  LowerTypeTests.cpp \
+  MergeFunctions.cpp \
+  PartialInlining.cpp \
+  PassManagerBuilder.cpp \
+  PruneEH.cpp \
+  SampleProfile.cpp \
+  SCCP.cpp \
+  StripDeadPrototypes.cpp \
+  StripSymbols.cpp \
+  SyntheticCountsPropagation.cpp \
+  ThinLTOBitcodeWriter.cpp \
+  WholeProgramDevirt.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_ipo_SRC_FILES)
+LOCAL_MODULE:= libLLVM70ipo
+
+LOCAL_MODULE_HOST_OS := darwin linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_ipo_SRC_FILES)
+LOCAL_MODULE:= libLLVM70ipo
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/ObjCARC/Android.mk b/lib/Transforms/ObjCARC/Android.mk
--- a/lib/Transforms/ObjCARC/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/ObjCARC/Android.mk	2021-04-19 01:45:01.686349041 +0000
@@ -0,0 +1,40 @@
+LOCAL_PATH:= $(call my-dir)
+
+transforms_objcarc_SRC_FILES := \
+  DependencyAnalysis.cpp \
+  ObjCARCAPElim.cpp \
+  ObjCARCContract.cpp \
+  ObjCARC.cpp \
+  ObjCARCExpand.cpp \
+  ObjCARCOpts.cpp \
+  PtrState.cpp \
+  ProvenanceAnalysis.cpp \
+  ProvenanceAnalysisEvaluator.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_objcarc_SRC_FILES)
+LOCAL_MODULE:= libLLVM70TransformObjCARC
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_objcarc_SRC_FILES)
+LOCAL_MODULE:= libLLVM70TransformObjCARC
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/Scalar/Android.mk b/lib/Transforms/Scalar/Android.mk
--- a/lib/Transforms/Scalar/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/Scalar/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,106 @@
+LOCAL_PATH:= $(call my-dir)
+
+transforms_scalar_SRC_FILES :=       \
+  ADCE.cpp \
+  AlignmentFromAssumptions.cpp \
+  BDCE.cpp \
+  CallSiteSplitting.cpp \
+  ConstantHoisting.cpp \
+  ConstantProp.cpp \
+  CorrelatedValuePropagation.cpp \
+  DCE.cpp \
+  DeadStoreElimination.cpp \
+  DivRemPairs.cpp \
+  EarlyCSE.cpp \
+  FlattenCFGPass.cpp \
+  Float2Int.cpp \
+  GuardWidening.cpp \
+  GVN.cpp \
+  GVNHoist.cpp \
+  GVNSink.cpp \
+  InductiveRangeCheckElimination.cpp \
+  IndVarSimplify.cpp \
+  InferAddressSpaces.cpp \
+  InstSimplifyPass.cpp \
+  IVUsersPrinter.cpp \
+  JumpThreading.cpp \
+  LICM.cpp \
+  LoopAccessAnalysisPrinter.cpp \
+  LoopDataPrefetch.cpp \
+  LoopDeletion.cpp \
+  LoopDistribute.cpp \
+  LoopFuse.cpp \
+  LoopIdiomRecognize.cpp \
+  LoopInstSimplify.cpp \
+  LoopInterchange.cpp \
+  LoopLoadElimination.cpp \
+  LoopPassManager.cpp \
+  LoopPredication.cpp \
+  LoopRerollPass.cpp \
+  LoopRotation.cpp \
+  LoopSimplifyCFG.cpp \
+  LoopSink.cpp \
+  LoopStrengthReduce.cpp \
+  LoopUnrollAndJamPass.cpp \
+  LoopUnrollPass.cpp \
+  LoopUnswitch.cpp \
+  LoopVersioningLICM.cpp \
+  LowerAtomic.cpp \
+  LowerExpectIntrinsic.cpp \
+  LowerGuardIntrinsic.cpp \
+  LowerWidenableCondition.cpp \
+  MakeGuardsExplicit.cpp \
+  MemCpyOptimizer.cpp \
+  MergedLoadStoreMotion.cpp \
+  MergeICmps.cpp \
+  NaryReassociate.cpp \
+  NewGVN.cpp \
+  PartiallyInlineLibCalls.cpp \
+  PlaceSafepoints.cpp \
+  Reassociate.cpp \
+  Reg2Mem.cpp \
+  RewriteStatepointsForGC.cpp \
+  Scalar.cpp \
+  Scalarizer.cpp \
+  SCCP.cpp \
+  SeparateConstOffsetFromGEP.cpp \
+  SimpleLoopUnswitch.cpp \
+  SimplifyCFGPass.cpp \
+  Sink.cpp \
+  SpeculateAroundPHIs.cpp \
+  SpeculativeExecution.cpp \
+  SROA.cpp \
+  StraightLineStrengthReduce.cpp \
+  StructurizeCFG.cpp \
+  TailRecursionElimination.cpp \
+  WarnMissedTransforms.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES :=	\
+	$(transforms_scalar_SRC_FILES)
+
+LOCAL_MODULE:= libLLVM70ScalarOpts
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_scalar_SRC_FILES)
+LOCAL_MODULE:= libLLVM70ScalarOpts
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/Utils/Android.mk b/lib/Transforms/Utils/Android.mk
--- a/lib/Transforms/Utils/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/Utils/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,91 @@
+LOCAL_PATH:= $(call my-dir)
+
+transforms_utils_SRC_FILES := \
+  AddDiscriminators.cpp \
+  ASanStackFrameLayout.cpp \
+  BasicBlockUtils.cpp \
+  BreakCriticalEdges.cpp \
+  BuildLibCalls.cpp \
+  BypassSlowDivision.cpp \
+  CallPromotionUtils.cpp \
+  CanonicalizeAliases.cpp \
+  CloneFunction.cpp \
+  CloneModule.cpp \
+  CodeExtractor.cpp \
+  CtorUtils.cpp \
+  DemoteRegToStack.cpp \
+  EntryExitInstrumenter.cpp \
+  EscapeEnumerator.cpp \
+  Evaluator.cpp \
+  FlattenCFG.cpp \
+  FunctionComparator.cpp \
+  FunctionImportUtils.cpp \
+  GlobalStatus.cpp \
+  GuardUtils.cpp \
+  ImportedFunctionsInliningStatistics.cpp \
+  InlineFunction.cpp \
+  InstructionNamer.cpp \
+  IntegerDivision.cpp \
+  LCSSA.cpp \
+  LibCallsShrinkWrap.cpp \
+  Local.cpp \
+  LoopRotationUtils.cpp \
+  LoopSimplify.cpp \
+  LoopUnrollAndJam.cpp \
+  LoopUnroll.cpp \
+  LoopUnrollPeel.cpp \
+  LoopUnrollRuntime.cpp \
+  LoopUtils.cpp \
+  LoopVersioning.cpp \
+  LowerInvoke.cpp \
+  LowerMemIntrinsics.cpp \
+  LowerSwitch.cpp \
+  Mem2Reg.cpp \
+  MetaRenamer.cpp \
+  ModuleUtils.cpp \
+  NameAnonGlobals.cpp \
+  PredicateInfo.cpp \
+  PromoteMemoryToRegister.cpp \
+  SanitizerStats.cpp \
+  SimplifyCFG.cpp \
+  SimplifyIndVar.cpp \
+  SimplifyLibCalls.cpp \
+  SizeOpts.cpp \
+  SplitModule.cpp \
+  SSAUpdaterBulk.cpp \
+  SSAUpdater.cpp \
+  StripGCRelocates.cpp \
+  StripNonLineTableDebugInfo.cpp \
+  SymbolRewriter.cpp \
+  UnifyFunctionExitNodes.cpp \
+  Utils.cpp \
+  ValueMapper.cpp \
+  VNCoercion.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_utils_SRC_FILES)
+LOCAL_MODULE:= libLLVM70TransformUtils
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_utils_SRC_FILES)
+LOCAL_MODULE:= libLLVM70TransformUtils
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/lib/Transforms/Vectorize/Android.mk b/lib/Transforms/Vectorize/Android.mk
--- a/lib/Transforms/Vectorize/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/lib/Transforms/Vectorize/Android.mk	2021-04-19 01:45:41.790347277 +0000
@@ -0,0 +1,42 @@
+LOCAL_PATH:= $(call my-dir)
+
+transforms_vectorize_SRC_FILES := \
+  LoadStoreVectorizer.cpp \
+  LoopVectorizationLegality.cpp \
+  LoopVectorize.cpp \
+  SLPVectorizer.cpp \
+  Vectorize.cpp \
+  VPlan.cpp \
+  VPlanHCFGBuilder.cpp \
+  VPlanHCFGTransforms.cpp \
+  VPlanPredicator.cpp \
+  VPlanSLP.cpp \
+  VPlanVerifier.cpp
+
+# For the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_vectorize_SRC_FILES)
+LOCAL_MODULE:= libLLVM70Vectorize
+
+LOCAL_MODULE_HOST_OS := linux
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_STATIC_LIBRARY)
+
+# For the device
+# =====================================================
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(transforms_vectorize_SRC_FILES)
+LOCAL_MODULE:= libLLVM70Vectorize
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_STATIC_LIBRARY)
+endif
diff -Nurp a/llvm70-device-build.mk b/llvm70-device-build.mk
--- a/llvm70-device-build.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/llvm70-device-build.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,80 @@
+LOCAL_MODULE_TARGET_ARCH := $(LLVM70_SUPPORTED_ARCH)
+
+LOCAL_CLANG := true
+
+LOCAL_CFLAGS :=	\
+	-D_GNU_SOURCE	\
+	-D__STDC_LIMIT_MACROS	\
+	-D__STDC_CONSTANT_MACROS	\
+	-D__STDC_FORMAT_MACROS	\
+	-O2	\
+	-fomit-frame-pointer	\
+	-Wall	\
+	-W	\
+	-Wno-unused-parameter	\
+	-Wwrite-strings	\
+	-Werror \
+        -Dsprintf=sprintf \
+	$(LOCAL_CFLAGS)
+
+# The three inline options together reduce libbcc.so almost 1MB.
+# We move them from global build/core/combo/TARGET_linux-arm.mk
+# to here.
+LOCAL_CFLAGS := -DANDROID_TARGET_BUILD \
+		-finline-functions \
+		$(LOCAL_CFLAGS)
+
+ifeq ($(TARGET_BUILD_VARIANT),eng)
+LOCAL_CFLAGS := -DANDROID_ENGINEERING_BUILD \
+                $(LOCAL_CFLAGS)
+endif
+
+ifeq ($(FORCE_BUILD_LLVM70_DISABLE_NDEBUG),true)
+LOCAL_CFLAGS :=	\
+	$(LOCAL_CFLAGS) \
+	-D_DEBUG	\
+	-UNDEBUG
+endif
+
+ifneq ($(REQUIRES_EH),1)
+LOCAL_CFLAGS +=	-fno-exceptions
+else
+# No action. The device target should not have exception enabled since bionic
+# doesn't support it
+REQUIRES_EH := 0
+endif
+
+ifneq ($(REQUIRES_RTTI),1)
+LOCAL_CPPFLAGS +=	-fno-rtti
+else
+REQUIRES_RTTI := 0
+endif
+
+LOCAL_CPPFLAGS :=	\
+	$(LOCAL_CPPFLAGS)	\
+	-Woverloaded-virtual	\
+	-Wno-sign-promo         \
+	-std=c++11
+
+# Make sure bionic is first so we can include system headers.
+LOCAL_C_INCLUDES :=	\
+	bionic \
+	$(LLVM70_ROOT_PATH)	\
+	$(LLVM70_ROOT_PATH)/include	\
+	$(LLVM70_ROOT_PATH)/device/include	\
+	$(LOCAL_C_INCLUDES)
+
+###########################################################
+## Commands for running tblgen to compile a td file
+###########################################################
+define transform70-device-td-to-out
+@mkdir -p $(dir $@)
+@echo "Device TableGen (gen-$(1)): $(TBLGEN_LOCAL_MODULE) <= $<"
+$(hide) $(LLVM70_TBLGEN) \
+	-I $(dir $<)	\
+	-I $(LLVM70_ROOT_PATH)/include	\
+	-I $(LLVM70_ROOT_PATH)/device/include	\
+	-I $(LLVM70_ROOT_PATH)/lib/Target	\
+    -gen-$(strip $(1)) \
+    -o $@ $<
+endef
diff -Nurp a/llvm70-gen-attributes.mk b/llvm70-gen-attributes.mk
--- a/llvm70-gen-attributes.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/llvm70-gen-attributes.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,15 @@
+ATTRIBUTETD := $(LLVM70_ROOT_PATH)/include/llvm/IR/Attributes.td
+
+ifeq ($(LOCAL_MODULE_CLASS),)
+	LOCAL_MODULE_CLASS := STATIC_LIBRARIES
+endif
+
+GENFILE := $(addprefix $(call local-generated-sources-dir)/llvm/IR/,Attributes.inc)
+LOCAL_GENERATED_SOURCES += $(GENFILE)
+$(GENFILE): TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(GENFILE): $(ATTRIBUTETD) | $(LLVM70_TBLGEN)
+ifeq ($(LOCAL_IS_HOST_MODULE),true)
+	$(call transform70-host-td-to-out,attrs)
+else
+	$(call transform70-device-td-to-out,attrs)
+endif
diff -Nurp a/llvm70-gen-intrinsics.mk b/llvm70-gen-intrinsics.mk
--- a/llvm70-gen-intrinsics.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/llvm70-gen-intrinsics.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,27 @@
+# We treat Intrinsics.td as a very special target just like what lib/VMCore/Makefile does
+INTRINSICTD := $(LLVM70_ROOT_PATH)/include/llvm/IR/Intrinsics.td
+INTRINSICTDS := $(wildcard $(dir $(INTRINSICTD))/Intrinsics*.td)
+
+ifeq ($(LOCAL_MODULE_CLASS),)
+	LOCAL_MODULE_CLASS := STATIC_LIBRARIES
+endif
+
+GENFILE := $(addprefix $(call local-generated-sources-dir)/llvm/IR/,IntrinsicEnums.inc)
+LOCAL_GENERATED_SOURCES += $(GENFILE)
+$(GENFILE): TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(GENFILE): $(INTRINSICTD) $(INTRINSICTDS) | $(LLVM70_TBLGEN)
+ifeq ($(LOCAL_IS_HOST_MODULE),true)
+	$(call transform70-host-td-to-out,intrinsic-enums)
+else
+	$(call transform70-device-td-to-out,intrinsic-enums)
+endif
+
+GENFILE := $(addprefix $(call local-generated-sources-dir)/llvm/IR/,IntrinsicImpl.inc)
+LOCAL_GENERATED_SOURCES += $(GENFILE)
+$(GENFILE): TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(GENFILE): $(INTRINSICTD) $(INTRINSICTDS) | $(LLVM70_TBLGEN)
+ifeq ($(LOCAL_IS_HOST_MODULE),true)
+	$(call transform70-host-td-to-out,intrinsic-impl)
+else
+	$(call transform70-device-td-to-out,intrinsic-impl)
+endif
diff -Nurp a/llvm70-host-build.mk b/llvm70-host-build.mk
--- a/llvm70-host-build.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/llvm70-host-build.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,90 @@
+ifeq ($(FORCE_BUILD_LLVM70_DEBUG),true)
+local_optflags = -O0 -g
+else
+local_optflags = -O2
+endif
+
+LOCAL_CFLAGS +=	\
+	-D_GNU_SOURCE	\
+	-D__STDC_LIMIT_MACROS	\
+	$(local_optflags)	\
+	-fomit-frame-pointer	\
+	-Wall	\
+	-W	\
+	-Wno-unused-parameter	\
+	-Wno-maybe-uninitialized \
+	-Wno-missing-field-initializers \
+	-Wwrite-strings	\
+	-Werror \
+	-Dsprintf=sprintf \
+	$(LOCAL_CFLAGS)
+
+ifeq ($(FORCE_BUILD_LLVM70_DISABLE_NDEBUG),true)
+LOCAL_CFLAGS :=	\
+	$(LOCAL_CFLAGS) \
+	-D_DEBUG	\
+	-UNDEBUG
+endif
+
+ifneq ($(REQUIRES_EH),1)
+LOCAL_CFLAGS += -fno-exceptions
+else
+REQUIRES_EH := 0
+LOCAL_CFLAGS += -fexceptions
+endif
+
+ifneq ($(REQUIRES_RTTI),1)
+LOCAL_CPPFLAGS += -fno-rtti
+else
+REQUIRES_RTTI := 0
+endif
+
+LOCAL_CPPFLAGS :=	\
+	$(LOCAL_CPPFLAGS)	\
+	-Wno-sign-promo         \
+	-std=c++11
+
+LOCAL_CPPFLAGS_linux := \
+	-Woverloaded-virtual
+
+LOCAL_CPPFLAGS_darwin += \
+	-Wno-deprecated-declarations \
+	-Woverloaded-virtual
+
+# Make sure bionic is first so we can include system headers.
+LOCAL_C_INCLUDES :=	\
+	$(LLVM70_ROOT_PATH)	\
+	$(LLVM70_ROOT_PATH)/include	\
+	$(LLVM70_ROOT_PATH)/host/include	\
+	$(LOCAL_C_INCLUDES)
+
+# Add on ncurses to have support for terminfo
+LOCAL_LDLIBS_linux += -lncurses
+LOCAL_LDLIBS_linux += -lgcc_s
+
+LOCAL_IS_HOST_MODULE := true
+
+ifeq ($(HOST_PREFER_32_BIT),true)
+LOCAL_MULTILIB := 32
+else
+ifeq (libLLVM70, $(filter libLLVM70,$(LOCAL_SHARED_LIBRARIES)$(LOCAL_SHARED_LIBRARIES_$(HOST_OS))))
+# Skip building a 32-bit shared object if they are using libLLVM70.
+LOCAL_MULTILIB := first
+endif
+endif
+
+###########################################################
+## Commands for running tblgen to compile a td file
+###########################################################
+define transform70-host-td-to-out
+@mkdir -p $(dir $@)
+@echo "Host TableGen: $(TBLGEN_LOCAL_MODULE) (gen-$(1)) <= $<"
+$(hide) $(LLVM70_TBLGEN) \
+	-I $(dir $<)	\
+	-I $(LLVM70_ROOT_PATH)/include	\
+	-I $(LLVM70_ROOT_PATH)/host/include	\
+	-I $(LLVM70_ROOT_PATH)/lib/Target	\
+	$(if $(strip $(CLANG_ROOT_PATH)),-I $(CLANG_ROOT_PATH)/include,)	\
+	-gen-$(strip $(1))	\
+	-o $@ $<
+endef
diff -Nurp a/llvm70.mk b/llvm70.mk
--- a/llvm70.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/llvm70.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,12 @@
+ifeq ($(LLVM70_ROOT_PATH),)
+$(error Must set variable LLVM70_ROOT_PATH before including this! $(LOCAL_PATH))
+endif
+
+CLEAR_TBLGEN_VARS := $(LLVM70_ROOT_PATH)/clear_tblgen_vars.mk
+LLVM70_HOST_BUILD_MK := $(LLVM70_ROOT_PATH)/llvm70-host-build.mk
+LLVM70_DEVICE_BUILD_MK := $(LLVM70_ROOT_PATH)/llvm70-device-build.mk
+LLVM70_GEN_ATTRIBUTES_MK := $(LLVM70_ROOT_PATH)/llvm70-gen-attributes.mk
+LLVM70_GEN_INTRINSICS_MK := $(LLVM70_ROOT_PATH)/llvm70-gen-intrinsics.mk
+LLVM70_TBLGEN_RULES_MK := $(LLVM70_ROOT_PATH)/llvm70-tblgen-rules.mk
+
+LLVM70_SUPPORTED_ARCH := arm arm64 x86 x86_64
diff -Nurp a/llvm70-tblgen-rules.mk b/llvm70-tblgen-rules.mk
--- a/llvm70-tblgen-rules.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/llvm70-tblgen-rules.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,308 @@
+###########################################################
+## Commands for running tblgen to compile a td file
+##########################################################
+define transform70-td-to-out
+$(if $(LOCAL_IS_HOST_MODULE),	\
+	$(call transform70-host-td-to-out,$(1)),	\
+	$(call transform70-device-td-to-out,$(1)))
+endef
+
+
+###########################################################
+## TableGen: Compile .td files to .inc.
+###########################################################
+
+# Set LOCAL_MODULE_CLASS to STATIC_LIBRARIES default (require
+# for macro local-generated-sources-dir)
+ifeq ($(LOCAL_MODULE_CLASS),)
+	LOCAL_MODULE_CLASS := STATIC_LIBRARIES
+endif
+
+ifneq ($(strip $(TBLGEN_TABLES)),)
+generated_sources := $(call local-generated-sources-dir)
+tblgen_gen_tables := $(addprefix $(generated_sources)/,$(TBLGEN_TABLES))
+LOCAL_GENERATED_SOURCES += $(tblgen_gen_tables)
+
+tblgen_source_dir := $(LOCAL_PATH)
+ifneq ($(TBLGEN_TD_DIR),)
+	tblgen_source_dir := $(TBLGEN_TD_DIR)
+endif
+
+tblgen_td_deps := $(tblgen_source_dir)/*.td
+tblgen_td_deps := $(wildcard $(tblgen_td_deps))
+#tblgen_td_deps :=
+
+$(warning ======$(TBLGEN_IN_TD)====)
+ifeq (R600.td,$(TBLGEN_IN_TD))
+
+$(warning ======in R600.td====)
+# rules for R600.td
+ifneq ($(filter %R600GenAsmWriter.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenAsmWriter.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenAsmWriter.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,asm-writer)
+endif
+
+ifneq ($(filter %R600GenCallingConv.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenCallingConv.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenCallingConv.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,callingconv)
+endif
+
+ifneq ($(filter %R600GenDAGISel.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenDAGISel.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenDAGISel.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,dag-isel)
+endif
+
+ifneq ($(filter %R600GenInstrInfo.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenInstrInfo.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenInstrInfo.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,instr-info)
+endif
+
+ifneq ($(filter %R600GenMCCodeEmitter.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenMCCodeEmitter.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenMCCodeEmitter.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,emitter)
+endif
+
+ifneq ($(filter %R600GenRegisterInfo.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenRegisterInfo.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenRegisterInfo.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,register-info)
+endif
+
+ifneq ($(filter %R600GenSubtargetInfo.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenSubtargetInfo.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenSubtargetInfo.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,subtarget)
+endif
+
+ifneq ($(filter %R600GenDFAPacketizer.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/R600GenDFAPacketizer.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/R600GenDFAPacketizer.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,dfa-packetizer)
+endif
+
+else
+# normal rules
+ifneq ($(filter %GenRegisterInfo.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenRegisterInfo.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenRegisterInfo.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                       $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,register-info)
+endif
+
+ifneq ($(filter %GenInstrInfo.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenInstrInfo.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenInstrInfo.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                    $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,instr-info)
+endif
+
+ifneq ($(filter %GenAsmWriter.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenAsmWriter.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenAsmWriter.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                    $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,asm-writer)
+endif
+
+ifneq ($(filter %GenAsmWriter1.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenAsmWriter1.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenAsmWriter1.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                     $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,asm-writer -asmwriternum=1)
+endif
+
+ifneq ($(filter %GenAsmMatcher.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenAsmMatcher.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenAsmMatcher.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                     $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,asm-matcher)
+endif
+
+# TODO(srhines): Is this needed
+ifneq ($(filter %GenCodeEmitter.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenCodeEmitter.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenCodeEmitter.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                      $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,emitter)
+endif
+
+ifneq ($(filter %GenMCCodeEmitter.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenMCCodeEmitter.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenMCCodeEmitter.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,emitter)
+endif
+
+ifneq ($(filter %GenMCPseudoLowering.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenMCPseudoLowering.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenMCPseudoLowering.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                           $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,pseudo-lowering)
+endif
+
+ifneq ($(filter %GenDAGISel.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenDAGISel.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenDAGISel.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                  $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,dag-isel)
+endif
+
+ifneq ($(filter %GenDisassemblerTables.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenDisassemblerTables.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenDisassemblerTables.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                             $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,disassembler)
+endif
+
+ifneq ($(filter %GenEDInfo.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenEDInfo.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenEDInfo.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                 $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,enhanced-disassembly-info)
+endif
+
+ifneq ($(filter %GenFastISel.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenFastISel.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenFastISel.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                   $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,fast-isel)
+endif
+
+ifneq ($(filter %GenSubtargetInfo.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenSubtargetInfo.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenSubtargetInfo.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,subtarget)
+endif
+
+ifneq ($(filter %GenCallingConv.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenCallingConv.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenCallingConv.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                      $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,callingconv)
+endif
+
+ifneq ($(filter %GenTgtIntrinsicEnums.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenTgtIntrinsicEnums.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenTgtIntrinsicEnums.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                     $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,tgt-intrinsic-enums)
+endif
+
+ifneq ($(filter %GenTgtIntrinsicImpl.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenTgtIntrinsicImpl.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenTgtIntrinsicImpl.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                     $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,tgt-intrinsic-impl)
+endif
+
+ifneq ($(findstring ARMGenDecoderTables.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/ARMGenDecoderTables.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/ARMGenDecoderTables.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                          $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,arm-decoder)
+endif
+
+ifneq ($(filter %GenGlobalISel.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenGlobalISel.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenGlobalISel.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,global-isel)
+endif
+
+ifneq ($(filter %GenExegesis.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenExegesis.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenExegesis.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,global-isel)
+endif
+
+ifneq ($(filter %GenRegisterBank.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenRegisterBank.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenRegisterBank.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,register-bank)
+endif
+
+ifneq ($(filter %GenSystemRegister.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenSystemRegister.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenSystemRegister.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,searchable-tables)
+endif
+
+ifneq ($(filter %GenSystemOperands.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenSystemOperands.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenSystemOperands.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,searchable-tables)
+endif
+
+ifneq ($(filter %GenEVEX2VEXTables.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenEVEX2VEXTables.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenEVEX2VEXTables.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,x86-EVEX2VEX-tables)
+endif
+
+ifneq ($(filter %GenIntrinsicEnums.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenIntrinsicEnums.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenIntrinsicEnums.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,tgt-intrinsic-enums)
+endif
+
+ifneq ($(filter %GenIntrinsicImpl.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenIntrinsicImpl.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenIntrinsicImpl.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,tgt-intrinsic-impl)
+endif
+
+ifneq ($(filter %GenSearchableTables.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%GenSearchableTables.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%GenSearchableTables.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,searchable-tables)
+endif
+
+ifneq ($(filter %AttributesCompatFunc.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%AttributesCompatFunc.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%AttributesCompatFunc.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,attrs)
+endif
+
+ifneq ($(filter %InstCombineTables.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%InstCombineTables.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%InstCombineTables.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,searchable-tables)
+endif
+
+ifneq ($(filter %Options.inc,$(tblgen_gen_tables)),)
+$(generated_sources)/%Options.inc: TBLGEN_LOCAL_MODULE := $(LOCAL_MODULE)
+$(generated_sources)/%Options.inc: $(tblgen_source_dir)/$(TBLGEN_IN_TD) \
+                                        $(tblgen_td_deps) $(LLVM70_TBLGEN)
+	$(call transform70-td-to-out,opt-parser-defs)
+endif
+
+# endif normal
+endif
+
+# Reset local variables
+tblgen_td_deps :=
+
+endif
diff -Nurp a/shared_llvm70.mk b/shared_llvm70.mk
--- a/shared_llvm70.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/shared_llvm70.mk	2021-04-19 01:54:56.734322861 +0000
@@ -0,0 +1,156 @@
+LOCAL_PATH:= $(call my-dir)
+
+llvm70_pre_static_libraries := \
+  libLLVM70Linker \
+  libLLVM70ipo \
+  libLLVM70DebugInfoDWARF \
+  libLLVM70DebugInfoPDB \
+  libLLVM70DebugInfoMSF \
+  libLLVM70Symbolize \
+  libLLVM70IRReader \
+  libLLVM70BitWriter \
+  libLLVM70BitstreamReader \
+  libLLVM70BitReader \
+  libLLVM70Passes \
+  libLLVM70Demangle \
+  libLLVM70Remarks \
+  libLLVM70MIRParser \
+  libLLVM70JITLink \
+  libLLVM70Coroutines
+
+llvm70_arm_static_libraries := \
+  libLLVM70ARMCodeGen \
+  libLLVM70ARMAsmParser \
+  libLLVM70ARMInfo \
+  libLLVM70ARMDesc \
+  libLLVM70ARMDisassembler \
+  libLLVM70ARMUtils
+
+llvm70_x86_static_libraries := \
+  libLLVM70X86CodeGen \
+  libLLVM70X86Info \
+  libLLVM70X86Desc \
+  libLLVM70X86AsmParser \
+  libLLVM70X86Utils \
+  libLLVM70X86Disassembler
+
+llvm70_amdgpu_static_libraries := \
+  libLLVM70AMDGPUCodeGen \
+  libLLVM70AMDGPUInfo \
+  libLLVM70AMDGPUDesc \
+  libLLVM70AMDGPUAsmParser \
+  libLLVM70AMDGPUDisassembler \
+  libLLVM70AMDGPUUtils
+
+llvm70_aarch64_static_libraries := \
+  libLLVM70AArch64CodeGen \
+  libLLVM70AArch64Info \
+  libLLVM70AArch64Desc \
+  libLLVM70AArch64AsmParser \
+  libLLVM70AArch64Utils \
+  libLLVM70AArch64Disassembler
+
+llvm70_post_static_libraries :=  \
+  libLLVM70LTO                   \
+  libLLVM70AsmPrinter            \
+  libLLVM70SelectionDAG          \
+  libLLVM70CodeGen               \
+  libLLVM70DebugInfoCodeView     \
+  libLLVM70Object                \
+  libLLVM70ScalarOpts            \
+  libLLVM70AggressiveInstCombine \
+  libLLVM70InstCombine           \
+  libLLVM70Instrumentation       \
+  libLLVM70TransformObjCARC      \
+  libLLVM70TransformUtils        \
+  libLLVM70Analysis              \
+  libLLVM70Target                \
+  libLLVM70GlobalISel            \
+  libLLVM70MCDisassembler        \
+  libLLVM70MC                    \
+  libLLVM70MCParser              \
+  libLLVM70Core                  \
+  libLLVM70AsmParser             \
+  libLLVM70Option                \
+  libLLVM70Support               \
+  libLLVM70Vectorize             \
+  libLLVM70ProfileData           \
+  libLLVM70ProfileDataCoverage   \
+  libLLVM70LibDriver             \
+  libLLVM70ExecutionEngine       \
+  libLLVM70RuntimeDyld           \
+  libLLVM70MCJIT                 \
+  libLLVM70OrcJIT                \
+  libLLVM70BinaryFormat
+
+# HOST LLVM70 shared library build
+include $(CLEAR_VARS)
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_MODULE:= libLLVM70
+
+LOCAL_MODULE_TAGS := optional
+
+# Host build pulls in all ARM, Mips, X86 components.
+LOCAL_WHOLE_STATIC_LIBRARIES := \
+  $(llvm70_pre_static_libraries) \
+  $(llvm70_arm_static_libraries) \
+  $(llvm70_x86_static_libraries) \
+  $(llvm70_aarch64_static_libraries) \
+  $(llvm70_post_static_libraries)
+
+LOCAL_LDLIBS_darwin := -ldl -lpthread
+LOCAL_LDLIBS_linux := -ldl -lpthread
+
+LOCAL_MODULE_HOST_OS := linux
+
+LOCAL_EXPORT_C_INCLUDE_DIRS :=     \
+  $(LLVM70_ROOT_PATH)/include      \
+  $(LLVM70_ROOT_PATH)/host/include \
+  $(call intermediates-dir-for,STATIC_LIBRARIES,libLLVM70Core,$(LOCAL_IS_HOST_MODULE),,,)
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_SHARED_LIBRARY)
+
+ifeq (,$(filter $(TARGET_ARCH),$(LLVM70_SUPPORTED_ARCH)))
+$(warning TODO $(TARGET_ARCH): Enable llvm70 build)
+endif
+
+ifneq (true,$(DISABLE_LLVM70_DEVICE_BUILDS))
+# DEVICE LLVM70 shared library build
+include $(CLEAR_VARS)
+
+LOCAL_MODULE:= libLLVM70
+
+LOCAL_MODULE_TAGS := optional
+
+# Device build selectively pulls in ARM, X86 components.
+LOCAL_WHOLE_STATIC_LIBRARIES := \
+  $(llvm70_pre_static_libraries) \
+  $(llvm70_amdgpu_static_libraries)
+
+LOCAL_WHOLE_STATIC_LIBRARIES_arm += $(llvm70_arm_static_libraries)
+LOCAL_WHOLE_STATIC_LIBRARIES_x86 += $(llvm70_x86_static_libraries)
+LOCAL_WHOLE_STATIC_LIBRARIES_x86_64 += $(llvm70_x86_static_libraries)
+LOCAL_WHOLE_STATIC_LIBRARIES_arm64 += $(llvm70_aarch64_static_libraries)
+LOCAL_WHOLE_STATIC_LIBRARIES_arm64 += $(llvm70_arm_static_libraries)
+
+ifeq ($(BUILD_ARM_FOR_X86),true)
+LOCAL_WHOLE_STATIC_LIBRARIES_x86 += $(llvm70_arm_static_libraries)
+LOCAL_WHOLE_STATIC_LIBRARIES_x86 += $(llvm70_aarch64_static_libraries)
+LOCAL_WHOLE_STATIC_LIBRARIES_x86_64 += $(llvm70_arm_static_libraries)
+LOCAL_WHOLE_STATIC_LIBRARIES_x86_64 += $(llvm70_aarch64_static_libraries)
+endif
+
+LOCAL_WHOLE_STATIC_LIBRARIES += \
+  $(llvm70_post_static_libraries)
+
+LOCAL_EXPORT_C_INCLUDE_DIRS :=       \
+  $(LLVM70_ROOT_PATH)/include        \
+  $(LLVM70_ROOT_PATH)/device/include \
+  $(call intermediates-dir-for,STATIC_LIBRARIES,libLLVM70Core,$(LOCAL_IS_HOST_MODULE),,,)
+
+include $(LLVM70_DEVICE_BUILD_MK)
+include $(BUILD_SHARED_LIBRARY)
+
+endif
diff -Nurp a/tools/bugpoint/Android.mk b/tools/bugpoint/Android.mk
--- a/tools/bugpoint/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/bugpoint/Android.mk	2021-04-19 01:55:05.010322497 +0000
@@ -0,0 +1,67 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+#===---------------------------------------------------------------===
+# bugpoint command line tool
+#===---------------------------------------------------------------===
+
+bugpoint70_SRC_FILES := \
+  BugDriver.cpp       \
+  CrashDebugger.cpp   \
+  ExecutionDriver.cpp \
+  ExtractFunction.cpp \
+  FindBugs.cpp        \
+  Miscompilation.cpp  \
+  OptimizerDriver.cpp \
+  ToolRunner.cpp      \
+  bugpoint.cpp        \
+
+bugpoint70_STATIC_LIBRARIES := \
+  libLLVM70BitWriter \
+  libLLVM70BitstreamReader \
+  libLLVM70CodeGen \
+  libLLVM70ipo \
+  libLLVM70IRReader \
+  libLLVM70BitReader \
+  libLLVM70AsmParser \
+  libLLVM70InstCombine \
+  libLLVM70Instrumentation \
+  libLLVM70Linker \
+  libLLVM70TransformObjCARC \
+  libLLVM70Object \
+  libLLVM70ScalarOpts \
+  libLLVM70TransformUtils \
+  libLLVM70Analysis \
+  libLLVM70Target \
+  libLLVM70Core \
+  libLLVM70MC \
+  libLLVM70MCParser \
+  libLLVM70ProfileData \
+  libLLVM70Vectorize \
+  libLLVM70Support \
+  libLLVM70Remarks \
+  libLLVM70MIRParser \
+  libLLVM70JITLink \
+  libLLVM70Coroutines
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := bugpoint70
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(bugpoint70_SRC_FILES)
+
+LOCAL_STATIC_LIBRARIES := $(bugpoint70_STATIC_LIBRARIES)
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+LOCAL_LDFLAGS_darwin := -Wl,-export_dynamic
+LOCAL_LDFLAGS_linux := -Wl,--export-dynamic
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/tools/bugpoint-passes/Android.mk b/tools/bugpoint-passes/Android.mk
--- a/tools/bugpoint-passes/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/bugpoint-passes/Android.mk	2021-04-19 01:45:06.306348838 +0000
@@ -0,0 +1,22 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+
+bugpoint70_passes_SRC_FILES := \
+  TestPasses.cpp
+
+# BugpointPasses module for the host
+# =====================================================
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := $(bugpoint70_passes_SRC_FILES)
+LOCAL_MODULE := BugpointPasses70
+
+LOCAL_MODULE_CLASS := SHARED_LIBRARIES # needed for tblgen
+LOCAL_LDFLAGS_darwin := -Wl,-undefined -Wl,dynamic_lookup
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_SHARED_LIBRARY)
diff -Nurp a/tools/llvm-ar/Android.mk b/tools/llvm-ar/Android.mk
--- a/tools/llvm-ar/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/llvm-ar/Android.mk	2021-04-19 01:45:06.318348838 +0000
@@ -0,0 +1,34 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+#===---------------------------------------------------------------===
+# llvm-ar command line tool
+#===---------------------------------------------------------------===
+
+llvm70_ar_SRC_FILES := \
+  llvm-ar.cpp
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := llvm70-ar
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(llvm70_ar_SRC_FILES)
+
+LOCAL_SHARED_LIBRARIES := libLLVM70
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+
+# Create symlink llvm-lib and llvm-ranlib pointing to llvm-ar.
+# Use "=" (instead of ":=") to defer the evaluation.
+LOCAL_POST_INSTALL_CMD = $(hide) ln -sf llvm70-ar $(dir $(LOCAL_INSTALLED_MODULE))llvm70-lib \
+						 && ln -sf llvm70-ar $(dir $(LOCAL_INSTALLED_MODULE))llvm70-ranlib
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/tools/llvm-as/Android.mk b/tools/llvm-as/Android.mk
--- a/tools/llvm-as/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/llvm-as/Android.mk	2021-04-19 01:55:00.054322715 +0000
@@ -0,0 +1,29 @@
+LOCAL_PATH:= $(call my-dir)
+
+llvm70_as_SRC_FILES := \
+  llvm-as.cpp
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := llvm70-as
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := $(llvm70_as_SRC_FILES)
+LOCAL_LDLIBS += -lm
+LOCAL_LDLIBS_windows := -limagehlp
+LOCAL_LDLIBS_darwin := -lpthread -ldl
+LOCAL_LDLIBS_linux := -lpthread -ldl
+
+LOCAL_STATIC_LIBRARIES := \
+  libLLVM70AsmParser \
+  libLLVM70BitWriter \
+  libLLVM70BitstreamReader \
+  libLLVM70Core \
+  libLLVM70Support \
+  libLLVM70MIRParser \
+  libLLVM70JITLink \
+  libLLVM70Coroutines
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/tools/llvm-bcanalyzer/Android.mk b/tools/llvm-bcanalyzer/Android.mk
--- a/tools/llvm-bcanalyzer/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/llvm-bcanalyzer/Android.mk	2021-04-19 01:45:06.318348838 +0000
@@ -0,0 +1,36 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+#===---------------------------------------------------------------===
+# llvm-bcanalyzer command line tool
+#===---------------------------------------------------------------===
+
+llvm70_bcanalyzer_SRC_FILES := \
+  llvm-bcanalyzer.cpp
+
+llvm70_bcanalyzer_STATIC_LIBRARIES := \
+  libLLVM70BitReader                  \
+  libLLVM70Core                       \
+  libLLVM70Support                    \
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := llvm70-bcanalyzer
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(llvm70_bcanalyzer_SRC_FILES)
+
+LOCAL_STATIC_LIBRARIES := $(llvm70_bcanalyzer_STATIC_LIBRARIES)
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+LOCAL_C_INCLUDES += external/llvm/include
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/tools/llvm-config/Android.mk b/tools/llvm-config/Android.mk
--- a/tools/llvm-config/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/llvm-config/Android.mk	2021-04-19 01:45:06.322348837 +0000
@@ -0,0 +1,49 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+#===---------------------------------------------------------------===
+# llvm-config command line tool
+#===---------------------------------------------------------------===
+
+include $(CLEAR_VARS)
+
+llvm70_config_SRC_FILES := \
+  llvm-config.cpp
+
+llvm70_config_STATIC_LIBRARIES := \
+  libLLVM70Core \
+  libLLVM70Support
+
+LOCAL_MODULE := llvm70-config
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+# Create BuildVariables.inc dynamically from BuildVariables.inc.in
+generated_sources := $(call local-generated-sources-dir)
+GEN := $(addprefix $(generated_sources)/, \
+            BuildVariables.inc \
+        )
+
+$(GEN) : PRIVATE_PATH := $(LOCAL_PATH)
+$(GEN) : PRIVATE_CUSTOM_TOOL = sed -e 's/@ANDROID_BUILD_TOP@/$(subst /,\/,$(ANDROID_BUILD_TOP))/' < $< > $@
+$(GEN) : $(LOCAL_PATH)/BuildVariables.inc.in
+$(GEN): $(generated_sources)/%.inc : $(LOCAL_PATH)/%.inc.in
+	$(transform-generated-source)
+
+LOCAL_GENERATED_SOURCES += $(GEN)
+
+LOCAL_C_INCLUDES := $(generated_sources)
+
+LOCAL_SRC_FILES := $(llvm70_config_SRC_FILES)
+LOCAL_STATIC_LIBRARIES := $(llvm70_config_STATIC_LIBRARIES)
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+LOCAL_ADDITIONAL_DEPENDENCIES := \
+  $(LOCAL_PATH)/Android.mk \
+  $(LOCAL_GENERATED_SOURCES)
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/tools/llvm-cov/Android.mk b/tools/llvm-cov/Android.mk
--- a/tools/llvm-cov/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/llvm-cov/Android.mk	2021-04-19 01:45:06.326348837 +0000
@@ -0,0 +1,48 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+#===---------------------------------------------------------------===
+# llvm-cov command line tool
+#===---------------------------------------------------------------===
+
+llvm_cov_SRC_FILES :=        \
+  llvm-cov.cpp               \
+  gcov.cpp                   \
+  CodeCoverage.cpp           \
+  CoverageExporterJson.cpp   \
+  CoverageFilters.cpp        \
+  CoverageReport.cpp         \
+  CoverageSummaryInfo.cpp    \
+  SourceCoverageView.cpp     \
+  SourceCoverageViewHTML.cpp \
+  SourceCoverageViewText.cpp \
+  TestingSupport.cpp
+
+llvm_cov_STATIC_LIBRARIES :=   \
+  libLLVM70Object              \
+  libLLVM70ProfileData         \
+  libLLVM70MC                  \
+  libLLVM70MCParser            \
+  libLLVM70BitReader           \
+  libLLVM70Core                \
+  libLLVM70Support             \
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := llvm70-cov
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(llvm70_cov_SRC_FILES)
+
+LOCAL_STATIC_LIBRARIES := $(llvm70_cov_STATIC_LIBRARIES)
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/tools/llvm-diff/Android.mk b/tools/llvm-diff/Android.mk
--- a/tools/llvm-diff/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/llvm-diff/Android.mk	2021-04-19 01:45:06.330348837 +0000
@@ -0,0 +1,40 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+#===---------------------------------------------------------------===
+# llvm-diff command line tool
+#===---------------------------------------------------------------===
+
+llvm70_diff_SRC_FILES := \
+  llvm-diff.cpp        \
+  DiffConsumer.cpp     \
+  DifferenceEngine.cpp \
+  DiffLog.cpp          \
+
+llvm70_diff_STATIC_LIBRARIES := \
+  libLLVM70IRReader             \
+  libLLVM70BitReader            \
+  libLLVM70AsmParser            \
+  libLLVM70Core                 \
+  libLLVM70Support              \
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := llvm70-diff
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(llvm70_diff_SRC_FILES)
+
+LOCAL_STATIC_LIBRARIES := $(llvm70_diff_STATIC_LIBRARIES)
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/tools/llvm-dis/Android.mk b/tools/llvm-dis/Android.mk
--- a/tools/llvm-dis/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/tools/llvm-dis/Android.mk	2021-04-19 01:45:06.330348837 +0000
@@ -0,0 +1,23 @@
+LOCAL_PATH:= $(call my-dir)
+
+llvm70_dis_SRC_FILES := \
+  llvm-dis.cpp
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := llvm70-dis
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := $(llvm70_dis_SRC_FILES)
+LOCAL_LDLIBS += -lpthread -lm -ldl
+
+LOCAL_STATIC_LIBRARIES := \
+  libLLVM70Analysis \
+  libLLVM70BitReader \
+  libLLVM70Core \
+  libLLVM70Support
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(LLVM70_GEN_ATTRIBUTES_MK)
+include $(LLVM70_GEN_INTRINSICS_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/utils/count/Android.mk b/utils/count/Android.mk
--- a/utils/count/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/utils/count/Android.mk	2021-04-19 01:45:06.502348830 +0000
@@ -0,0 +1,26 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+#===---------------------------------------------------------------===
+# count command line tool
+#===---------------------------------------------------------------===
+
+count70_SRC_FILES := \
+  count.c
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := count70
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(count70_SRC_FILES)
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/utils/FileCheck/Android.mk b/utils/FileCheck/Android.mk
--- a/utils/FileCheck/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/utils/FileCheck/Android.mk	2021-04-19 01:45:06.474348831 +0000
@@ -0,0 +1,22 @@
+LOCAL_PATH:= $(call my-dir)
+
+filecheck70_SRC_FILES := \
+  FileCheck.cpp
+
+filecheck70_STATIC_LIBRARIES := \
+  libLLVM70Support
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := FileCheck70
+LOCAL_SRC_FILES := $(filecheck_SRC_FILES)
+LOCAL_STATIC_LIBRARIES := $(filecheck70_STATIC_LIBRARIES)
+LOCAL_C_INCLUDES += external/llvm/host/include
+LOCAL_LDLIBS += -lpthread -lm -ldl
+LOCAL_CFLAGS += -D __STDC_LIMIT_MACROS -D __STDC_CONSTANT_MACROS
+
+#REQUIRES_EH := 1
+#REQUIRES_RTTI := 1
+
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/utils/not/Android.mk b/utils/not/Android.mk
--- a/utils/not/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/utils/not/Android.mk	2021-04-19 01:45:06.638348824 +0000
@@ -0,0 +1,32 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+#===---------------------------------------------------------------===
+# not command line tool
+#===---------------------------------------------------------------===
+
+not70_SRC_FILES := \
+  not.cpp
+
+not70_STATIC_LIBRARIES := \
+  libLLVM70Core         \
+  libLLVM70Support      \
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := not70
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(not70_SRC_FILES)
+
+LOCAL_STATIC_LIBRARIES := $(not70_STATIC_LIBRARIES)
+
+LOCAL_LDLIBS += -lpthread -lm -ldl
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/utils/TableGen/Android.mk b/utils/TableGen/Android.mk
--- a/utils/TableGen/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/utils/TableGen/Android.mk	2021-04-19 01:45:06.490348830 +0000
@@ -0,0 +1,73 @@
+LOCAL_PATH := $(call my-dir)
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+
+tablegen70_SRC_FILES :=              \
+  AsmMatcherEmitter.cpp              \
+  AsmWriterEmitter.cpp               \
+  AsmWriterInst.cpp                  \
+  Attributes.cpp                     \
+  CallingConvEmitter.cpp             \
+  CodeEmitterGen.cpp                 \
+  CodeGenDAGPatterns.cpp             \
+  CodeGenHwModes.cpp                 \
+  CodeGenInstruction.cpp             \
+  CodeGenMapTable.cpp                \
+  CodeGenRegisters.cpp               \
+  CodeGenSchedule.cpp                \
+  CodeGenTarget.cpp                  \
+  DAGISelEmitter.cpp                 \
+  DAGISelMatcherEmitter.cpp          \
+  DAGISelMatcherGen.cpp              \
+  DAGISelMatcherOpt.cpp              \
+  DAGISelMatcher.cpp                 \
+  DFAPacketizerEmitter.cpp           \
+  DisassemblerEmitter.cpp            \
+  ExegesisEmitter.cpp                \
+  FastISelEmitter.cpp                \
+  FixedLenDecoderEmitter.cpp         \
+  GlobalISelEmitter.cpp              \
+  InfoByHwMode.cpp                   \
+  InstrInfoEmitter.cpp               \
+  InstrDocsEmitter.cpp               \
+  IntrinsicEmitter.cpp               \
+  OptParserEmitter.cpp               \
+  PredicateExpander.cpp              \
+  PseudoLoweringEmitter.cpp          \
+  RISCVCompressInstEmitter.cpp       \
+  RegisterBankEmitter.cpp            \
+  RegisterInfoEmitter.cpp            \
+  SDNodeProperties.cpp               \
+  SearchableTableEmitter.cpp         \
+  SubtargetEmitter.cpp               \
+  SubtargetFeatureInfo.cpp           \
+  TableGen.cpp                       \
+  Types.cpp                          \
+  X86DisassemblerTables.cpp          \
+  X86EVEX2VEXTablesEmitter.cpp       \
+  X86FoldTablesEmitter.cpp           \
+  X86ModRMFilters.cpp                \
+  X86RecognizableInstr.cpp           \
+  WebAssemblyDisassemblerEmitter.cpp \
+  CTagsEmitter.cpp
+
+include $(CLEAR_VARS)
+LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
+
+LOCAL_MODULE := llvm70-tblgen
+LOCAL_MODULE_TAGS := optional
+LOCAL_SRC_FILES := $(tablegen70_SRC_FILES)
+
+REQUIRES_EH := 1
+REQUIRES_RTTI := 1
+
+LOCAL_STATIC_LIBRARIES := \
+  libLLVM70TableGen \
+  libLLVM70Support
+
+LOCAL_LDLIBS += -lm
+LOCAL_LDLIBS_windows := -limagehlp -lpsapi
+LOCAL_LDLIBS_darwin := -lpthread -ldl
+LOCAL_LDLIBS_linux := -lpthread -ldl
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_EXECUTABLE)
diff -Nurp a/utils/yaml-bench/Android.mk b/utils/yaml-bench/Android.mk
--- a/utils/yaml-bench/Android.mk	1970-01-01 00:00:00.000000000 +0000
+++ b/utils/yaml-bench/Android.mk	2021-04-19 01:45:06.662348822 +0000
@@ -0,0 +1,28 @@
+LOCAL_PATH := $(call my-dir)
+
+LLVM70_ROOT_PATH := $(LOCAL_PATH)/../..
+
+
+yaml70_bench_SRC_FILES := \
+  YAMLBench.cpp
+
+yaml70_bench_STATIC_LIBRARIES := \
+  libLLVM70Support \
+
+# yaml-bench executable for the host
+# =====================================================
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := yaml70-bench
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
+LOCAL_SRC_FILES := $(yaml70_bench_SRC_FILES)
+
+LOCAL_STATIC_LIBRARIES := $(yaml70_bench_STATIC_LIBRARIES)
+
+include $(LLVM70_ROOT_PATH)/llvm70.mk
+include $(LLVM70_HOST_BUILD_MK)
+include $(BUILD_HOST_EXECUTABLE)
