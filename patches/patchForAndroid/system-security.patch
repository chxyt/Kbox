diff --git a/keystore/keystore_main.cpp b/keystore/keystore_main.cpp
index f3eadd7..3dabf03 100644
--- a/keystore/keystore_main.cpp
+++ b/keystore/keystore_main.cpp
@@ -138,18 +138,20 @@ int main(int argc, char* argv[]) {
     auto kmDevices = initializeKeymasters();
 
     CHECK(kmDevices[SecurityLevel::SOFTWARE]) << "Missing software Keymaster device";
+#if 0
     CHECK(kmDevices[SecurityLevel::TRUSTED_ENVIRONMENT])
         << "Error no viable keymaster device found";
 
     CHECK(configure_selinux() != -1) << "Failed to configure SELinux.";
 
     auto halVersion = kmDevices[SecurityLevel::TRUSTED_ENVIRONMENT]->halVersion();
+#endif
 
     // If the hardware is keymaster 2.0 or higher we will not allow the fallback device for import
     // or generation of keys. The fallback device is only used for legacy keys present on the
     // device.
-    SecurityLevel minimalAllowedSecurityLevelForNewKeys =
-        halVersion.majorVersion >= 2 ? SecurityLevel::TRUSTED_ENVIRONMENT : SecurityLevel::SOFTWARE;
+    SecurityLevel minimalAllowedSecurityLevelForNewKeys = SecurityLevel::SOFTWARE;
+    //     halVersion.majorVersion >= 2 ? SecurityLevel::TRUSTED_ENVIRONMENT : SecurityLevel::SOFTWARE;
 
     android::sp<keystore::KeyStore> keyStore(
         new keystore::KeyStore(kmDevices, minimalAllowedSecurityLevelForNewKeys));
diff --git a/keystore/keystore_utils.cpp b/keystore/keystore_utils.cpp
index 78056d6..6ea5906 100644
--- a/keystore/keystore_utils.cpp
+++ b/keystore/keystore_utils.cpp
@@ -118,9 +118,11 @@ SecurityLevel flagsToSecurityLevel(int32_t flags) {
     case (KEYSTORE_FLAG_FALLBACK | KEYSTORE_FLAG_STRONGBOX):
         return SecurityLevel::SOFTWARE;
     case KEYSTORE_FLAG_STRONGBOX:
-        return SecurityLevel::STRONGBOX;
+        // return SecurityLevel::STRONGBOX;
+        return SecurityLevel::SOFTWARE;
     default:
-        return SecurityLevel::TRUSTED_ENVIRONMENT;
+        // return SecurityLevel::TRUSTED_ENVIRONMENT;
+        return SecurityLevel::SOFTWARE;
     }
 }
 
